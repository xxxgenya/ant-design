"use strict";(self.webpackChunkantd=self.webpackChunkantd||[]).push([[7430],{326179:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},443617:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},584040:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},615053:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},25853:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},184743:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},985402:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},765673:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},841497:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},517366:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},895522:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},20433:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},349186:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},374761:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},406691:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},652016:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},923953:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},294711:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},907881:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},573648:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},232797:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},294651:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},359495:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},694055:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},151879:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},957020:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},164633:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},469703:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},790332:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},798198:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},521099:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},361026:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},237779:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},334534:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},833886:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},996638:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},263754:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},608904:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},404817:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},177432:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},273803:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},502768:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},203488:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},191349:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},460295:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},706231:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},995957:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},884587:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},997996:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},792127:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},444049:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},487393:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},432370:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},70024:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},581383:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},324969:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},768842:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},868263:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},775737:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},463942:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},106581:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},212789:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},894645:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},836048:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},412117:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},290123:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},86472:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},344244:function(o,a,e){e.r(a),e.d(a,{demos:function(){return h}});var t=e(15009),n=e.n(t),I=e(899289),v=e.n(I),d=e(667294),h={"docs-spec-motion-demo-en-us-0":{component:d.memo(d.lazy(v()(n()().mark(function m(){var i,s,c,u,p;return n()().wrap(function(r){for(;;)switch(r.prev=r.next){case 0:return p=function(){var x=u.map(function(l){return d.createElement(s,{key:l.title,sm:24,md:8},d.createElement("div",{className:"principle"},d.createElement("div",null,d.createElement("img",{src:l.img,width:"80%"})),d.createElement("h4",null,l.title),d.createElement("p",null,l.content)))});return d.createElement("div",{className:"motion-principle-wrapper"},d.createElement(c,{gutter:{md:32,sm:0},className:"principle-wrapper"},x))},r.next=3,Promise.all([e.e(7602),e.e(5560),e.e(9132),e.e(5642),e.e(7898),e.e(4137),e.e(3253),e.e(4500),e.e(7257),e.e(1912),e.e(6906),e.e(2312),e.e(9285),e.e(9086)]).then(e.bind(e,379086));case 3:return i=r.sent,s=i.Col,c=i.Row,u=[{title:"Natural",img:"https://gw.alipayobjects.com/zos/rmsportal/LyTPSGknLUlxiVdwMWyu.gif",content:"The animation should based on law of nature. This assures the animation is smooth by its nature and intuitive to its users."},{title:"Performant",img:"https://gw.alipayobjects.com/zos/rmsportal/SQOZVQVIossbXpzDmihu.gif",content:"The animation should have a transition time as minimal as possible so that it serves its purpose in the most effective way."},{title:"Concise",img:"https://gw.alipayobjects.com/zos/rmsportal/OkIXkscKxywYLSrilPIf.gif",content:"The animation should be meaningful and justified. An over fancy animation will frustrate its users, and therefore should always be avoided."}],r.abrupt("return",{default:p});case 8:case"end":return r.stop()}},m)})))),asset:null,context:void 0,renderOpts:void 0}}},749326:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},344657:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},135274:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},268610:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},86673:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},148088:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},372400:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},417408:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},569775:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},170775:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},504164:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},63789:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},847621:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},913829:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},441813:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},972702:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},918588:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},861215:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},707895:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},362437:function(o,a,e){e.r(a),e.d(a,{demos:function(){return n}});var t=e(667294),n={}},35756:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In the maintenance of antd-mobile, We meet an annoying ghost. It rarely appears when building locally, but it almost always appears in the github workflow. After a lot of tossing, We finally found its trace.",paraId:0},{value:"For antd-mobile's CI, there is a task to check the build artifacts, which will prompt the file size changes. But in recent months, this task often fails to build, as shown in the following figure:",paraId:1,tocIndex:0},{value:"Check the log, we will get the error message of CSS file:",paraId:2,tocIndex:0},{value:"It seems that the error occurred when building 2x style (antd-mobile will generate 2x style for high-definition screen):",paraId:3,tocIndex:0},{value:`[09:44:16] Using gulpfile ~/work/ant-design-mobile/ant-design-mobile/gulpfile.js
[09:44:16] Starting 'default'...
[09:44:16] Starting 'clean'...
[09:44:17] Finished 'clean' after 286 ms
[09:44:17] Starting 'buildES'...
[09:44:26] Finished 'buildES' after 8.77 s
[09:44:26] Starting 'buildCJS'...
[09:44:27] Finished 'buildCJS' after 1.72 s
[09:44:27] Starting 'buildDeclaration'...
[09:44:27] Starting 'buildStyle'...
[09:44:28] Finished 'buildStyle' after 682 ms
[09:44:34] Finished 'buildDeclaration' after 6.5 s
[09:44:34] Starting 'copyAssets'...
[09:44:34] Finished 'copyAssets' after 2.37 ms
[09:44:34] Starting 'copyMetaFiles'...
[09:44:34] Finished 'copyMetaFiles' after 4.64 ms
[09:44:34] Starting 'generatePackageJSON'...
[09:44:34] Finished 'generatePackageJSON' after 2.72 ms
[09:44:34] Starting 'buildBundles'...
[09:44:45] Finished 'buildBundles' after 11 s
[09:44:45] Starting 'init2xFolder'...
[09:44:46] Finished 'init2xFolder' after 811 ms
[09:44:46] Starting 'build2xCSS'...
[09:44:46] 'build2xCSS' errored after 126 ms
[09:44:46] CssSyntaxError in plugin "gulp-postcss"
`,paraId:4,tocIndex:0},{value:"The ",paraId:5,tocIndex:0},{value:"style.css",paraId:5,tocIndex:0},{value:" of ",paraId:5,tocIndex:0},{value:"build2xCSS",paraId:5,tocIndex:0},{value:" comes from the artifact of ",paraId:5,tocIndex:0},{value:"buildStyle",paraId:5,tocIndex:0},{value:", so it can be determined that there is a problem in the ",paraId:5,tocIndex:0},{value:"buildStyle",paraId:5,tocIndex:0},{value:" task. After checking the corresponding file ",paraId:5,tocIndex:0},{value:"/lib/bundle/style.css",paraId:5,tocIndex:0},{value:", we found the following content:",paraId:5,tocIndex:0},{value:"The first line of ",paraId:6,tocIndex:0},{value:"style.css",paraId:6,tocIndex:0},{value:" is the compressed style, and then the incomplete uncompressed style. Compared with the successful artifact, it will be found that the style after the second line is unexpected:",paraId:6,tocIndex:0},{value:"Check the uncompressed content, we will find that these contents already exist in the previous compressed content:",paraId:7,tocIndex:0},{value:"It is speculated that the uncompressed content was generated first during the build, and then the compressed operation was performed. But there is an asynchronous problem, the second task started to execute before the first task was completed, resulting in the duplication of content. What's even more bizarre is that if it is an asynchronous problem, the error file content generated on CI is surprisingly consistent. No matter how many times it is built, as long as it fails, it must be the same content.",paraId:8,tocIndex:0},{value:"Check the ",paraId:9,tocIndex:1},{value:"gulpfile.js",paraId:9,tocIndex:1},{value:" file, we found that ",paraId:9,tocIndex:1},{value:"buildStyle",paraId:9,tocIndex:1},{value:" uses vite to build. Considering that it may be a problem with the build version, so we upgraded vite from ",paraId:9,tocIndex:1},{value:"3.x",paraId:9,tocIndex:1},{value:" to ",paraId:9,tocIndex:1},{value:"5.x",paraId:9,tocIndex:1},{value:", but the problem still exists. So check the relevant configuration:",paraId:9,tocIndex:1},{value:`{
    root: process.cwd(),
    mode: env,
    logLevel: 'silent',
    define: { 'process.env.NODE_ENV': \`"\${env}"\` },
    build: {
      cssTarget: 'chrome61',
      lib: {
        formats,
        ...
      },
      rollupOptions: {
       output: {
          dir: './lib/bundle',
          globals: {
            'react': 'React',
            'react-dom': 'ReactDOM',
          },
        },
      },
      minify: isProd ? 'esbuild' : false,
    },
  }
`,paraId:10,tocIndex:1},{value:"Though closing the ",paraId:11,tocIndex:1},{value:"logLevel: 'silent'",paraId:11,tocIndex:1},{value:" configuration, we can see more log content after rebuilding:",paraId:11,tocIndex:1},{value:"We are close. When building, antd-mobile will create three copies of ",paraId:12,tocIndex:1},{value:"es",paraId:12,tocIndex:1},{value:", ",paraId:12,tocIndex:1},{value:"cjs",paraId:12,tocIndex:1},{value:", and ",paraId:12,tocIndex:1},{value:"umd",paraId:12,tocIndex:1},{value:" through ",paraId:12,tocIndex:1},{value:"lib.formats",paraId:12,tocIndex:1},{value:". And each ",paraId:12,tocIndex:1},{value:"format",paraId:12,tocIndex:1},{value:" will generate a ",paraId:12,tocIndex:1},{value:"style.css",paraId:12,tocIndex:1},{value:" file. If it is just to overwrite the file, it should only waste extra build resources, and the compressed ",paraId:12,tocIndex:1},{value:"style.css",paraId:12,tocIndex:1},{value:" will always be overwritten, and there should be no problem of simultaneous overwriting. Let's check the part that calls vite to build:",paraId:12,tocIndex:1},{value:`async function buildBundles(cb) {
  const envs = ['development', 'production'];
  const configs = envs.map((env) =>
    getViteConfigForPackage({
      env,
      formats: ['es', 'cjs', 'umd'],
      external: ['react', 'react-dom'],
    }),
  );

  await Promise.all(configs.map((config) => vite.build(config)));
  cb && cb();
}
`,paraId:13,tocIndex:1},{value:"That's it. ",paraId:14,tocIndex:1},{value:"Promise.all",paraId:14,tocIndex:1},{value:" is used to build concurrently, and vite's build is asynchronous. This causes a competition problem for ",paraId:14,tocIndex:1},{value:"style.css",paraId:14,tocIndex:1},{value:". The rollup called by vite will clean up the files and then perform write operations. Since the compressed style needs to be uglified, it is always slower than the uncompressed version. When rollup has finished cleaning and starts writing files, although the first part of the uncompressed version is deleted due to cleaning, the subsequent content is still written, while the compressed version starts writing from the beginning. When both are written, an error will occur and the content will be consistent under each CI build. The fix is also very simple, just change it to sequential execution:",paraId:14,tocIndex:1},{value:`for (const config of configs) {
  await vite.build(config);
}
`,paraId:15,tocIndex:1},{value:"(Of course, subsequent optimizations are also needed for the script. Skip the unnecessary ",paraId:16,tocIndex:1},{value:"style.css",paraId:16,tocIndex:1},{value:" generation)",paraId:16,tocIndex:1},{value:"With the performance changes of github CI, the ghost that was originally difficult to encounter has become stable and reproducible, which is quite interesting. This also gives us the opportunity to locate the problem.",paraId:17,tocIndex:2}]},677011:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In the Tree or similar components (such as TreeSelect, Cascader), needs check function. It's unambiguous most of the time, but when a ",paraId:0},{value:"disabled",paraId:0},{value:" node appears somewhere in the middle, it's worth talking about. This article will introduce the logic of check conduction in antd. It should be noted that in different scenarios, there will be various requirements, and antd has chosen the most commonly used check conduction logic. If you need a different custom style, you can implement it yourself through ",paraId:0},{value:"checkStrictly",paraId:0},{value:".",paraId:0},{value:"Before we start, let's establish a consensus. That is, when a node is ",paraId:1,tocIndex:0},{value:"disabled",paraId:1,tocIndex:0},{value:", it cannot be clicked ",paraId:1,tocIndex:0},{value:"checked",paraId:1,tocIndex:0},{value:". Then we take the following Tree structure as an example:",paraId:1,tocIndex:0},{value:"Next, we check the root node ",paraId:2,tocIndex:0},{value:"parent 1",paraId:2,tocIndex:0},{value:", and analyze the similarities and differences of different check transmission strategies.",paraId:2,tocIndex:0},{value:"This is the most intuitive strategy, all nodes will be checked:",paraId:3,tocIndex:1},{value:"You can immediately see the problem with this strategy, we mentioned earlier that ",paraId:4,tocIndex:1},{value:"disabled",paraId:4,tocIndex:1},{value:" nodes are not allowed to be ",paraId:4,tocIndex:1},{value:"checked",paraId:4,tocIndex:1},{value:". But when the parent node is not ",paraId:4,tocIndex:1},{value:"disabled",paraId:4,tocIndex:1},{value:", its child nodes will be forcibly checked. This will cause the ",paraId:4,tocIndex:1},{value:"disabled",paraId:4,tocIndex:1},{value:' node to "can" be checked, which is obviously unreasonable.',paraId:4,tocIndex:1},{value:"From the checkbox interaction, it looks good, but it's not intuitive. After ",paraId:5,tocIndex:2},{value:"parent 1",paraId:5,tocIndex:2},{value:" is checked, ",paraId:5,tocIndex:2},{value:"leaf 2",paraId:5,tocIndex:2},{value:" is checked by conduction. But the middle node ",paraId:5,tocIndex:2},{value:"parent 1-0",paraId:5,tocIndex:2},{value:" is not checked. At some deep enough level, this strategy can cause the user to be unaware that a check has been propagated:",paraId:5,tocIndex:2},{value:"When there is no scrolling, the user can't realize that the upper ",paraId:6,tocIndex:2},{value:"disabled",paraId:6,tocIndex:2},{value:" is not checked, but the top is checked:",paraId:6,tocIndex:2},{value:"This is also the current strategy of antd, when a node is checked, it will propagate upwards and downwards from the node until ",paraId:7,tocIndex:3},{value:"disabled",paraId:7,tocIndex:3},{value:" stops. When there are multiple ",paraId:7,tocIndex:3},{value:"disabled",paraId:7,tocIndex:3},{value:" in the node, they will each check the status management:",paraId:7,tocIndex:3},{value:"Conversely check ",paraId:8,tocIndex:3},{value:"leaf 2",paraId:8,tocIndex:3},{value:", it will not conduct:",paraId:8,tocIndex:3},{value:"The advantage of this strategy is that users can clearly see the selection process. Compared with the previous strategy, users only need a small area to understand the check logic in the scrolling scene.",paraId:9,tocIndex:3},{value:"Note: We only introduce simple conduction logic here. Please refer to ",paraId:10,tocIndex:4},{value:"actual code",paraId:10,tocIndex:4},{value:" for real world apply. Some performance optimizations will also be done, such as skipping nodes that have been traversed through the cache mechanism.",paraId:10,tocIndex:4},{value:"When a node is checked, we will add ",paraId:11,tocIndex:5},{value:"key",paraId:11,tocIndex:5},{value:" to ",paraId:11,tocIndex:5},{value:"checkedKeys",paraId:11,tocIndex:5},{value:". We iterate over each ",paraId:11,tocIndex:5},{value:"key",paraId:11,tocIndex:5},{value:" in the new ",paraId:11,tocIndex:5},{value:"checkedKeys",paraId:11,tocIndex:5},{value:" for conduction checks. The first step will be conduction from top to bottom (in the example below we check ",paraId:11,tocIndex:5},{value:"0-0",paraId:11,tocIndex:5},{value:"):",paraId:11,tocIndex:5},{value:"We record the current node ",paraId:12,tocIndex:5},{value:"0-0",paraId:12,tocIndex:5},{value:" and the transmitted ",paraId:12,tocIndex:5},{value:"0-0-0",paraId:12,tocIndex:5},{value:" and ",paraId:12,tocIndex:5},{value:"0-0-1",paraId:12,tocIndex:5},{value:":",paraId:12,tocIndex:5},{value:"In the second step, we will conduct upwards from this node:",paraId:13,tocIndex:5},{value:"Similarly, record the node ",paraId:14,tocIndex:5},{value:"0",paraId:14,tocIndex:5},{value:" that was passed on:",paraId:14,tocIndex:5},{value:"When the parent node is checked, the parent node of the parent node may also be checked, so we need to continue to conduct upward until the root node or ",paraId:15,tocIndex:5},{value:"disabled",paraId:15,tocIndex:5},{value:" node.",paraId:15,tocIndex:5},{value:"Same as above, we will perform conduction traversal up and down, and then remove the conduction node from ",paraId:16,tocIndex:6},{value:"checkedKeys",paraId:16,tocIndex:6},{value:". Therefore no further repetition.",paraId:16,tocIndex:6},{value:"Before the early days of v3, we encountered that the ",paraId:17,tocIndex:7},{value:"disabled",paraId:17,tocIndex:7},{value:' check of Tree has different appeals in different scenarios (and each of them is "reasonable" when viewing fragmented appeals), and when it is extracted for inspection, We found that these fragmented demands can conflict with each other. Therefore, we sorted out its transmission logic and chose the most intuitive strategy. Of course, if the current implementation does not meet the requirements, you can implement it yourself through ',paraId:17,tocIndex:7},{value:"checkStrictly",paraId:17,tocIndex:7},{value:".",paraId:17,tocIndex:7}]},322852:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Hello everyone, I'm ",paraId:0},{value:"Redjue",paraId:0},{value:", and I'm honored to have the opportunity to contribute the ",paraId:0},{value:"ColorPicker",paraId:1},{value:" component to ",paraId:0},{value:"Ant Design",paraId:0},{value:" this year. It's been a great learning experience and has given me a deeper understanding of the development process of ",paraId:0},{value:"Ant Design",paraId:0},{value:". In this article, I will share the specific implementation process.",paraId:0},{value:"Before we start implementing, we need to understand a concept: color models. A color model is a mathematical model used to describe colors. Common color models include ",paraId:2,tocIndex:0},{value:"RGB",paraId:2,tocIndex:0},{value:", ",paraId:2,tocIndex:0},{value:"HSV",paraId:2,tocIndex:0},{value:", ",paraId:2,tocIndex:0},{value:"HEX",paraId:2,tocIndex:0},{value:", etc. Among these color models, ",paraId:2,tocIndex:0},{value:"RGB",paraId:2,tocIndex:0},{value:" is the most common and easiest to understand, so let's start with the ",paraId:2,tocIndex:0},{value:"RGB",paraId:2,tocIndex:0},{value:" color model.",paraId:2,tocIndex:0},{value:"The ",paraId:3,tocIndex:1},{value:"RGB",paraId:3,tocIndex:1},{value:" color model represents colors by the combination of three primary colors (red, green, and blue). The value range of each primary color is 0-255, and the combination of the three primary colors can represent 256",paraId:3,tocIndex:1},{value:"3",paraId:3,tocIndex:1},{value:" colors. These colors can form a cube, as shown in the following figure: ",paraId:3,tocIndex:1},{value:"In the ",paraId:4,tocIndex:1},{value:"RGB",paraId:4,tocIndex:1},{value:" color model, each color can be represented by a triplet ",paraId:4,tocIndex:1},{value:"(R, G, B)",paraId:4,tocIndex:1},{value:", where ",paraId:4,tocIndex:1},{value:"R",paraId:4,tocIndex:1},{value:" represents the value of red, ",paraId:4,tocIndex:1},{value:"G",paraId:4,tocIndex:1},{value:" represents the value of green, and ",paraId:4,tocIndex:1},{value:"B",paraId:4,tocIndex:1},{value:" represents the value of blue. For example, red can be represented as ",paraId:4,tocIndex:1},{value:"rgb(255, 0, 0)",paraId:4,tocIndex:1},{value:", green can be represented as ",paraId:4,tocIndex:1},{value:"rgb(0, 255, 0)",paraId:4,tocIndex:1},{value:", and blue can be represented as ",paraId:4,tocIndex:1},{value:"rgb(0, 0, 255)",paraId:4,tocIndex:1},{value:".",paraId:4,tocIndex:1},{value:"The ",paraId:5,tocIndex:2},{value:"HSV",paraId:5,tocIndex:2},{value:" color model represents colors by hue, saturation, and value. The value range of hue is 0-360, and the value range of saturation and value is 0-100. The ",paraId:5,tocIndex:2},{value:"HSV",paraId:5,tocIndex:2},{value:" color model can be represented by a cone, as shown in the following figure: ",paraId:5,tocIndex:2},{value:"In the ",paraId:6,tocIndex:2},{value:"HSV",paraId:6,tocIndex:2},{value:" color model, each color can be represented by a triplet ",paraId:6,tocIndex:2},{value:"(H, S, V)",paraId:6,tocIndex:2},{value:", where ",paraId:6,tocIndex:2},{value:"H",paraId:6,tocIndex:2},{value:" represents the value of hue, ",paraId:6,tocIndex:2},{value:"S",paraId:6,tocIndex:2},{value:" represents the value of saturation, and ",paraId:6,tocIndex:2},{value:"V",paraId:6,tocIndex:2},{value:" represents the value of value. For example, red can be represented as ",paraId:6,tocIndex:2},{value:"hsv(0, 100, 100)",paraId:6,tocIndex:2},{value:", green can be represented as ",paraId:6,tocIndex:2},{value:"hsv(120, 100, 100)",paraId:6,tocIndex:2},{value:", and blue can be represented as ",paraId:6,tocIndex:2},{value:"hsv(240, 100, 100)",paraId:6,tocIndex:2},{value:".",paraId:6,tocIndex:2},{value:"The ",paraId:7,tocIndex:3},{value:"HEX",paraId:7,tocIndex:3},{value:" color model represents colors by hexadecimal numbers. The first two digits represent the value of red, the middle two digits represent the value of green, and the last two digits represent the value of blue. For example, red can be represented as ",paraId:7,tocIndex:3},{value:"#FF0000",paraId:7,tocIndex:3},{value:", green can be represented as ",paraId:7,tocIndex:3},{value:"#00FF00",paraId:7,tocIndex:3},{value:", and blue can be represented as ",paraId:7,tocIndex:3},{value:"#0000FF",paraId:7,tocIndex:3},{value:". As shown in the following figure: ",paraId:7,tocIndex:3},{value:"This is also the most common way of representing colors because it can be used directly in CSS. Moreover, the representation is very simple, just convert the three numbers in the RGB color model to hexadecimal numbers.",paraId:8,tocIndex:3},{value:"Different algorithms are needed for the conversion of color models. There are many mature libraries on the market that can be selected. In the implementation, we chose the library ",paraId:9,tocIndex:4},{value:"tinycolor",paraId:9,tocIndex:4},{value:", which supports the conversion of multiple color models such as ",paraId:9,tocIndex:4},{value:"RGB",paraId:9,tocIndex:4},{value:", ",paraId:9,tocIndex:4},{value:"HSL",paraId:9,tocIndex:4},{value:", ",paraId:9,tocIndex:4},{value:"HSV",paraId:9,tocIndex:4},{value:", ",paraId:9,tocIndex:4},{value:"HEX",paraId:9,tocIndex:4},{value:", etc. Moreover, its size is very small, only about 10KB, which is very suitable for use in browsers.",paraId:9,tocIndex:4},{value:"Since we need to implement a color picker, we need to choose a color model to represent colors. In terms of complexity, the ",paraId:10,tocIndex:5},{value:"RGB",paraId:10,tocIndex:5},{value:" color model is the simplest because it only needs three numbers to represent a color, and its value range is 0-255, which is very easy to understand. However, the disadvantage of the ",paraId:10,tocIndex:5},{value:"RGB",paraId:10,tocIndex:5},{value:" color model is also very obvious. Its color space is a cube, and the color change at the edge of the cube is very obvious. This color space is not suitable for human visual perception.",paraId:10,tocIndex:5},{value:"Therefore, we need to choose a color model that is more suitable for human visual perception. Here we chose the ",paraId:11,tocIndex:5},{value:"HSV",paraId:11,tocIndex:5},{value:" color model, which represents colors through hue, saturation, and value. This color space is more in line with human visual perception, and the color change at the edge of the color space is not too obvious.",paraId:11,tocIndex:5},{value:"The implementation mainly consists of three parts: the color panel, the selection anchor, and sliders.",paraId:12,tocIndex:6},{value:"Since we are using the ",paraId:13,tocIndex:7},{value:"HSV",paraId:13,tocIndex:7},{value:" color model, we need to represent hue, saturation, and value on the panel.",paraId:13,tocIndex:7},{value:"Hue",paraId:14,tocIndex:7},{value:`background-color: rgb(0, 106, 255);
`,paraId:15,tocIndex:7},{value:"This way we get a blue color with both saturation and brightness set to 100% ",paraId:16,tocIndex:7},{value:"Add brightness overlay",paraId:17,tocIndex:7},{value:`background-color: rgb(0, 106, 255);
background-image: linear-gradient(0deg, rgb(0, 0, 0), transparent);
`,paraId:18,tocIndex:7},{value:"After adding the brightness overlay, we get a blue color with brightness variation ",paraId:19,tocIndex:7},{value:"Add saturation overlay",paraId:20,tocIndex:7},{value:`background-color: rgb(0, 106, 255);
background-image: linear-gradient(0deg, rgb(0, 0, 0), transparent), linear-gradient(90deg, rgb(255, 255, 255), rgba(255, 255, 255, 0));
`,paraId:21,tocIndex:7},{value:"After adding the saturation overlay, we get a blue color with brightness variation ",paraId:22,tocIndex:7},{value:"So far, we have obtained a color panel with complete hue, saturation, and brightness.",paraId:23,tocIndex:7},{value:"The implementation of the selection anchor is relatively simple. We only need to correspond the offset position of the anchor to the saturation and brightness of the color panel.",paraId:24,tocIndex:8},{value:`...
const { width, height } = containerRef.current.getBoundingClientRect();
const { width: targetWidth, height: targetHeight } = targetRef.current.getBoundingClientRect();
const centerOffsetX = targetWidth / 2;
const centerOffsetY = targetHeight / 2;
// Saturation
const saturation = (offset.x + centerOffsetX) / width;
// Brightness
const bright = 1 - (offset.y + centerOffsetY) / height;
`,paraId:25,tocIndex:8},{value:"The logic is the same as above, we just need to correspond the offset position of the sliders to the hue or alpha of the color.",paraId:26,tocIndex:9},{value:`...
const { width, height } = containerRef.current.getBoundingClientRect();
const { width: targetWidth, height: targetHeight } = targetRef.current.getBoundingClientRect();
const centerOffsetX = targetWidth / 2;
const centerOffsetY = targetHeight / 2;
// Hue
const hue = ((offset.x + centerOffsetX) / width) * 360;
// Opacity
const alpha = (offset.x + centerOffsetX) / width;
`,paraId:27,tocIndex:9},{value:"So far, we have obtained a color picker with complete hue, saturation, and brightness, as shown in the following figure: ",paraId:28,tocIndex:9},{value:"Through this development journey, I have gained a deeper understanding of color models and the development process of Ant Design. Thanks to the Ant Design team for giving me this opportunity, and thank you all for reading. If you are interested in the implementation details, you can check out the source code implementation at ",paraId:29,tocIndex:10},{value:"@rc-component/color-picker",paraId:29,tocIndex:10},{value:".",paraId:29,tocIndex:10},{value:"https://zh.wikipedia.org/wiki/%E4%B8%89%E5%8E%9F%E8%89%B2%E5%85%89%E6%A8%A1%E5%BC%8F#/media/File:RGB_color_solid_cube.png",paraId:30,tocIndex:11},{value:"https://zh.wikipedia.org/wiki/HSL%E5%92%8CHSV%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4#/media/File:HSV_cone.png",paraId:30,tocIndex:11},{value:"https://zh.wikipedia.org/wiki/%E7%BD%91%E9%A1%B5%E9%A2%9C%E8%89%B2#/media/File:Web_Color_Charts.svg",paraId:30,tocIndex:11}]},292692:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Ant Design v5 provides the Design Token model, which supports custom algorithm to implement theme extension capabilities. For example, the compact theme itself does not carry color style algorithms, so it can be implemented by passing in multiple algorithms to achieve the compact theme under the light theme and the compact theme under the dark theme.",paraId:0},{value:"Today, we now put down the algorithm part. Talk about how to extend the theme through ConfigProvider.",paraId:1},{value:"This is an example of using ConfigProvider to extend the theme. You can view the complete code directly ",paraId:2,tocIndex:0},{value:"here",paraId:2,tocIndex:0},{value:" (",paraId:2,tocIndex:0},{value:"online demo",paraId:2,tocIndex:0},{value:"):",paraId:2,tocIndex:0},{value:"We will talk about how to use ConfigProvider to extend the theme in Ant Design. Of course, this article is not a CSS tutorial, so we will not introduce the style implementation above. If you are interested, you can directly look at the code instead.",paraId:3,tocIndex:0},{value:"Design Token has powerful extension capabilities, but it also has limitations. For example, when Token does not support some configurations, developers become powerless. Even worse, some theme implementations cannot rely solely on a certain Token, which will become very difficult. For example, the gradient border colors in the above example cannot be implemented simply by ",paraId:4,tocIndex:1},{value:"border-color",paraId:4,tocIndex:1},{value:", it requires some CSS tricks. As mentioned in ",paraId:4,tocIndex:1},{value:'"Happy Work Theme"',paraId:5,tocIndex:1},{value:", landing some specific implementations to Design Token will cause the code quality to deteriorate rapidly. Therefore, we need some other ways to extend the theme, which can uniformly modify the style of a component. And ConfigProvider is such an entry.",paraId:4,tocIndex:1},{value:"In ",paraId:6,tocIndex:2},{value:"5.7.0",paraId:6,tocIndex:2},{value:", ConfigProvider supports the ",paraId:6,tocIndex:2},{value:"className",paraId:6,tocIndex:2},{value:" and ",paraId:6,tocIndex:2},{value:"style",paraId:6,tocIndex:2},{value:" configurations of all components. So we can easily extend beyond Token:",paraId:6,tocIndex:2},{value:`<ConfigProvider
  button={{ className: 'my-button' }}
  checkbox={{ className: 'my-checkbox' }}
  divider={{ className: 'my-divider' }}
/>
`,paraId:7,tocIndex:2},{value:"And then we can go to add our style:",paraId:8,tocIndex:2},{value:`.my-button {
  background: red;
}
`,paraId:9,tocIndex:2},{value:"This is actually strange. Since we can modify the style through ",paraId:10,tocIndex:2},{value:"className",paraId:10,tocIndex:2},{value:", why do we need ConfigProvider? We can just override the ",paraId:10,tocIndex:2},{value:".ant-btn",paraId:10,tocIndex:2},{value:" style.",paraId:10,tocIndex:2},{value:"If your project is maintained by only one person, this is a good idea. But if your project is a large project, then you will find that this approach will cause style conflicts. Especially in the case of multi-person collaboration, modifying styles at will will result in unexpected results, and other people have to use more complex selectors to override your styles. ConfigProvider can solve this problem well. It can isolate styles inside ConfigProvider and will not affect other components.",paraId:11,tocIndex:2},{value:"Above example looks easy to implement, but in real scenarios you will find that there are some shortcomings for hierarchical structures. For example, the ",paraId:12,tocIndex:3},{value:"ant-",paraId:12,tocIndex:3},{value:" prefix can be modified by ConfigProvider's ",paraId:12,tocIndex:3},{value:"prefixCls",paraId:12,tocIndex:3},{value:", so the prefix of the semantic structure may change from ",paraId:12,tocIndex:3},{value:"ant-btn-icon",paraId:12,tocIndex:3},{value:" to ",paraId:12,tocIndex:3},{value:"abc-btn-icon",paraId:12,tocIndex:3},{value:". So it is not enough to override only by ",paraId:12,tocIndex:3},{value:"my-button",paraId:12,tocIndex:3},{value:":",paraId:12,tocIndex:3},{value:`.my-button {
  // OPS. It's \`abc-btn-icon\` now.
  .ant-btn-icon {
    background: red;
  }
}
`,paraId:13,tocIndex:3},{value:"So our extended theme also needs the ability to consume ",paraId:14,tocIndex:3},{value:"prefixCls",paraId:14,tocIndex:3},{value:". In CSS-in-JS, mixing ",paraId:14,tocIndex:3},{value:"prefixCls",paraId:14,tocIndex:3},{value:" is easy. We can get ",paraId:14,tocIndex:3},{value:"prefixCls",paraId:14,tocIndex:3},{value:" through the ",paraId:14,tocIndex:3},{value:"getPrefixCls",paraId:14,tocIndex:3},{value:" method of ConfigProvider, and then mix it:",paraId:14,tocIndex:3},{value:`// This is an example of using \`antd-style\`, you can use any CSS-in-JS library.
import React from 'react';
import { ConfigProvider } from 'antd';
import { createStyles } from 'antd-style';

const useButtonStyle = () => {
  const { getPrefixCls } = React.useContext(ConfigProvider.ConfigContext);
  const btnPrefixCls = getPrefixCls('btn');

  // Customize styles
  return createStyles(({ css }) => ({
    btn: css\`
      background: red;
      .\${btnPrefixCls}-icon {
        color: green;
      }
    \`,
  }))();
};

function GeekProvider(props: { children?: React.ReactNode }) {
  const { styles } = useButtonStyle();

  return <ConfigProvider button={{ className: styles.btn }}>{props.children}</ConfigProvider>;
}
`,paraId:15,tocIndex:3},{value:"It's also easy to extend for scenarios that need to inherit ",paraId:16,tocIndex:3},{value:"className",paraId:16,tocIndex:3},{value:":",paraId:16,tocIndex:3},{value:`function GeekProvider(props: { children?: React.ReactNode }) {
  const { button } = React.useContext(ConfigProvider.ConfigContext);
  const { styles } = useButtonStyle();

  return (
    <ConfigProvider button={{ className: classNames(button?.className, styles.btn) }}>
      {props.children}
    </ConfigProvider>
  );
}
`,paraId:17,tocIndex:3},{value:"Through ConfigProvider, we can further extend the theme. It can isolate styles well and avoid style conflicts. Let's try it out!",paraId:18,tocIndex:4}]},710720:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Hi, I'm ",paraId:0},{value:"kiner-tang",paraId:0},{value:" who is a heavy user of Ant Design. As the same reason, I come up to be a contributor for fixing bug and some features. Finally, it's my honer to become a member of Ant Design Collaborator.",paraId:0},{value:"During the journey from user to contributor, and then from contributor to collaborator, I also encountered many problems. I would like to share my experience with the problem I meet. Hope it can help you to join the Ant Design community.",paraId:1},{value:"There are various of package managers, such as npm, yarn, or pnpm, providing version-locking solutions to avoid version-inconsistencies issue. However, in Ant Design projects, many functions depend on the original components in the ",paraId:2,tocIndex:1},{value:"react-component",paraId:2,tocIndex:1},{value:" repository. We expect that when we encounter some bugs, after the ",paraId:2,tocIndex:1},{value:"react-component",paraId:2,tocIndex:1},{value:" fixes and releases the patch version, Instead of manually upgrading the version in the Ant Design project, we can install the latest patch installation package only by reinstalling the dependencies. At this point, the version-lock file provided by the package manager is the main obstacle to automatic updates, because once the version-lock file is available, reinstalling the dependency will also install the version specified by the lock file and cannot be upgraded to the patch version.",paraId:2,tocIndex:1},{value:"Based on the above reasons, we adopt the following methods:",paraId:3,tocIndex:1},{value:"Add ",paraId:4,tocIndex:1},{value:"package-lock.json",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"yarn.lock",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"pnpm-lock.yaml",paraId:4,tocIndex:1},{value:" and other version lock files to ",paraId:4,tocIndex:1},{value:".gitignore",paraId:4,tocIndex:1},{value:" without version tracking.",paraId:4,tocIndex:1},{value:"In ",paraId:5,tocIndex:1},{value:"package.json",paraId:5,tocIndex:1},{value:", for the dependencies that we want to update when there is a new patch version, we use ",paraId:5,tocIndex:1},{value:"~",paraId:5,tocIndex:1},{value:" description version number to allow patch version update.",paraId:5,tocIndex:1},{value:`{
  "dependencies": {
    "rc-cascader": "~3.9.0"
  }
}
`,paraId:6,tocIndex:1},{value:"For the difference between ",paraId:7,tocIndex:1},{value:"^",paraId:7,tocIndex:1},{value:" and ",paraId:7,tocIndex:1},{value:"~",paraId:7,tocIndex:1},{value:" in the version description of package.json, see ",paraId:7,tocIndex:1},{value:"What's the difference between tilde(~) and caret(^) in package.json",paraId:7,tocIndex:1},{value:".",paraId:7,tocIndex:1},{value:"Thus, when our dependency such as rc-cascader fixes a bug and releases a patch version such as: ",paraId:8,tocIndex:1},{value:"3.9.1",paraId:8,tocIndex:1},{value:", then the user's latest installed version is ",paraId:8,tocIndex:1},{value:"3.9.1",paraId:8,tocIndex:1},{value:". For the maintainer of Ant Design, we only need to execute the following command:",paraId:8,tocIndex:1},{value:`git clean -fdx
npm i
`,paraId:9,tocIndex:1},{value:"In Ant Design, we use Jest for unit test. Many first-time contributors of Ant Design may be confused that CI failed after opening a pull request in which they just modify the text in a demo. This is caused by the snapshot diff test.",paraId:10,tocIndex:2},{value:"In most libraries, idempotence is emphasized. With one method and same parameters, the result should be the same no matter how many times it is executed. In Ant Design, the main use of snapshot test is to verify the idempotence of demos, in order to ensure the stability and certainty of components. Actually, snapshot test is simple. By comparing HTML string generated by each demo in different runnings, we could get which one is broken in PR.",paraId:11,tocIndex:2},{value:"Back to the topic, what should we do if we find snapshot test failed after changing a demo?",paraId:12,tocIndex:2},{value:"First, we need to check the snapshot diff to see whether it is the expected change. If there is only the text you modified in demo differs from the origin one, we just need to run the following command to update the snapshot:",paraId:13,tocIndex:2},{value:`# Run the test command to update snapshot
npm run test -u
`,paraId:14,tocIndex:2},{value:"However, we should find what's going wrong if the diff of snapshot is not only caused by your modification this time. For example, you only modified the text, but found that classnames in snapshots have changed, which obviously does not meet expectations.",paraId:15,tocIndex:2},{value:"The common causes are as follows:",paraId:16,tocIndex:2},{value:"Local dependency is out of date. This may happen when you pull the latest code, but did not update the local dependency. Deleting ",paraId:17,tocIndex:2},{value:"lock",paraId:17,tocIndex:2},{value:" file, ",paraId:17,tocIndex:2},{value:"node_modules",paraId:17,tocIndex:2},{value:", and then reinstalling dependencies could solve this problem.",paraId:17,tocIndex:2},{value:"solution is as simple as deleting the lock file\u3001node_modules and reinstall dependencies.",paraId:18,tocIndex:2},{value:"Your code not synchronizing baseline code can also result in inconsistent snapshot comparisons. The solution is as simple as pulling the baseline code locally and then rebase your code to the baseline code.",paraId:19,tocIndex:2},{value:"You may have locally changed the source code not only in demos, which would cause unexpected change. You need to go through your change carefully.",paraId:20,tocIndex:2},{value:"In Ant Design, most components are an upper encapsulation of a component based on ",paraId:21,tocIndex:3},{value:"react-component",paraId:21,tocIndex:3},{value:". Therefore, if we find a problem of ",paraId:21,tocIndex:3},{value:"@rc-component/xxx",paraId:21,tocIndex:3},{value:" or ",paraId:21,tocIndex:3},{value:"rc-xxx",paraId:21,tocIndex:3},{value:" component when troubleshooting, we need to open PR on those repositories to fix it. After coding, we need to verify that the problem in Ant Design is resolved, in which case we can link the project to Ant Design for verification. For example:",paraId:21,tocIndex:3},{value:"Run ",paraId:22,tocIndex:3},{value:"npm link",paraId:22,tocIndex:3},{value:" in the repo you are working on. ",paraId:22,tocIndex:3},{value:"Run ",paraId:23,tocIndex:3},{value:'npm link "Project name"',paraId:23,tocIndex:3},{value:" in Ant Design",paraId:23,tocIndex:3},{value:"Once we have verified, we can open PR to the repo. Noted that link may cause exceptions when running the test command. Therefore, we need to run the following commands locally to delete the package from link.",paraId:24,tocIndex:3},{value:`npm unlink "rc-field-form" --no-save
npm i
`,paraId:25,tocIndex:3},{value:"When the PR is finally merged, usually the maintainers will release a version. If the patch version is released, you only need to install and verify it in Ant Design. But if the minor version is released, you need to upgrade it in Ant Design. After local verification, a separate PR to Ant Design could be opened for bugfix.",paraId:26,tocIndex:3},{value:"In a large project, if you want to remove a property or a method, it is actually very troublesome. Since your project may already have a lot of items in use, other projects depending on it may get broken. But as the project iterated, we will encounter more and more problems which solutions long time ago may no longer fit. Then, we need to adopt a soft, less radical way to remove it, leaving enough time for users to modify.",paraId:27,tocIndex:4},{value:"In Ant Design, we adopt a ",paraId:28,tocIndex:4},{value:"five-step strategic",paraId:28,tocIndex:4},{value:" to deprecate property or method:",paraId:28,tocIndex:4},{value:"Add deprecated tag to the property",paraId:29,tocIndex:4},{value:"After adding the above deprecated tag, we can see warning when using this property:",paraId:30,tocIndex:4},{value:"Add console warnings",paraId:31,tocIndex:4},{value:"It is important that after adding console warnings, we need to add a test case to test whether the warnings will be displayed when the deprecated properties are used.",paraId:32,tocIndex:4},{value:"Update document",paraId:33,tocIndex:4},{value:": The above two steps are mainly to warn developers in the editor and browser. Next, we need to update the related document. Generally speaking, if we have a property deprecated, it means that it is not recommended for users to use. So we need to remove the related document and add the description of the new property in the meantime. If it cannot be deleted due to special circumstances, please specify the version this property is supported and the alternative scheme in the remarks column.",paraId:33,tocIndex:4},{value:"Compatibility between old and new",paraId:34,tocIndex:4},{value:": Now that we're done with the above tips, it's important to make sure that the new property and the deprecated one both works until the deprecated one is removed. That is to say, we must have the deprecated property work normally. We should not apply any changes in addition to the warning.",paraId:34,tocIndex:4},{value:"We can do something like this to make sure that the new property takes precedence over the old one. At this point, our property deprecation work is done.",paraId:35,tocIndex:4},{value:"Remove",paraId:36,tocIndex:4},{value:": After our properties have been deprecated for a certain period of time, usually when the major version is released, we can remove them. We also need to delete comments, warnings, test cases, and documents that were related to the property. At this point our property removal work is done.",paraId:36,tocIndex:4},{value:"After contributing for some time, we believe you have gained a deeper understanding of Ant Design's overall development process and project architecture. At this point, you may want to take on more tasks and contribute more to the open source community. Then, you can apply to be a Collaborator at Ant Design by commenting on the link below for more active contributors. ",paraId:37,tocIndex:5},{value:"Add Collaborator permission for some active contributors",paraId:37,tocIndex:5},{value:", The Collaborators will then start the voting process, and after passing the voting, they will invite you to officially become a Collaborator at Ant Design.",paraId:37,tocIndex:5},{value:"After you become a newly appointed Ant Design collaborator, you will be assigned some additional rights, such as:",paraId:38,tocIndex:5},{value:"Tag the issue",paraId:39,tocIndex:5},{value:"Close the issue",paraId:40,tocIndex:5},{value:"Free to create branches under the Ant Design project",paraId:41,tocIndex:5},{value:"Free to merge approved PR",paraId:42,tocIndex:5},{value:"...",paraId:43,tocIndex:5},{value:"There are some caveats to this.",paraId:44,tocIndex:5},{value:"It's time to merge PR! Ant Design uses both squash merge and commit merge in different case which requires attention. Following is some introduction about the difference:",paraId:45,tocIndex:6},{value:"Merge pull request",paraId:46,tocIndex:6},{value:": Merge the current PR into the target branch normally (usually used when branches merge with each other, and commit records will not be merged. Do not use this when merging PRs, otherwise too many redundant commit records will be added to the target branch).",paraId:46,tocIndex:6},{value:"Squash and merge",paraId:46,tocIndex:6},{value:": Merge the commit record into one and merge it into the target branch (this is usually used for merging PRs).",paraId:46,tocIndex:6},{value:"Rebase and merge",paraId:46,tocIndex:6},{value:"\uFF1AWhen you want to adjust the baseline",paraId:46,tocIndex:6},{value:"Merge in Ant Design requires at least one collaborator's approve. Collaborator who approved should ensure PR are fully reviewed and confirm.",paraId:47,tocIndex:6},{value:"During routine maintenance, some issues can easily reproduce but some others are not. Report sometimes get stuck in XY problem which makes requirement or bug question strange to understand. Thus, before resolving the superficial problems, we should dig into the real question.",paraId:48,tocIndex:7},{value:"X-Y PROBLEM",paraId:49,tocIndex:7},{value:"Hoping that more and more contributors and collaborators will join us to build a more efficient and elegant Ant Design.",paraId:50,tocIndex:8}]},975752:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:`On November 18, 2022, we released Ant Design 5.0. At the same time, Ant Design's unique CSS-in-JS solution was brought into everyone's view. Through this solution, Ant Design achieves higher performance than other CSS-in-JS libraries, but at the cost of sacrificing its flexibility for free use in applications. So we call it a "component-level" CSS-in-JS solution. `,paraId:0},{value:"In CSS-in-JS, hash is used to confirm whether a style has been inserted. The way to calculate the hash is usually to convert a complete css into a hash value. For example, in emotion, we can see such a style tag by checking the elements on the page. The hash value corresponding to such a style tag is unique:",paraId:1,tocIndex:0},{value:"In this way, you can find a problem that CSS-in-JS has been criticized for a long time. What we write when coding is not the final css. So every time we need to serialize to get the css and calculate the hash again. If your page or component has a very complex or a large amount of CSS-in-JS code, and even the style will follow the component's props change, then this performance issue becomes non-negligible.",paraId:1,tocIndex:0},{value:"To solve this problem, each CSS-in-JS library will have its own way to deal with it. Let\u2019s take a look at Ant Design\u2019s solution. ",paraId:1,tocIndex:0},{value:"In fact, it is not difficult for us to find that the problem lies in the process of serializing css. How about reducing the times of serializing css by caching? For application-level CSS-in-JS, it is difficult for us to find a suitable key for cache. But if it is a component library, the final style is relatively stable. ",paraId:2,tocIndex:1},{value:"According to the style structure we determined from v4 and previous versions, the style of each component will not change under the same theme variable and the same version. Conversely, the style may change only if the theme variable is modified, or the version of antd is changed. ",paraId:2,tocIndex:1},{value:"From this we get a very simple way to calculate the hash:",paraId:2,tocIndex:1},{value:"We will apply the ",paraId:2,tocIndex:1},{value:"same",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"hash",paraId:2,tocIndex:1},{value:" to all antd components. In this way, when using the antd component, we only perform hash calculations on the current version and theme variables. Version can be obtained directly from ",paraId:2,tocIndex:1},{value:"package.json",paraId:2,tocIndex:1},{value:", and theme variables can be obtained directly from context. So we don't need to serialize css again and again to get a stable hash, and the performance is improved finally. ",paraId:2,tocIndex:1},{value:'In the above way, we have taken the first step of "component level" CSS-in-JS, but this is not enough. Since it is "component level", we can also optimize it again with components.',paraId:3,tocIndex:2},{value:"In Ant Design, the style of a component is usually complete. That is to say, no matter what variant the component has, its style exist in the whole component style. In this way, we can draw a conclusion again: the props of antd components will not affect the component style. ",paraId:3,tocIndex:2},{value:'This is very important. In the application-level CSS-in-JS solution, since props may affect the component style, it is inevitable that the component style will be regenerated during the rendering phase. No matter how to optimize this point, it cannot be ignored. Now that we have adopted a "component-level" solution, this problem can be easily solved: do style caching for components.',paraId:3,tocIndex:2},{value:'In the case of the same hash, no matter how many times the same component is used and rendered, the style will only be generated once at the first mount, and will hit the cache for the rest of the time. This is the second insurance for "component level" CSS-in-JS solutions. ',paraId:3,tocIndex:2},{value:"At the release of Ant Design 5.0, we simply made a benchmark, and here are some supplementary instructions:",paraId:4,tocIndex:3},{value:'The benchmark is based on generating a very long unchanging style to test the performance of basic usage of the three libraries. It can be seen that under the "component level" usage scenario of Ant Design, @ant-design/cssinjs has a performance advantage whether it is the first rendering or the second rendering. Since styled has certain optimizations when dealing with stable styles, the performance of secondary rendering in this benchmark is better, but it will still be affected by recalculation like emotion when props participate in style calculation. ',paraId:4,tocIndex:3},{value:`In the above comparison, it cannot be said that antd is definitely better than styled and emotion, but in the component-level usage scenarios, we have made corresponding optimizations to obtain performance advantages. Conversely, due to the limitation of "component level", antd's CSS-in-JS solution is not suitable for construction applications.`,paraId:5,tocIndex:4},{value:`Due to the special hash calculation method and component cache, when applying antd's CSS-in-JS solution, developers must provide stable hash and unique component names by themselves. For applications, automatic hash capabilities such as css modules are more needed. At the same time, caching a large number of components in the application also requires additional management costs. Once an error occurs, it is difficult to troubleshoot. Therefore, we recommend using the "component-level" CSS-in-JS solution in component libraries.`,paraId:5,tocIndex:4}]},426772:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Ant Design allows customization of theme tokens through ConfigProvider, supporting nested themes. Nested theme tokens inherit modifications made in the parent theme. From this perspective, antd's theme capabilities have reached their peak in the 5.0 version.",paraId:0,tocIndex:0},{value:"However, the purpose of this article is not to praise antd 5.0 again; that has already been done when it was released. Since the release of version 5.0, almost a year has passed, during which the community has raised various questions and demands. These issues and directions for improvement are the pain points faced by antd.",paraId:1,tocIndex:0},{value:"One significant impact is on users in SSR (Server-Side Rendering) scenarios.",paraId:2,tocIndex:1},{value:"While antd switched to cssinjs, it implemented the ability to selectively import CSS without relying on babel-plugin-import for automatic tree-shaking. However, compared to component libraries like MUI or Mantine, which started using cssinjs from the beginning, antd's adoption of cssinjs can be considered a partial departure. One key difference is that ",paraId:3,tocIndex:1},{value:"antd's cssinjs does not follow changes in component props",paraId:3,tocIndex:1},{value:".",paraId:3,tocIndex:1},{value:"In libraries like MUI or Mantine 6.x, the generated CSS for components with different props configurations is actually different. These styles are placed within a hash class. For example, named classNames in MUI, such as ",paraId:4,tocIndex:1},{value:"xxx-focused",paraId:4,tocIndex:1},{value:", are essentially empty shells, allowing users to customize them easily. The benefit is a significant reduction in the size of the style file. If a page only uses the outlined variant of a Button, there won't be any styles for the filled variant in the final output.",paraId:4,tocIndex:1},{value:"In antd 5.0, whenever a component is used, antd automatically includes all styles related to that component\u2014whether they are used or not. This approach has two reasons:",paraId:5,tocIndex:1},{value:"Antd did not change the organization of styles from version 4.x to 5.x; it still combines classes to achieve different style effects.",paraId:6,tocIndex:1},{value:"To reduce the frequency of dynamically generating styles, antd has implemented a caching strategy at the component level. The same component will only insert styles once, reducing the performance cost of cssinjs during CSS serialization.",paraId:6,tocIndex:1},{value:"It is evident that the advantages of traditional cssinjs and antd are also each other's disadvantages. Antd's css output size becomes significantly large, which is particularly noticeable in SSR scenarios where inline style tags are required.",paraId:7,tocIndex:1},{value:"When switching between light and dark themes in cssinjs component libraries, two common issues arise:",paraId:8,tocIndex:2},{value:"There is a delay when switching themes.",paraId:9,tocIndex:2},{value:"When a static site is switched to a dark theme and then refreshed, it always reverts from the light theme to the dark theme.",paraId:9,tocIndex:2},{value:"Antd has encountered these two issues, and they stem from the nature of runtime-generated styles using cssinjs. The delay is due to the need for a new round of CSS serialization when switching themes. The inability to seamlessly refresh from a static site to a dark theme is because static sites cannot retain the styles of the switched theme.",paraId:10,tocIndex:2},{value:"These issues are non-existent in theme systems based on CSS variables. Examples of such pages include ",paraId:11,tocIndex:2},{value:"react.dev",paraId:11,tocIndex:2},{value:". The principle is simple:",paraId:11,tocIndex:2},{value:"Modifying CSS variables does not require re-serialization of CSS, eliminating this performance cost.",paraId:12,tocIndex:2},{value:"CSS variables can be injected before page rendering using a script under the body, blocking rendering and avoiding unnecessary style rendering.",paraId:12,tocIndex:2},{value:"Looking at the case of Mantine 7.0, it seems that a theme system/style engine based on CSS variables has a better user experience. However, for cssinjs, there are reasons not to abandon its flexible theme capabilities. In other words, there is a desire to have both the small size and fast switching features of CSS variables, while retaining cssinjs's theme nesting and ability to have multiple themes coexist.",paraId:13,tocIndex:3},{value:"Naturally, the question arises: can we combine cssinjs with CSS variables? After all, they don't seem to be completely mutually exclusive.",paraId:14,tocIndex:3},{value:"Antd has collaborated with CSS variables before, as seen in the 4.x era, where there was a set of CSS files based on CSS variables. In version 4.x, antd's theme was mainly implemented using less variables, assigning less variables as CSS variable names, and then assigning values to these CSS variables elsewhere. This was the capability of antd's 4.x CSS variable theme.",paraId:15,tocIndex:4},{value:"The theme capability of antd 5.0 is actually an evolution from 4.x, still using a set of theme tokens for customization. The current theme system's processing flow involves calculating a unique hash variable based on the values of theme tokens to ensure isolation between themes:",paraId:16,tocIndex:4},{value:"The :where selector does not increase the overall specificity, making it suitable for theme isolation.",paraId:17,tocIndex:4},{value:"Naturally, we thought of mapping all tokens to CSS variables. In this ",paraId:18,tocIndex:5},{value:"RFC",paraId:18,tocIndex:5},{value:", all tokens are mapped to CSS variables, and CSS variables are used to fill the values of the tokens with. As a result, the hash calculation for theme isolation becomes fixed because the values of each token, now represented as CSS variables, will not change. Now, we have a stable HTML, and switching themes only requires replacing the corresponding CSS variables without going through the lengthy cssinjs serialization process.",paraId:18,tocIndex:5},{value:"In this approach, the insertion of CSS variables is excluded from the lifecycle of the entire theme. Antd only cares about the replacement between tokens and CSS variables. As long as antd applies CSS variables to various parts of component styles, we can build themes based on CSS variables on top of this.",paraId:19,tocIndex:5},{value:"As shown in the figure, the control of CSS variables for the entire theme is placed under the ",paraId:20,tocIndex:5},{value:":root",paraId:20,tocIndex:5},{value:" selector. This implies that we can modify these CSS variables at any time, either at compile time or in the browser environment. However, placing CSS variables under :root also means that this will be a theme affecting the entire document, and we cannot make adjustments to a specific part of the theme.",paraId:20,tocIndex:5},{value:"Now the question becomes: Can we make CSS variables work locally?",paraId:21,tocIndex:5},{value:"The answer is yes. Recall the hash introduced in 5.0. It plays a crucial role in solving this problem.",paraId:22,tocIndex:6},{value:"By constraining CSS variables within a hash class selector, we can make these CSS variables only effective for components under that theme. At the same time, we can use the provided theme context to dynamically generate CSS variables based on the current theme. We directly convert the values of current theme tokens into CSS variables, combining them with the current hash value to obtain a complete set of styles.",paraId:23,tocIndex:6},{value:"It appears perfect, utilizing the existing theme features to achieve the isolation of CSS variables between themes. However, up to this point, there is a significant flaw in this approach, as mentioned earlier: to ensure the stability of HTML, when calculating the hash, we actually use the mapped token values to CSS variables, similar to var(--color-primary); and these values do not change because we do not intentionally modify the mapping between CSS variables and tokens. This results in a ",paraId:24,tocIndex:6},{value:"fixed hash value",paraId:24,tocIndex:6},{value:".",paraId:24,tocIndex:6},{value:"Consider the scenario of nesting:",paraId:25,tocIndex:6},{value:`<ConfigProvider theme={{ token: { colorPrimary: 'blue' } }}>
  <Button>Button 1</Button>
  <ConfigProvider theme={{ token: { colorPrimary: 'green' } }}>
    <Button>Button 2</Button>
  </ConfigProvider>
</ConfigProvider>
`,paraId:26,tocIndex:6},{value:"In the current theme system of Ant Design 5.0, the hash values corresponding to these two buttons are different. As a result, their styles do not affect each other, illustrating the role of hash in theme isolation.",paraId:27,tocIndex:6},{value:"However, in the CSS variable solution, the modification of these two tokens does not actually affect the calculation of the hash. Consequently, theme isolation breaks down, and both ",paraId:28,tocIndex:6},{value:"colorPrimary",paraId:28,tocIndex:6},{value:" values end up under the same hash, leading to mutual overlap. To maintain theme isolation, we require different hash values for Button 1 and Button 2, creating a clear contradiction and a new issue.",paraId:28,tocIndex:6},{value:"Let's reconsider the original intention of adopting CSS variables: to achieve faster theme switching and reduce the performance overhead of theme changes. It can be observed that the emphasis is on ",paraId:29,tocIndex:6},{value:"switching",paraId:29,tocIndex:6},{value:".",paraId:29,tocIndex:6},{value:'For nested or parallel themes, their focus is not on "switching" but on "isolation." Therefore, they require distinct and stable hash values, and in most scenarios, their HTML remains stable.',paraId:30,tocIndex:6},{value:'For theme switching, the emphasis is on "switching". What we expect is to achieve fast and high-performance theme switching using CSS variables under a fixed hash (i.e., stable HTML). This does not conflict with theme isolation. Therefore, we still need different hashes to achieve CSS variable isolation. On top of this, different themes corresponding to various hash values can be generated based on user preferences for CSS variable styles.',paraId:31,tocIndex:6},{value:"It might sound a bit abstract, so let's use code to explain the desired outcome. Taking the example of nested themes mentioned earlier, here's what we want the generated CSS file to include:",paraId:32,tocIndex:6},{value:`:where(.css-hash1).ant-btn {
  background-color: var(--color-primary);
}

:where(.css-hash2).ant-btn {
  background-color: var(--color-primary);
}

.css-hash1 {
  --color-primary: blue;
}

.css-hash2 {
  --color-primary: green;
}
`,paraId:33,tocIndex:6},{value:"The result is as expected, combining CSS variables with hashes. But in fact, we should adjust our thinking slightly and return the hash calculation to the original value of the token, or directly use CSS variables to calculate the hash:",paraId:34,tocIndex:6},{value:"So far, we have integrated theme isolation with CSS variables using hash, meeting our ambitious goals. However, there is still an issue with hash. It is dynamically calculated, and users cannot know the hash value in advance, making it impossible to directly manipulate CSS variables using JavaScript.",paraId:35,tocIndex:7},{value:"But there is always a solution. Besides directly using JavaScript to modify CSS variables, we can also utilize CSS selectors to switch CSS variables in different scenarios. This requires us to generate CSS variables for different themes in advance:",paraId:36,tocIndex:7},{value:`/* Using custom classes as selectors */
.light .css-hash {
  --color-text: rgba(0, 0, 0, 0.85);
}

.dark .css-hash {
  --color-text: rgba(255, 255, 255, 0.88);
}
`,paraId:37,tocIndex:7},{value:"At this point, we only need to switch the class on the outermost DOM element wrapping the component to easily achieve theme switching. This outer DOM element can be ",paraId:38,tocIndex:7},{value:"html",paraId:38,tocIndex:7},{value:", ",paraId:38,tocIndex:7},{value:"body",paraId:38,tocIndex:7},{value:", or a specific element in the application. It depends on users.",paraId:38,tocIndex:7},{value:"The problems always seem to be interconnected. We mentioned that the hash is normally calculated based on tokens, but when it comes to dynamic switching, we want the hash to remain constant. So, for the two sets of themes mentioned earlier, their hashes should be consistent, even though their corresponding CSS variables are different. Therefore, we need to make some adjustments to the hash calculation method.",paraId:39,tocIndex:7},{value:"In fact, it can be observed that after applying CSS variables, what we have been doing is turning the 'dynamic' into 'static', making every effort to avoid dynamically modifying tokens using JavaScript. This is crucial as it would trigger JavaScript computation, thereby slowing down webpage performance. Conversely, we leverage the static compilation capability of CSS variables to gradually narrow down the scope of things that would change at runtime. Ultimately, it becomes a matter of efficiently switching themes by modifying only a class name or a DOM attribute.",paraId:40,tocIndex:7},{value:"Finally, don't forget that tokens can be passed through the context. In the case of nested themes, the current tokens inherit values from the context to override them. As described earlier, we need to provide multiple tokens in the theme, each with a different theme name. If multiple themes are used in nested themes at different levels, the computational complexity is actually multiplied. For example:",paraId:41,tocIndex:7},{value:"This can become a potential burden.",paraId:42,tocIndex:7},{value:"Consider the following scenario: users can freely modify the theme color and text font size on the webpage to suit their preferences. This scenario does not align with the research discussed earlier because our previous study was based on a complete set of known themes (such as a dark theme). When users can freely modify the value of a variable, we cannot pre-build the theme; instead, we must rely on runtime capabilities for modifications. This situation can be referred to as a true 'dynamic theme'.",paraId:43,tocIndex:8},{value:"As mentioned earlier, there are two obstacles to implementing dynamic themes based on CSS variables:",paraId:44,tocIndex:8},{value:"Changes in hash values will cause components and the DOM to re-render.",paraId:45,tocIndex:8},{value:"Users cannot know the hash value in advance.",paraId:45,tocIndex:8},{value:"There are two solutions for these two points, respectively.",paraId:46,tocIndex:8},{value:"For the first issue, the apparent problem to solve is the dynamic hash value caused by token changes. The existence of hash values serves two purposes: style isolation and caching. In the context of dynamic CSS themes, we can discard the caching feature since we have replaced all tokens with CSS variables. The styles themselves do not change; each token change only affects the inserted CSS variables. At this point, the performance impact of serializing CSS has been significantly reduced. Therefore, we can use random hashes to ensure style isolation.",paraId:47,tocIndex:9},{value:"At this point, we can see that users can simply modify tokens in the ConfigProvider, just like before, to use dynamic themes without any noticeable changes in usage. An additional point is that we eliminate the performance cost of calculating hashes here. However, as a trade-off, we might generate two sets of CSS variables that are identical, yet their hashes are different. The impact of this depends on the user's specific usage patterns.",paraId:48,tocIndex:9},{value:"The above solution can actually address most of the issues in various scenarios. However, let's revisit a problem mentioned from the beginning: the FOUC issue. In a statically compiled web page, all theme changes implemented through React lifecycle methods cannot be reflected in the user's browser immediately. We must provide users with the ability to modify the theme before the browser renders the page.",paraId:49,tocIndex:10},{value:"The implementation of this capability essentially involves allowing users to replace CSS variables in scripts. As mentioned earlier, one method is to directly replace the class or attribute on the HTML in the script to apply statically compiled CSS variables, which is not suitable for dynamic themes. Therefore, users need to directly modify the values of CSS variables in the script, introducing the problem of 'needing to know the hash value in advance.' If the hash value is completely random or calculated based on tokens, users cannot use this hash value outside the React lifecycle, or it is challenging to save this hash value for use in scripts outside the React lifecycle.",paraId:50,tocIndex:10},{value:"In other words, as long as the user knows the hash value, is that sufficient? Therefore, we allow users to customize the hash value, and users do not need to worry about the loss of style isolation due to custom reasons\u2014because we can easily detect if users are using the same hash value in the application. In this way, users only need to override hashed CSS variables in the format of Ant Design (antd)\u2014we can provide a factory function to help users generate CSS variable styles.",paraId:51,tocIndex:10},{value:"After ceasing the active calculation of the hash, two questions arise:",paraId:52,tocIndex:11},{value:"Is it still a hash?",paraId:53,tocIndex:11},{value:"Do we still need to add hash to the styles?",paraId:53,tocIndex:11},{value:"The first question is somewhat philosophical. From a historical perspective, it is still a hash. However, since it is no longer necessary to compute it, it is simply a pure random value or a user-defined string.",paraId:54,tocIndex:11},{value:"The second question is crucial. Now that all tokens have been replaced, styles under different themes no longer have any differences, and the isolating role played by the hash is no longer significant. We still add the hash class to the DOM as the scope of the theme, which directly affects where the components derive their CSS variable values. However, the styles themselves do not care about these, so we can optimize further:",paraId:55,tocIndex:11},{value:"Styles can now exist independently! This means that different themes can share the same set of styles\u2014there is no longer a need to generate these styles repeatedly.",paraId:56,tocIndex:11},{value:"However, we still need to consider micro-application scenarios. Although hash values are isolated between different versions of antd, styles lose their scope without a hash. Without hash, different versions of antd can contaminate each other. Therefore, we will still provide the ability to apply hash to the overall styles of the application\u2014this is the application-level hash. Unlike the theme hash, the entire application can still reuse the same set of styles.",paraId:57,tocIndex:11}]},775543:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"For traditional js + css websites, SSR only needs to deal with the hydrate problem of the first rendering. With the introduction of CSS-in-JS technology, developers need to pay additional attention to how to export styles to HTML to ensure the correctness of the view. We provide a lot of implementation methods, and we just talk about the ideas here. If you need complete documentation or examples, please refer to ",paraId:0},{value:"Customize Theme",paraId:1},{value:".",paraId:0},{value:"The easiest way is to inline the styles directly into the HTML so that no extra requests. The disadvantage of this method is that the style cannot be cached by the browser and needs to be downloaded again for each request. Moreover, if there are too many styles, the HTML file will be too large, which will affect the speed of the first rendering.",paraId:2,tocIndex:0},{value:"In the v5 alpha version, in order to cover the SSR style rendering, we refer to the implementation of ",paraId:3,tocIndex:0},{value:"Emotion",paraId:3,tocIndex:0},{value:" and add the corresponding inline style before each element:",paraId:3,tocIndex:0},{value:`<div>
  <style>
    :where(.css-bAmBOo).ant-btn {
      // ...
    }
  </style>
  <button className="ant-btn css-bAmBOo">Hello World</button>
</div>
`,paraId:4,tocIndex:0},{value:"This implementation is simple and effective, the only downside is style pollution for ",paraId:5,tocIndex:0},{value:":nth",paraId:5,tocIndex:0},{value:" selections. But considering that antd components rarely use this selector, the side effects can be ignored.",paraId:5,tocIndex:0},{value:"It worked well at the beginning, and the official website of antd directly supports the SSR style without modification and meet the SEO needs. But as our components gradually migrated to the CSS-in-JS version, we found that the site's bundle size became very large and slowly became unusable. After looking at the HTML, we found that the default inline method is not good, it will cause the style to be doubled inline, for example, if there are 3 Buttons in a page, then it will repeat the inline 3 times:",paraId:6,tocIndex:0},{value:`<div>
  <style>
    :where(.css-bAmBOo).ant-btn {
      // ...
    }
  </style>
  <button className="ant-btn css-bAmBOo">Hello World 1</button>
  <style>
    :where(.css-bAmBOo).ant-btn {
      // ...
    }
  </style>
  <button className="ant-btn css-bAmBOo">Hello World 2</button>
  <style>
    :where(.css-bAmBOo).ant-btn {
      // ...
    }
  </style>
  <button className="ant-btn css-bAmBOo">Hello World 3</button>
</div>
`,paraId:7,tocIndex:0},{value:"And when most components are converted to CSS-in-JS, inline styles can become huge. So we removed the automatic inlining function in the later stage, and converted it to a form that needs to be collected manually:",paraId:8,tocIndex:0},{value:`import { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';
import { renderToString } from 'react-dom/server';

const cache = createCache();

// HTML Content
const html = renderToString(
  <StyleProvider cache={cache}>
    <MyApp />
  </StyleProvider>,
);

// Style Content
const styleText = extractStyle(cache);
`,paraId:9,tocIndex:0},{value:"This is the traditional CSS-in-JS injection implementation. As mentioned in the introduction, inline styles cannot be cached and cause additional loading overhead. Therefore, we try to explore some new implementation methods to obtain a loading experience like native CSS.",paraId:10,tocIndex:0},{value:"We are thinking about whether we can pre-bake the style of the component for front-end consumption like the v4 version, so we proposed ",paraId:11,tocIndex:1},{value:"[RFC] Static Extract style",paraId:11,tocIndex:1},{value:". Its idea is very simple that only need to render all the components once in advance to get the complete style from the cache, and then write it into the css file.",paraId:11,tocIndex:1},{value:`const cache = createCache();

// HTML Content
renderToString(
  <StyleProvider cache={cache}>
    <Button />
    <Switch />
    <Input />
    {/* Rest antd components */}
  </StyleProvider>,
);

// Style Content
const styleText = extractStyle(cache);
`,paraId:12,tocIndex:1},{value:"Of course, this is a little cumbersome for developers. So we extracted a three-party package to achieve this requirement:",paraId:13,tocIndex:1},{value:`import { extractStyle } from '@ant-design/static-style-extract';
import fs from 'fs';

// \`extractStyle\` containers all the antd component
// excludes popup like component which is no need in ssr: Modal, message, notification, etc.
const css = extractStyle();

fs.writeFile(...);
`,paraId:14,tocIndex:1},{value:"If developers use a hybrid theme, they can also implement the hybrid requirements by themselves:",paraId:15,tocIndex:1},{value:`// \`node\` is the components set we prepared
const css = extractStyle((node) => (
  <>
    <ConfigProvider theme={theme1}>{node}</ConfigProvider>
    <ConfigProvider theme={theme2}>{node}</ConfigProvider>
    <ConfigProvider theme={theme3}>{node}</ConfigProvider>
  </>
));
`,paraId:16,tocIndex:1},{value:"In most cases, the above usage has met the needs. But sometimes, we want to combine the flexibility of CSS-in-JS with the benefits of static file caching. Then at this time we need to start at the application level. After rendering and exporting the required content, it is different from the Inline Style, but converts it to file storage. File caching can be achieved through a simple hash:",paraId:17,tocIndex:2},{value:`import { createHash } from 'crypto';

// Get Style content like above
const styleText = extractStyle(cache);

const hash = createHash('md5').update(styleText).digest('hex');
const cssFileName = \`css-\${hash.substring(0, 8)}.css\`;

if (!fs.existsSync(cssFileName)) {
  fs.writeFileSync(cssFileName, styleText);
}
`,paraId:18,tocIndex:2},{value:"Then add the corresponding CSS file on the HTML template side:",paraId:19,tocIndex:2},{value:`<!doctype html>
<html>
  <head>
    <link rel="stylesheet" href="\${hashCssFileUrl}" />
  </head>
  <body>
    <div id="root">\${html}</div>
  </body>
</html>
`,paraId:20,tocIndex:2},{value:"Click ",paraId:21,tocIndex:2},{value:"here",paraId:21,tocIndex:2},{value:" for complete implementation.",paraId:21,tocIndex:2},{value:"Corresponding CSS will be generated when visiting different pages, and each CSS will have its corresponding Hash value. When the Hash hits, it means that the CSS file has been placed on the disk and can be used directly. Then, for the client, it is a normal CSS file access and also enjoys the caching capability.",paraId:22,tocIndex:2},{value:"Different styles or custom themes required by different users to access the same page can be distinguished through this Hash.",paraId:23,tocIndex:2},{value:"For uncomplicated applications, we recommend using the former Static Extract Style. It is simple enough, but for developers who want finer-grained control over SSR-style rendering for a better access speed experience, you can try the partial static capability. Thanks.",paraId:24,tocIndex:3}]},146810:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"We often encounter the need for pop-up elements when developing, such as the Select drop-down box, or the Modal component. When it is directly rendered under the current node, it may be clipped by the ",paraId:0},{value:"overflow: hidden",paraId:0},{value:" of the parent node:",paraId:0},{value:"Therefore we render it under ",paraId:1},{value:"body",paraId:1},{value:" by default in Ant Design, but this will bring new problems. Since they are not under the same container, when the user scrolls the screen, they will find that the popup layer does not follow the scrolling:",paraId:1},{value:"To solve this problem, we provide the ",paraId:2},{value:"getContainer",paraId:2},{value:" property, which allows users to customize the rendered container. The ",paraId:2},{value:"getContainer",paraId:2},{value:" method will be called when the component is mounted, returning a container node, and the component will be rendered under this node through ",paraId:2},{value:"createPortal",paraId:2},{value:".",paraId:2},{value:`// Fake Code. Just for Demo
const PopupWrapper = () => {
  const eleRef = React.useRef<HTMLDivElement>(null);

  React.useEffect(() => {
    // It's much complex with timing in real world. You can view the source for more detail:
    // https://github.com/react-component/portal/blob/master/src/Portal.tsx
    const container: HTMLElement = getContainer(eleRef.current);

    // ...
  }, []);

  return (
    <div ref={eleRef}>
      {...}
    </div>
  );
}
`,paraId:3},{value:`// Fake Code. Just for Demo
const defaultGetContainer = () => {
  const div = document.createElement('div');
  document.body.appendChild(div);
  return div;
};

const SomeComponent = ({ getContainer = defaultGetContainer }) => (
  <PopupWrapper getContainer={getContainer} />
);
`,paraId:4},{value:"For the time being, we don\u2019t pay attention to ",paraId:5},{value:"getContainer",paraId:5},{value:"\u2019s need to dynamically switch the mount node (in fact, it has not been able to switch for a long time in the past), only from the perspective of React 18, it has encountered some problems.",paraId:5},{value:"In React 18, effects may fire multiple times. In order to prevent inadvertently breaking the developer's behavior, it has also been adjusted accordingly under ",paraId:6,tocIndex:0},{value:"StrictMode",paraId:6,tocIndex:0},{value:":",paraId:6,tocIndex:0},{value:`React mounts the component.
`,paraId:7,tocIndex:0},{value:"Layout effects are created.",paraId:8,tocIndex:0},{value:"Effect effects are created.",paraId:8,tocIndex:0},{value:`React simulates effects being destroyed on a mounted component.
`,paraId:7,tocIndex:0},{value:"Layout effects are destroyed.",paraId:9,tocIndex:0},{value:"Effects are destroyed.",paraId:9,tocIndex:0},{value:`React simulates effects being re-created on a mounted component.
`,paraId:7,tocIndex:0},{value:"Layout effects are created",paraId:10,tocIndex:0},{value:"Effect setup code runs",paraId:10,tocIndex:0},{value:"The simple understanding is that under StrictMode, even if your deps contains empty objects, the effect will still be triggered multiple times. When switching to React 18 StrictMode, we will find that there will be a pair of mount nodes in the HTML, and the previous one is empty:",paraId:11,tocIndex:0},{value:`<body>
  <div id="root">...</div>

  <!-- Empty -->
  <div className="sample-holder"></div>

  <!-- Real in use -->
  <div className="sample-holder">
    <div className="ant-component-wrapper">...</div>
  </div>
</body>
`,paraId:12,tocIndex:0},{value:"Therefore, we adjusted the call implementation, and the default ",paraId:13,tocIndex:0},{value:"getContainer",paraId:13,tocIndex:0},{value:" is also managed through state to ensure that the nodes generated by the previous effect will be cleaned up in StrictMode:",paraId:13,tocIndex:0},{value:`// Fake Code. Just for Demo
const SomeComponent = ({ getContainer }) => {
  const [myContainer, setMyContainer] = React.useState<HTMLElement | null>(null);

  React.useEffect(() => {
    if (getContainer) {
      setMyContainer(getContainer());
      return;
    }

    const div = document.createElement('div');
    document.body.appendChild(div);
    setMyContainer(div);

    return () => {
      document.body.removeChild(div);
    };
  }, [getContainer]);

  return <PopupWrapper getContainer={() => myContainer} />;
};
`,paraId:14,tocIndex:0},{value:"After putting ",paraId:15,tocIndex:0},{value:"getContainer",paraId:15,tocIndex:0},{value:" into effect management, we can manage nodes in a way that is more in line with the React life cycle, and we can also clean up when ",paraId:15,tocIndex:0},{value:"getContainer",paraId:15,tocIndex:0},{value:" changes. So as to support the scenario of dynamically changing ",paraId:15,tocIndex:0},{value:"getContainer",paraId:15,tocIndex:0},{value:" (although I personally doubt the universality of this usage scenario).",paraId:15,tocIndex:0},{value:"Due to the fix that ",paraId:16,tocIndex:1},{value:"getContainer",paraId:16,tocIndex:1},{value:" does not support dynamic changes, it also introduces a potential breaking change at the same time. If the developer customizes ",paraId:16,tocIndex:1},{value:"getContainer",paraId:16,tocIndex:1},{value:" to create a new dom node every time, it will cause an infinite loop because of the continuous execution of the effect, resulting in the continuous creation of nodes. If you use this method and encounter problems, you need to pay attention to check.",paraId:16,tocIndex:1}]},144769:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Hi, I'm ",paraId:0},{value:"Wxh16144",paraId:0},{value:". I have discovered some tools that can improve development efficiency and code quality through learning Ant Design's component library and participating in community contributions. I'd like to take this opportunity to share my experience with you. To help better understand Ant Design, and to apply these techniques to your own projects.",paraId:0},{value:"Ant Design is hosted on GitHub as an open-source project, making it easy to communicate and collaborate with developers around the world, and allowing developers to submit issues and pull requests. Additionally, we can well manage the code repository and automate workflows such as testing and deployment through utilizing GitHub Actions and its CI/CD capabilities.",paraId:1,tocIndex:0},{value:"GitHub Actions is a platform for automating software development workflows, Developers can easily customize and configure their own workflows by adding YAML format files to the ",paraId:2,tocIndex:1},{value:".github/workflows",paraId:2,tocIndex:1},{value:" directory to define the workflow and implement CI (continuous integration). By\xA0Understanding GitHub Actions.We can grasp some concepts within workflows through ",paraId:2,tocIndex:1},{value:"understanding GitHub actions",paraId:2,tocIndex:1},{value:".",paraId:2,tocIndex:1},{value:"Event",paraId:3,tocIndex:1},{value:": Triggers a workflow run, such as when someone creates an issue, a pull request, or pushes code to a branch.",paraId:3,tocIndex:1},{value:"Job",paraId:3,tocIndex:1},{value:": A workflow consists of one or more jobs that run in parallel by default, but can be set to run sequentially. Each job can contain multiple steps.",paraId:3,tocIndex:1},{value:"Step",paraId:3,tocIndex:1},{value:": Defines the work to be done for a particular section. Each step runs as a separate process. Each item under this section is a separate operation or shell script.",paraId:3,tocIndex:1},{value:"Here's a visual representation from the official documentation that shows the relationship between ",paraId:4,tocIndex:1},{value:"Event",paraId:4,tocIndex:1},{value:", ",paraId:4,tocIndex:1},{value:"Job",paraId:4,tocIndex:1},{value:" and ",paraId:4,tocIndex:1},{value:"Step",paraId:4,tocIndex:1},{value:":",paraId:4,tocIndex:1},{value:"With the knowledge we have gained, we know that all of Ant Design's workflows are managed in the ",paraId:5,tocIndex:2},{value:".github/workflows",paraId:5,tocIndex:2},{value:" directory.",paraId:5,tocIndex:2},{value:"Ant Design's CI covers the following aspects:",paraId:6,tocIndex:2},{value:"Community management",paraId:7,tocIndex:2},{value:": Use GitHub Actions to perform quality checks on issues/PRs and improve collaboration efficiency through comments and labels.",paraId:7,tocIndex:2},{value:"Code quality",paraId:7,tocIndex:2},{value:": Use ESLint and Prettier to perform code standard checks to ensure code quality and consistency.",paraId:7,tocIndex:2},{value:"Testing",paraId:7,tocIndex:2},{value:": Use Jest and testing-library to perform unit tests and snapshot tests to ensure code correctness and stability.",paraId:7,tocIndex:2},{value:"Build",paraId:7,tocIndex:2},{value:": Build ES5 and ES6 module specifications to ensure the library can be used in different environments.",paraId:7,tocIndex:2},{value:"Deployment",paraId:7,tocIndex:2},{value:": Use ",paraId:7,tocIndex:2},{value:"dumi",paraId:7,tocIndex:2},{value:" to automatically generate documentation and publish it to GitHub Pages.",paraId:7,tocIndex:2},{value:"As a feature on the GitHub platform, issues serve as a centralized information hub for collecting community feedback and problems. Collaborators can add labels, milestones, and assignees to better organize tasks and projects.",paraId:8,tocIndex:3},{value:"Ensuring issues contain sufficient information helps us to analyze and prioritize. We provide an ",paraId:9,tocIndex:4},{value:"issue assistant",paraId:9,tocIndex:4},{value:" to standardize the process of creating issues. Additionally, we use GitHub Actions to check the issues created to auto close if it not pass the assistant's checks. Which will be labeled as ",paraId:9,tocIndex:4},{value:"Invalid",paraId:9,tocIndex:4},{value:", and leaving comment to remind the creator how to ask a question properly.",paraId:9,tocIndex:4},{value:"However, team members may sometimes be unable to obtain effective information from the provided content. In such cases,will add labels such as ",paraId:10,tocIndex:4},{value:"\u{1F914} Need Reproduce",paraId:10,tocIndex:4},{value:", ",paraId:10,tocIndex:4},{value:"needs-more-info",paraId:10,tocIndex:4},{value:", or ",paraId:10,tocIndex:4},{value:"help wanted",paraId:10,tocIndex:4},{value:" to notice reporter improving the issue. The ",paraId:10,tocIndex:4},{value:"issue-labeled.yml",paraId:10,tocIndex:4},{value:" file records different labels triggering corresponding comment reply jobs.",paraId:10,tocIndex:4},{value:"For some common issues, the team provides detailed answers to help developers solve problems more quickly. For example, when the title of an issue contains keywords such as ",paraId:11,tocIndex:5},{value:"can not open",paraId:11,tocIndex:5},{value:", ",paraId:11,tocIndex:5},{value:"website",paraId:11,tocIndex:5},{value:", ",paraId:11,tocIndex:5},{value:"down",paraId:11,tocIndex:5},{value:", ",paraId:11,tocIndex:5},{value:"IE",paraId:11,tocIndex:5},{value:", etc., the ",paraId:11,tocIndex:5},{value:"issue-open-check.yml#L43-L94",paraId:11,tocIndex:5},{value:" job records the standard reply format in detail and will automatically close the issue.",paraId:11,tocIndex:5},{value:"Using GitHub Actions scheduled tasks to help manage and close issues, these automated operations can effectively avoid excessive accumulation of unprocessed issues.",paraId:12,tocIndex:6},{value:"issue-close-require.yml",paraId:13,tocIndex:6},{value:": Checks issues marked as ",paraId:13,tocIndex:6},{value:"\u{1F914} Need Reproduce",paraId:13,tocIndex:6},{value:" or ",paraId:13,tocIndex:6},{value:"needs-more-info",paraId:13,tocIndex:6},{value:" at a scheduled time. If these tags are not removed after 3 days, the issue will be automatically commented on and closed.",paraId:13,tocIndex:6},{value:"issue-check-inactive.yml",paraId:13,tocIndex:6},{value:": Scheduled to check issues which have no activity within the last 30 days every 15 days and add an ",paraId:13,tocIndex:6},{value:"Inactive",paraId:13,tocIndex:6},{value:" label to them, without closing. If modified or has new comments, the ",paraId:13,tocIndex:6},{value:"Inactive",paraId:13,tocIndex:6},{value:" and ",paraId:13,tocIndex:6},{value:"needs-more-info",paraId:13,tocIndex:6},{value:" labels will be automatically removed.",paraId:13,tocIndex:6},{value:"The Ant Design team strongly encourages community involvement in Pull Request (PR), and provides the ",paraId:14,tocIndex:7},{value:"Contributor development maintenance guide",paraId:15,tocIndex:7},{value:" document for reference. It's important to follow certain standards when submitting a PR to ensure quality and effective communication. Additionally, the team uses GitHub Actions to require and review certain aspects of PRs to maintain code quality and ensure long-term project maintenance.",paraId:14,tocIndex:7},{value:"When you initiate a pull request (PR), the description content, including the changelog section, will be generated automatically through the PR template and needs to be filled in by the developer. The ",paraId:16,tocIndex:8},{value:"pr-open-check.yml",paraId:16,tocIndex:8},{value:" Job will check it, and if it is not filled in, the CI will remind you with a comment. Just like this:",paraId:16,tocIndex:8},{value:"If the issue referenced in the PR description has the ",paraId:17,tocIndex:8},{value:"\u{1F3B1} Collaborate PR only",paraId:17,tocIndex:8},{value:" label, the PR will be closed and leave a notification.",paraId:17,tocIndex:8},{value:"The ",paraId:18,tocIndex:8},{value:"verify-files-modify.yml",paraId:18,tocIndex:8},{value:" job will check the changes. If the changes include specific directories (such as ",paraId:18,tocIndex:8},{value:"./github/",paraId:18,tocIndex:8},{value:" and ",paraId:18,tocIndex:8},{value:"scripts/",paraId:18,tocIndex:8},{value:") or specific files (such as ",paraId:18,tocIndex:8},{value:"CHANGELOG.md",paraId:18,tocIndex:8},{value:"), community contributions will be rejected. The PR will be automatically closed and assigned to core members.",paraId:18,tocIndex:8},{value:"In the ",paraId:19,tocIndex:9},{value:"lint",paraId:19,tocIndex:9},{value:" job, the process always follows the procedure of performing a lint check on the code submitted by each developer.",paraId:19,tocIndex:9},{value:"For every pull request created, GitHub Actions will trigger the build process to ensure the documentation is correct. And PR does not affect the documentation or component demos. PR deployment is divided into multiple jobs, and the specific process is as follows:",paraId:20,tocIndex:10},{value:"First, the ",paraId:21,tocIndex:10},{value:"preview-start.yml",paraId:21,tocIndex:10},{value:'\uF0B7job is triggered to create a placeholder comment on the PR, informing the developer to start the preview build. This is what is often seen as "Preview Preparing..."',paraId:21,tocIndex:10},{value:"At the same time, the ",paraId:22,tocIndex:10},{value:"preview-build.yml",paraId:22,tocIndex:10},{value:" job performs the build operation on the site.",paraId:22,tocIndex:10},{value:"Finally, the ",paraId:22,tocIndex:10},{value:"preview-deploy.yml",paraId:22,tocIndex:10},{value:" job waits for ",paraId:22,tocIndex:10},{value:"preview-build.yml",paraId:22,tocIndex:10},{value:" to complete before performing the corresponding operations. If the build is successful, it will be deployed using ",paraId:22,tocIndex:10},{value:"Surge",paraId:22,tocIndex:10},{value:", and the deployment address follows the rule: ",paraId:22,tocIndex:10},{value:"https://preview-{PR-id}-ant-design.surge.sh",paraId:22,tocIndex:10},{value:". The placeholder image in the comment is updated with a success icon (clicking on the image will take you to the specific address), otherwise it is marked with a failure icon.",paraId:22,tocIndex:10},{value:"The ",paraId:23,tocIndex:11},{value:"size-limit.yml",paraId:23,tocIndex:11},{value:" job checks the size of the product resulting from the PR.",paraId:23,tocIndex:11},{value:"Recently, the team has added chatGPT to GitHub Actions to perform AI-based code review. The specific job can be found in the ",paraId:23,tocIndex:11},{value:"chatgpt-cr.yml",paraId:23,tocIndex:11},{value:" file.",paraId:23,tocIndex:11},{value:"Unit testing is one of the most important components of component library quality assurance. Whenever any code is pushed, this CI is triggered to perform automated testing, including PRs initiated by developers or updates to the main branch.",paraId:24,tocIndex:12},{value:"The team wanted the packaged product to build properly after each code update. Ant Design has added the ",paraId:25,tocIndex:13},{value:"Dist Job",paraId:25,tocIndex:13},{value:" and ",paraId:25,tocIndex:13},{value:"Compile Job",paraId:25,tocIndex:13},{value:" in the test.yml file to ensure the repository can be built and packaged correctly.",paraId:25,tocIndex:13},{value:"you may notice that there are as many as 30 jobs related to testing only each time.",paraId:26,tocIndex:14},{value:"The team is very cautious about unit testing and needs to consider the running status of components on various major versions of React (usually versions 16, 17, and 18). If it is an update to the main branch, the running status of project build artifacts (usually ",paraId:27,tocIndex:14},{value:"dist",paraId:27,tocIndex:14},{value:", ",paraId:27,tocIndex:14},{value:"es",paraId:27,tocIndex:14},{value:", and ",paraId:27,tocIndex:14},{value:"lib",paraId:27,tocIndex:14},{value:") on three versions of React also needs to be considered. Currently, it is known that all components of Ant Design have over 4000 test cases. In order to further improve the efficiency of testing, we have also set up a distributed testing environment.",paraId:27,tocIndex:14},{value:"With the help of the ",paraId:28,tocIndex:14},{value:"Job matrix strategy",paraId:28,tocIndex:14},{value:", CI can configure multiple jobs to perform testing tasks at one time. ",paraId:28,tocIndex:14},{value:"Normal test",paraId:28,tocIndex:14},{value:" and ",paraId:28,tocIndex:14},{value:"Module test",paraId:28,tocIndex:14},{value:" are the jobs that Ant Design uses the matrix strategy to test.",paraId:28,tocIndex:14},{value:"The deployment and build process here is consistent with the PR preview deployment and build behavior mentioned earlier, except that the deployment target of the built artifacts is different.",paraId:29,tocIndex:15},{value:"The ",paraId:30,tocIndex:16},{value:"https://ant.design",paraId:30,tocIndex:16},{value:" official website uses the free ",paraId:30,tocIndex:16},{value:"GitHub Pages",paraId:30,tocIndex:16},{value:" function provided by GitHub. It uses the Actions ",paraId:30,tocIndex:16},{value:"Deploy to GitHub Pages",paraId:30,tocIndex:16},{value:" job to push the built documentation artifacts directly to the ",paraId:30,tocIndex:16},{value:"gh-pages",paraId:30,tocIndex:16},{value:" branch.",paraId:30,tocIndex:16},{value:"As we all know, the ",paraId:31,tocIndex:17},{value:"https://ant.design",paraId:31,tocIndex:17},{value:" official website always maintains the latest version. However, sometimes it is still necessary to refer to the documentation of a specific version. The ",paraId:31,tocIndex:17},{value:"Deploy to Surge",paraId:31,tocIndex:17},{value:" job is responsible for deploying the website to Surge after each new version is released, with the URL format ",paraId:31,tocIndex:17},{value:"https://ant-design-{major}-{minor}-{patch}.surge.sh",paraId:31,tocIndex:17},{value:", and posting the URL as a comment on each release commit.",paraId:31,tocIndex:17},{value:"In the previous sections, we introduced many scenarios used by Ant Design. However, there are still some Jobs that haven't been specifically introduced. Here are some additional details to supplement that.",paraId:32,tocIndex:18},{value:"To ensure that developers and community members are informed of relevant information as soon as possible, IM integration is implemented using the events provided by Action:",paraId:33,tocIndex:19},{value:"issue-notice",paraId:34,tocIndex:19},{value:" and ",paraId:34,tocIndex:19},{value:"discussion-notice",paraId:34,tocIndex:19},{value:" jobs send notifications to the DingTalk community group whenever an issue or discussion is created.",paraId:34,tocIndex:19},{value:"The ",paraId:35,tocIndex:19},{value:"release-helper.yml",paraId:35,tocIndex:19},{value:" CI file publishes the update log to the DingTalk community group whenever antd releases a version and creates a release.",paraId:35,tocIndex:19},{value:"Other jobs not mentioned here are waiting for you to explore and discover...",paraId:36,tocIndex:19},{value:"In the previous sections, we introduced many scenarios in which Ant Design uses GitHub Action. Why not try to apply it to your own project and improve production efficiency? Let's demonstrate this with a simple demo.",paraId:37,tocIndex:20},{value:"Create a Vite + React project by running the command ",paraId:38,tocIndex:21},{value:"pnpm create vite@latest my-react-app --template react-ts",paraId:38,tocIndex:21},{value:" in the command line.",paraId:38,tocIndex:21},{value:"Create a new file named ",paraId:39,tocIndex:22},{value:"ci.yml",paraId:39,tocIndex:22},{value:" in the ",paraId:39,tocIndex:22},{value:".github/workflows",paraId:39,tocIndex:22},{value:" folder located in the project's root directory with the following code:",paraId:39,tocIndex:22},{value:`name: CI

# Set the event to pull request event and push event of the master branch
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

permissions:
  contents: write

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7.0.0

      - name: Install dependencies
        run: pnpm install

      - name: lint
        run: pnpm run lint

      # The template does not contain test cases. If you need to use test cases, you can uncomment it
      # - name: Test
      #   run: pnpm run test

      - name: Build
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ./dist

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        # Only deploy when the push event of the master branch is triggered
        if: github.ref == 'refs/heads/master'
        with:
          github_token: \${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
`,paraId:40,tocIndex:22},{value:"The above workflow includes a CI job that will run ",paraId:41,tocIndex:22},{value:"lint",paraId:41,tocIndex:22},{value:", ",paraId:41,tocIndex:22},{value:"build",paraId:41,tocIndex:22},{value:", and ",paraId:41,tocIndex:22},{value:"deploy",paraId:41,tocIndex:22},{value:" in sequence when we push to the ",paraId:41,tocIndex:22},{value:"master",paraId:41,tocIndex:22},{value:" branch. The process is shown below:",paraId:41,tocIndex:22},{value:"To further optimize dependency installation speed, we can add pnpm caching. After that, we can initiate a pull request to verify the previous steps.",paraId:42,tocIndex:23},{value:`# ...
- name: create pnpm-lock.yaml
  run: pnpm install --frozen-lockfile --ignore-scripts

- name: Get pnpm store directory
  id: pnpm-cache
  shell: bash
  run: |
    echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

- name: Setup pnpm cache
  uses: actions/cache@v3
  with:
    path: \${{ steps.pnpm-cache.outputs.STORE_PATH }}
    key: \${{ runner.os }}-pnpm-store-\${{ hashFiles('**/pnpm-lock.yaml') }}
    restore-keys: |
      \${{ runner.os }}-pnpm-store-

# ...
`,paraId:43,tocIndex:23},{value:"The initiated pull request also triggered the CI job correctly, and our pnpm store has been cached. From now on, Every time CI triggered from now on, it will check the content of the ",paraId:44,tocIndex:23},{value:"pnpm-lock.yaml",paraId:44,tocIndex:23},{value:"\xA0file to determine whether to read the cache directly.",paraId:44,tocIndex:23},{value:"Regarding the ",paraId:45,tocIndex:23},{value:"Setup pnpm cache",paraId:45,tocIndex:23},{value:" step above, any cached items that have not been accessed within 7 days will be deleted. There is no limit to the number of caches that can be stored, but the total size of all caches in the storage repository is limited to 10 GB. For more information, please refer to ",paraId:45,tocIndex:23},{value:"Caching dependencies to speed up workflows",paraId:45,tocIndex:23},{value:".",paraId:45,tocIndex:23},{value:"I hope it has helped you gain a deeper understanding of Ant Design. You are also welcome to participate in discussions and contribute to the project at the ",paraId:46,tocIndex:24},{value:"Ant Design Discussion",paraId:46,tocIndex:24},{value:".",paraId:46,tocIndex:24}]},620138:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In the v5 release announce, our design team mentioned that we will provide a happy work theme. This part of the work is still in progress, but we have made some progress and would like to share it with you here.",paraId:0},{value:"You can directly use ",paraId:1,tocIndex:0},{value:"@ant-design/happy-work-theme",paraId:1,tocIndex:0},{value:" to switch theme effects (or continue reading to see what we have done):",paraId:1,tocIndex:0},{value:`import { HappyProvider } from '@ant-design/happy-work-theme';

export default () => (
  <HappyProvider>
    <Button />
  </HappyProvider>
);
`,paraId:2,tocIndex:0},{value:"There is a special design interaction in Ant Design, which is the click wave effect on some components. You can see them everywhere:",paraId:3,tocIndex:1},{value:'In the past major versions, this wave effect could not be modified. If want to turn it off, developers even need to do some "magic code" to achieve it. So when the designer proposed a happy work theme, as a developer, we think this is a good time to make some changes.',paraId:4,tocIndex:1},{value:"Wave effect is actually an component, which listens to the click event of the child component. Then add a ",paraId:5,tocIndex:2},{value:"box-shadow",paraId:5,tocIndex:2},{value:" animation to generate a wave effect:",paraId:5,tocIndex:2},{value:`// Sample code.
const Button = (
  <Wave>
    <button />
  </Wave>
);
`,paraId:6,tocIndex:2},{value:"In the early design (",paraId:7,tocIndex:2},{value:"#40111",paraId:7,tocIndex:2},{value:"), we hope that the wave customization ability belongs to part of the Design Token. But in this way, the Design Token will become a bit too complicated, from the original pure ",paraId:7,tocIndex:2},{value:"string | number",paraId:7,tocIndex:2},{value:" type to ",paraId:7,tocIndex:2},{value:"string | number | Function<T>",paraId:7,tocIndex:2},{value:". From the API design point of view, ",paraId:7,tocIndex:2},{value:"Function<T>",paraId:7,tocIndex:2},{value:" also has a bad smell, and if there are new customization requirements in the future, the type of Function will become more and more divergent. So ",paraId:7,tocIndex:2},{value:"#40111",paraId:7,tocIndex:2},{value:" stays in the Draft version forever.",paraId:7,tocIndex:2},{value:"Next, we choose to put it in ConfigProvider. ConfigProvider is a global configuration component, which can affect all child components. Its API has also included a lot of component configuration capabilities, so we only need to add a ",paraId:8,tocIndex:3},{value:"wave",paraId:8,tocIndex:3},{value:" property:",paraId:8,tocIndex:3},{value:`<ConfigProvider wave={{ showEffect }}>
  <Button />
</ConfigProvider>
`,paraId:9,tocIndex:3},{value:"Click to ",paraId:10,tocIndex:3},{value:"view ConfigProvider demo",paraId:11,tocIndex:3},{value:".",paraId:10,tocIndex:3},{value:"showEffect",paraId:12,tocIndex:3},{value:" method will tell you the DOM node that needs to generate the effect. This node has been encapsulated and will always correspond to the correct element (for example, Button is itself, and Radio will find the circle shape dom from ",paraId:12,tocIndex:3},{value:"label",paraId:12,tocIndex:3},{value:"). And tell you which component it is and which Design Token the current node belongs to:",paraId:12,tocIndex:3},{value:`type ShowEffect = (target: HTMLElement, info: { component: string; token: GlobalToken }) => void;
`,paraId:13,tocIndex:3},{value:"Through Design Token, you can implement effects that conform to the current theme. For example, in the GIF at the beginning of the article, when the theme color changes, we can get the current theme color and add the corresponding effect.",paraId:14,tocIndex:3},{value:"Happy work theme is still in progress, and we will gradually add more capabilities in subsequent versions. The HappyProvider provided by ",paraId:15,tocIndex:4},{value:"@ant-design/happy-work-theme",paraId:15,tocIndex:4},{value:' currently replaces the wave effect through ConfigProvider. We plan that developers will not need to make additional changes in the future, and will gradually add more "happiness" through HappyProvider as the version iterates. Stay tuned.',paraId:15,tocIndex:4}]},591108:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"You may have received this warning when upgrading Ant Design:",paraId:0},{value:"Warning: [antd: XXX] `old prop` is deprecated. Please use `new prop` instead.\n",paraId:1},{value:"This is because antd has some historical debt in API design. For example, in antd v3 and before, the code of TreeSelect was directly copied from Select and extended on this basis. There are differences in their search styles:",paraId:2},{value:"And in the maintenance process, developers want to control the content of the search box. Unfortunately, this requirement was PR by different developers at different times. So two different properties were added, one called ",paraId:3},{value:"inputValue",paraId:3},{value:" and the other called ",paraId:3},{value:"searchValue",paraId:3},{value:":",paraId:3},{value:`// Select in combobox mode, the search box is the input box, \`inputValue\` looks reasonable
<Select inputValue="search" />

// TreeSelect's search box is in the popup layer, \`searchValue\` is also reasonable
<TreeSelect searchValue="search" />
`,paraId:4},{value:"In multiple mode, the Select component will clear the search box content after selecting the content. But in some scenarios, developers want to keep it. So TreeSelect and Select added the ",paraId:5},{value:"autoClearSearchValue",paraId:5},{value:" property.",paraId:5},{value:"Wait! Select is called ",paraId:6},{value:"inputValue",paraId:6},{value:", why should it be called ",paraId:6},{value:"autoClearSearchValue",paraId:6},{value:"? Obviously it should be called ",paraId:6},{value:"autoClearInputValue",paraId:6},{value:". If we continue to grow other similar API styles on the existing API. You will find that the component's props are getting more and more split. This will also cause bad smells in code maintenance. For example, in the above example, we later extracted the Select component into a unified UI layer and merged it into the ",paraId:6},{value:"rc-select",paraId:6},{value:" component. ",paraId:6},{value:"rc-tree-select",paraId:6},{value:" only needs to implement the content of the popup layer, and the structure and style of the input box can be completely reused with Select. But because the APIs of the two are inconsistent, we need to do extra processing, so we need to refactor these API debts and unify them during the iteration process. (In v4, we merged it into ",paraId:6},{value:"searchValue",paraId:6},{value:" and unified the design)",paraId:6},{value:"However there is no silver bullet in the world, we can't design a perfect API at the beginning. Some APIs seem very reasonable at the beginning of the design, but as the iteration progresses, they will be found to be more or less inappropriate. For example, the popup layer was named dropdown in the early days, which corresponds to the popup content of Dropdown and Select components. But for Tooltip, dropdown is obviously not suitable. From a unified perspective, popup will be more suitable.",paraId:7},{value:"We gradually unified the API naming rules during the maintenance process (",paraId:8,tocIndex:0},{value:"API Naming rules",paraId:8,tocIndex:0},{value:"). When adding new features, we prefer to find similar APIs from existing ones. For existing APIs, deprecated warnings are gradually added. In order to maintain compatibility, our strategy is that the deprecated warnings provided by each version will continue to be compatible with a major version, and it will be removed in the next major version. For example, in v4, deprecated warnings are added, so they can still be used in v5, but they will be removed in v6. In this way, developers have enough time to migrate.",paraId:8,tocIndex:0},{value:"But from the developer's point of view, this is not reasonable. Developers only upgraded antd, but they have to suffer from the intrusion of console because of the API design mistakes of the component library. If a few usage warnings are mixed into the deprecated warnings, developers often have difficulty finding them. This situation is particularly prominent in major version upgrades. The business may not give you enough time to do the upgrade migration, so you have to use compatible packages and other technical means to make it run first. For long deprecated warnings, developers have to choose to temporarily (or permanently) ignore them. For this situation, usage warnings will be more important, so we propose the ",paraId:9,tocIndex:0},{value:"Warning Filter RFC",paraId:9,tocIndex:0},{value:".",paraId:9,tocIndex:0},{value:"You can aggregate the deprecated information through the ",paraId:10,tocIndex:1},{value:"warning",paraId:10,tocIndex:1},{value:" property of ConfigProvider:",paraId:10,tocIndex:1},{value:`<ConfigProvider warning={{ strict: false }} />
`,paraId:11,tocIndex:1},{value:"After aggregation, the original flattened deprecated information will be merged into an array and displayed in the console. And it will not affect the usage warnings:",paraId:12,tocIndex:1},{value:"As mentioned above, there is no silver bullet in API design. In order to prevent breaking change, we generally will not change the existing API implementation. But for some conventions, this will cause trouble. For example, the ",paraId:13,tocIndex:2},{value:"ref",paraId:13,tocIndex:2},{value:" component is a typical convention. As long as it is a React developer, you can understand that you can get the DOM node through ",paraId:13,tocIndex:2},{value:"ref",paraId:13,tocIndex:2},{value:" and do some basic operations such as ",paraId:13,tocIndex:2},{value:"focus",paraId:13,tocIndex:2},{value:". But for composite components, the calling method and DOM may not be unified. For example, the ",paraId:13,tocIndex:2},{value:"ref",paraId:13,tocIndex:2},{value:" of the Table component should obviously be the outermost div, but the ",paraId:13,tocIndex:2},{value:"scrollTo",paraId:13,tocIndex:2},{value:" method should correspond to the scroll container (if it is VirtualTable, it should be handled by the internal ",paraId:13,tocIndex:2},{value:"rc-virtual-list",paraId:13,tocIndex:2},{value:"). In antd mobile, ",paraId:13,tocIndex:2},{value:"ref",paraId:13,tocIndex:2},{value:" is designed as a composite structure, and the DOM node is always returned through ",paraId:13,tocIndex:2},{value:"nativeElement",paraId:13,tocIndex:2},{value:":",paraId:13,tocIndex:2},{value:`export interface SampleRef {
  nativeElement: HTMLElement;
  focus(): void;
  blur(): void;
}
`,paraId:14,tocIndex:2},{value:"But in antd, because we did not make a convention for ",paraId:15,tocIndex:2},{value:"ref",paraId:15,tocIndex:2},{value:" early, we encountered difficulties in implementing the method. But fortunately, there is Proxy support, we can intercept ",paraId:15,tocIndex:2},{value:"ref",paraId:15,tocIndex:2},{value:" through Proxy and return the results we want:",paraId:15,tocIndex:2},{value:`useImperativeHandle(
  ref,
  () =>
    new Proxy(divRef.current, {
      get(target, key) {
        // ...
      },
    }),
);
`,paraId:16,tocIndex:2},{value:"We can continue to be compatible with previous usage in this way. It is still a DOM node, but it also supports the definition call of SampleRef.",paraId:17,tocIndex:2},{value:"API design is a difficult problem. As the iteration of technology stack and components themselves. Some designs will gradually decay, and API upgrades themselves are also painful for developers. We hope that through this article, you can understand our design ideas and some problems in the upgrade process. If you have any suggestions or ideas, welcome to discuss on Github.",paraId:18,tocIndex:3}]},534788:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"As we all know, antd v5 uses CSS-in-JS to support the needs of mixed and dynamic styles. On the contrary, it needs to generate styles at runtime, which will cause some performance loss. Therefore, we developed the ",paraId:0},{value:"@ant-design/cssinjs",paraId:0},{value:" library at the component library level to improve the cache efficiency through certain constraints, so as to achieve the purpose of performance optimization. But we don't stop there. We can skip the stage of generating styles at runtime through some logic.",paraId:0},{value:"If you have checked the official website of Ant Design, you will find that Ant Design's components do not dynamically insert ",paraId:1,tocIndex:0},{value:"<style />",paraId:1,tocIndex:0},{value:" to control styles, but use CSS files to control styles:",paraId:1,tocIndex:0},{value:"document.head",paraId:2,tocIndex:0},{value:" has some ",paraId:2,tocIndex:0},{value:"css",paraId:2,tocIndex:0},{value:" file references:",paraId:2,tocIndex:0},{value:"umi.[hash].css",paraId:3,tocIndex:0},{value:"style-acss.[hash].css",paraId:3,tocIndex:0},{value:"The former is the style content generated by dumi, such as Demo block, search box style, etc. The latter is the style file generated by SSR. In the ",paraId:4,tocIndex:0},{value:"custom theme",paraId:5,tocIndex:0},{value:" document, we mentioned that we can pre-bake the components used in the page through the overall export method, so as to generate css files for cache hit to improve the next open speed. This is also the way we use in the official website. So the components in the Demo actually reuse this part of the style.",paraId:4,tocIndex:0},{value:"Wait a minute! Isn't CSS-in-JS supposed to generate style hash at runtime and align it with ",paraId:6,tocIndex:0},{value:"<style />",paraId:6,tocIndex:0},{value:"? Why can css files also be aligned? Don't worry, let's take a look.",paraId:6,tocIndex:0},{value:"Application level CSS-in-JS solutions will calculate the hash value of the generated style and store it in the cache. When rerender, it will first check whether the corresponding style exists in the cache. If it exists, it will be used directly, otherwise it will be generated again. This can avoid repeated generation of styles, so as to improve performance.",paraId:7,tocIndex:1},{value:"Every dynamically inserted style is also identified by hash. If the ",paraId:8,tocIndex:1},{value:"<style />",paraId:8,tocIndex:1},{value:" with the hash already exists in the page, it means that inline style injection has been done in SSR. Then ",paraId:8,tocIndex:1},{value:"<style />",paraId:8,tocIndex:1},{value:" does not need to be created again.",paraId:8,tocIndex:1},{value:"You can find that although the ",paraId:9,tocIndex:1},{value:"<style />",paraId:9,tocIndex:1},{value:" node can be omitted, hash still deps on the calculated style content. So even if there is reusable style in the page, it still needs to be calculated once. It's really not cost-effective.",paraId:9,tocIndex:1},{value:"In the ",paraId:10,tocIndex:2},{value:"component-level CSS-in-JS",paraId:11,tocIndex:2},{value:" article, we mentioned that Ant Design's Cache mechanism does not need to calculate the complete style. For the component library, as long as the Token and ComponentName can determine the consistency of the generated style, so we can calculate the hash value in advance:",paraId:10,tocIndex:2},{value:"Therefore, we found that we can reuse this mechanism to realize whether the component style has been injected on the client side.",paraId:12,tocIndex:2},{value:"In ",paraId:13,tocIndex:3},{value:"@ant-design/cssinjs",paraId:13,tocIndex:3},{value:", Cache itself contains the style and hash information corresponding to each element. The previous ",paraId:13,tocIndex:3},{value:"extractStyle",paraId:13,tocIndex:3},{value:" method only takes the content of style in Cache for packaging:",paraId:13,tocIndex:3},{value:`// e.g. Real world path is much more complex
{
  "bAMbOo|Button": ["LItTlE", ":where(.bAMbOo).ant-btn { color: red }"],
  "bAMbOo|Spin": ["liGHt", ":where(.bAMbOo).ant-spin { color: blue }"]
}
`,paraId:14,tocIndex:3},{value:"Get:",paraId:15,tocIndex:3},{value:`:where(.bAMbOo).ant-btn {
  color: red;
}
:where(.bAMbOo).ant-spin {
  color: blue;
}
`,paraId:16,tocIndex:3},{value:"We go further to reuse the style. We also extract the path and hash value:",paraId:17,tocIndex:3},{value:`{
  "bAMbOo|Button": "LItTlE",
  "bAMbOo|Spin": "liGHt"
}
`,paraId:18,tocIndex:3},{value:"And also pack into css style:",paraId:19,tocIndex:3},{value:`// Just example. Not real world code
.cssinjs-cache-path {
  content: 'bAMbOo|Button:LItTlE;bAMbOo|Spin:liGHt';
}
`,paraId:20,tocIndex:3},{value:"In this way, the SSR side will retain all the information we need, and then we only need to extract it on the client side.",paraId:21,tocIndex:3},{value:"It's much simpler on the client side. We can extract the HashMap information through ",paraId:22,tocIndex:4},{value:"getComputedStyle",paraId:22,tocIndex:4},{value:":",paraId:22,tocIndex:4},{value:`// Just example. Not real world code
const measure = document.createElement('div');
measure.className = 'cssinjs-cache-path';
document.body.appendChild(measure);

// Now let's parse the \`content\`
const { content } = getComputedStyle(measure);
`,paraId:23,tocIndex:4},{value:"In the component rendering stage, ",paraId:24,tocIndex:4},{value:"useStyleRegister",paraId:24,tocIndex:4},{value:" will first check whether the path exists in HashMap before calculating CSS Object. If it exists, it means that the data has been generated through the server. We only need to extract the style from the existing ",paraId:24,tocIndex:4},{value:"<style />",paraId:24,tocIndex:4},{value:":",paraId:24,tocIndex:4},{value:`// e.g. Real world path is much more complex
{
  "bAMbOo|Button": ["LItTlE", "READ_FROM_INLINE_STYLE"],
  "bAMbOo|Spin": ["liGHt", "READ_FROM_INLINE_STYLE"]
}
`,paraId:25,tocIndex:4},{value:"And for the style provided by CSS file (such as the usage of the official website), it will not be removed like ",paraId:26,tocIndex:4},{value:"<style />",paraId:26,tocIndex:4},{value:", we can directly mark it as from CSS file. Like inline style, they will be skipped in the ",paraId:26,tocIndex:4},{value:"useInsertionEffect",paraId:26,tocIndex:4},{value:" stage.",paraId:26,tocIndex:4},{value:`// e.g. Real world path is much more complex
{
  "bAMbOo|Button": ["LItTlE", "__FROM_CSS_FILE__"],
  "bAMbOo|Spin": ["liGHt", "__FROM_CSS_FILE__"]
}
`,paraId:27,tocIndex:4},{value:"CSS-in-JS has been criticized for its runtime performance loss. In Ant Design, if your application uses SSR, you can skip the stage of generating styles at runtime on the client side to improve performance. Of course, we will continue to follow up the development of CSS-in-JS to bring you a better experience.",paraId:28,tocIndex:5}]},951048:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"There are some common mistake when submitting an issue to the community for the first time, making it difficult for maintainers to help solve problems. Repost an old article, hoping helps for submit issue after laughing :)",paraId:0},{value:"Original link: ",paraId:1},{value:"How to submit a issue which never can be answered to open source projects",paraId:1},{value:"As a developer, I use and participate in many open source projects. In the open source community, questions and answers are the most interesting part. Some issue with fully communication and some others are not. There are many fascinating and useful commonalities in the way people ask questions. I've distilled them in the hope that they will help those like me who are curious and willing to go out of their way to annoy the maintainers of open source projects.",paraId:2},{value:"Here are thirteen tips on how to ask questions which never can be answered:",paraId:3},{value:"Compress the number of bytes in the question, so that the other party does not think you are long-winded. Use the simplest words to describe your problem, refine keywords, and simplify the lengthy process and tedious details.",paraId:4,tocIndex:0},{value:`Style compilation error
`,paraId:5,tocIndex:1},{value:`Import xxx.css into my project, and an error occurred during compilation. The error message is as follows:

Module build failed: SyntaxError: Unexpected token

I import it like this:

import 'xxx.css';

balalalala.....
`,paraId:6,tocIndex:2},{value:"If the maintainer answers you, usually they will ask for further information. Remember not to reply in a hurry, that will make you look like a workaholic (bubble by the computer all the time, waiting pitifully for a reply). You still have other lives, drink a cup of coffee and reply after ten days and a half months. Believe me, they will quickly lose patience and close the question, or get depressed because they can't close it for a while.",paraId:7,tocIndex:3},{value:`You: When using Button, I find that the console reports an error, and the prompt is as follows.
Maintainer (within 2 days): I can't reproduce your example, can you provide a reproducible example?
Maintainer (3 days later): @you
Maintainer (one week later): ping~
You (two weeks later): Whoops sorry for the late reply, here is my code.
`,paraId:8,tocIndex:4},{value:`You: When using Button, I find that the console reports an error, and the prompt is as follows.
Maintainer (within 2 days): I can't reproduce your example, can you provide a reproducible example?
You (in 2 days): Maybe my situation is a bit different, here is the reproduce code.
`,paraId:9,tocIndex:5},{value:"Introducing open source modules in a medium or large project is prone to strange problems. There are dozens of files and hundreds of business modules, and the project schedule is tight. It is too hard to check one by one. It is better to hire someone else, and quickly pack a package and send it to the other party.",paraId:10,tocIndex:6},{value:`I have a problem with the front-end component of my database project, here is my code, can anyone help me?
Attachment: db-service-app.rar (434MB)
`,paraId:11,tocIndex:7},{value:`There is a front-end component problem in my project, I simplified the code,
It is found that the xxx component and the yyy component are used at the same time. Here is a simple reproduction example.
Attachment: component-xxx-yyy-bug.zip (10KB)
`,paraId:12,tocIndex:8},{value:"Always hold back, don't finish the sentence at once, make your question full of mystery, and fully mobilize the reader's curiosity.",paraId:13,tocIndex:9},{value:`You: My code is wrong and I don't know what to do?
You: I have a problem here, can someone help me?
are u there?
`,paraId:14,tocIndex:10},{value:`You: I used the latest version of xxx just released, and the following error occurred in the console...
I call it like this...
My code repository is here...
`,paraId:15,tocIndex:11},{value:"Never, never format code. You are not an artist, and beautifying the format is not your specialty. Your energy should be used in project development, and you don't have time to learn formatting syntax. As for whether the other party can understand, you don't need to care.",paraId:16,tocIndex:12},{value:`renderBatchButton() {

return(



<Dropdown overlay={this. renderExportMenu("2")}>





export warehouse order

);

}


renderExportMenu(category) {

let exportFile=({key})=>{

console. log(key)

}

let items=[];

if(this.props.global.template_list){

items=this.props.global.template_list.map((item)=>{

if(category===item.category){

return <Menu.Item key={item.id}>{item.name}</Menu.Item>;

}

});

}
`,paraId:17,tocIndex:13},{value:`import { Menu } from 'antd';
import React from 'react';

const Demo: React.FC = () => {
  const [collapsed, setCollapsed] = useState<boolean>(false);

  const toggle = () => setCollapsed(!collapsed);

  return <Menu>...</Menu>;
};

export default Demo;
`,paraId:18,tocIndex:14},{value:"The project code always runs well at the beginning, but when you do a certain operation, or change some code, or in a special environment, a problem occurs. This difference is often the key point of the problem, just keep it in your mind and don't say it easily.",paraId:19,tocIndex:15},{value:`You: My code is wrong.
Maintainer: I have tried various methods but have not reproduced it, please provide the reproduction?
You (much later): Oh! I have this problem in chrome 35.
`,paraId:20,tocIndex:16},{value:`You: My code is wrong in chrome 35.
Maintainer: Ok, I reproduced it too, I'll see how to fix it.
`,paraId:21,tocIndex:17},{value:"Sometimes you need to do some misleading, intentionally or unintentionally, in short, making difficulties is your strong point",paraId:22,tocIndex:18},{value:`You: My code is wrong.
Maintainer: What version are you using?
You: 0.8.4 (actually 0.8.3 locally)
Maintainer: Are you sure, 0.8.4 should have fixed this issue. I'll take another look...
`,paraId:23,tocIndex:19},{value:`You: My code is broken in version 0.8.3.
Maintainer: 0.8.4 should have fixed this problem, and upgrading to the new version will solve it.
`,paraId:24,tocIndex:20},{value:"Open source projects cause bugs in your project, cause you to work overtime on Saturday night, make your missing the party and someone must be responsible. Your work and life are ruined by them, and don't make it easier for them.",paraId:25,tocIndex:21},{value:`This project sucks, it is full of pitfalls to use, and the documentation is too simple. It is really open source to do so.
`,paraId:26,tocIndex:22},{value:`This project has many details and the documentation is not perfect. Is there any improvement plan?
I have collected the following specific questions and hope to continue to improve them.
`,paraId:27,tocIndex:23},{value:"Try asking a question with an ambitious goal, and only those grandmotherly maintainers will try to answer you (which is unlikely to happen). And because you showed unpreparedness and extreme ignorance in all technical details, the other party's answer can't satisfy you.",paraId:28,tocIndex:24},{value:`How to package and release?
`,paraId:29,tocIndex:25},{value:`I want to develop a front-end single-page project, the back-end is php, and the architecture is completely separated from the front-end.
I have a problem when I try to use xxx to build a package... (50 words omitted) What should I do at this point?
`,paraId:30,tocIndex:26},{value:"The maintainers of many open source projects are arrogant, pedantic, freaks who like to set all kinds of rules. For example, they often provide weird question templates and ask you to fill in the blanks in a long and smelly form. Once you don't do what they say, they will see you as a troublemaker and judge you. How can you stand these constraints, write whatever you want, let them and their templates go to hell!",paraId:31,tocIndex:27},{value:"Call `xxx.close` not trigger popup close, please solve it\n",paraId:32,tocIndex:28},{value:`The popup of the xxx component is not closed

- Version used: 1.0.0
- Browser: Chrome 56.0987
- OS: Windows 10

## what have you done?

I introduced the component xxx, the code is as follows, I clicked on the component to open the popup, and did the following operations.

## What are you expecting?

Overlays should be turned off.

## What is the actual situation?

The popup closes briefly and then pops up again.

[GIF screenshot]

## Reproducible online demo

https://codesandbox.io/xxx
`,paraId:33,tocIndex:29},{value:"Repeat the questions you asked in different places to deepen the other party's impression and subvert the other party's imagination!",paraId:34,tocIndex:30},{value:"Question 1: An error is reported when sending a request: `405 Method not allowed`.\nQuestion 2: Hello, I have the problem of `405 Method not allowed` here.\nQuestion 3: Request 405 error, what should I do?\nQuestion n:...\n",paraId:35,tocIndex:31},{value:"Problem 1: An error is reported when sending a request: `405 Method not allowed`\nYou: +1 I had this problem too.\n",paraId:36,tocIndex:32},{value:"Even if you know that there is an official channel, it is recommended to ask the maintainer in other ways: Twitter, Facebook, private Email, personal blog, their friends and so on. go to all the places you can find him to ask questions.",paraId:37,tocIndex:33},{value:`Private message of unfollowed people: Hello, our project uses your framework, I would like to ask, can the xxx component get the focus? for keyboard switching
`,paraId:38,tocIndex:34},{value:`Official channel: Hello, our project uses your framework. I would like to ask, can the xxx component get the focus? for keyboard switching
`,paraId:39,tocIndex:35},{value:"Raise your question to a higher level, take the moral high ground and make accusations, making they unable to argue.",paraId:40,tocIndex:36},{value:`It turns out that the teams of big companies are like this, don\u2019t they test well? It\u2019s a shame to take this thing out, it\u2019s just a KPI product, and I don\u2019t care about it after the promotion.
`,paraId:41,tocIndex:37},{value:`Although this project is a product of a large company, it has disadvantages compared with competing products in the following aspects, and I personally do not recommend using it.
`,paraId:42,tocIndex:38},{value:"All in all, maintainers of open source projects always want to see problems happen when they try to answer and solve problems, ",paraId:43,tocIndex:39},{value:"don't let them succeed",paraId:43,tocIndex:39},{value:". Also, most of them have OCD about unclosed questions, try to create as many of them as possible.",paraId:43,tocIndex:39}]},24372:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"As a large component library, Ant Design has complex internal dependencies. Sometimes there is nothing change in antd, but the update of the internal dependencies may also cause the developer's build failure. For example, my recent mistake with ",paraId:0},{value:"path case error",paraId:0},{value:" made the build fail under Linux.",paraId:0},{value:"It's easier to find out the problem with the dependencies own by ourselves. But for third-party dependencies, it is often difficult to find out in the first time. Hours may have passed when developers report, making it somewhat difficult to find differences among hundreds of packages. We have accumulated some troubleshooting experience and will share it with you, but at the same time, in order to solve the problem faster, we have also done some extra things.",paraId:1},{value:"We have added a ",paraId:2,tocIndex:0},{value:"template site",paraId:2,tocIndex:0},{value:" for Github issue. Developers will see the following form when submitting issues, and developers will be asked to fill in the relevant information as completely as possible:",paraId:2,tocIndex:0},{value:"Most error problems can be combined to dig through antd version, React version, system, and browser version information which helps narrow the scope of troubleshooting as much as possible. Let's roughly determine if it's a general problem or a system-specific problem. Here we will not talk about component implementation bugs, but just talk about dependencies.",paraId:3,tocIndex:0},{value:"From the issue being discovered, we can reverse the time range through the commit CI of github:",paraId:4,tocIndex:1},{value:"Then through the issue description, you can determine the approximate package and which ones are related (for example ",paraId:5,tocIndex:1},{value:"#41236",paraId:5,tocIndex:1},{value:" from ",paraId:5,tocIndex:1},{value:"@rc-component/trigger",paraId:5,tocIndex:1},{value:", ",paraId:5,tocIndex:1},{value:"#15930",paraId:5,tocIndex:1},{value:" via ",paraId:5,tocIndex:1},{value:"@types/react",paraId:5,tocIndex:1},{value:"). Then check the version release status of the related package through npm:",paraId:5,tocIndex:1},{value:"When we find relevant updates, we will install the previous version for comparison to see if the build was successful. After checking one by one, we can determine which version the problem is, and we will also raise an issue for the corresponding Github (of course, if there is already one, just +1). At the same time, we also need to send a patch version to temporarily lock the corresponding version and remove it after the next update.",paraId:6,tocIndex:1},{value:"As you can see, the above troubleshooting method has a certain lag. We hope to reduce additional human labor by building regularly, and at the same time allow us to find problems faster. So we reused the ",paraId:7,tocIndex:2},{value:"create-next-app-antd",paraId:7,tocIndex:2},{value:" project as the base (in this way, if something goes wrong with the template project, we can also be detected in advance). Created a ",paraId:7,tocIndex:2},{value:"mock-project-build.yml",paraId:7,tocIndex:2},{value:" CI that executes every half hour, which periodically pulls ",paraId:7,tocIndex:2},{value:"create-next-app-antd",paraId:7,tocIndex:2},{value:" repo to build:",paraId:7,tocIndex:2},{value:`on:
  workflow_dispatch:
  schedule:
    - cron: '*/30 * * * *'
`,paraId:8,tocIndex:2},{value:"Pass ",paraId:9,tocIndex:2},{value:"--depth=1",paraId:9,tocIndex:2},{value:" to only pull the last commit. Then execute ",paraId:9,tocIndex:2},{value:"yarn",paraId:9,tocIndex:2},{value:" to install dependencies to generate the corresponding ",paraId:9,tocIndex:2},{value:"yarn.lock",paraId:9,tocIndex:2},{value:" file, and finally execute ",paraId:9,tocIndex:2},{value:"yarn build",paraId:9,tocIndex:2},{value:" to build to completely simulate the construction process of a project.",paraId:9,tocIndex:2},{value:"Every time the build is successful, CI will cache the current ",paraId:10,tocIndex:2},{value:"yarn.lock",paraId:10,tocIndex:2},{value:" file. In this way, if the next build fails, we can easily pull the two files for comparison to troubleshoot the problem. Although ",paraId:10,tocIndex:2},{value:"actions/cache",paraId:10,tocIndex:2},{value:" does not allow cache keys with the same name, it allows ",paraId:10,tocIndex:2},{value:"restore-keys",paraId:10,tocIndex:2},{value:" to get the latest cache, which is very convenient:",paraId:10,tocIndex:2},{value:`- uses: actions/cache@v3
  with:
    path: ~tmpProj/yarn.lock
    key: primes-\${{ runner.os }}-\${{ github.run_id }}
    restore-keys: mock-proj-lock-file
`,paraId:11,tocIndex:2},{value:"Then monitor the build failure event and compare the ",paraId:12,tocIndex:2},{value:"yarn.lock",paraId:12,tocIndex:2},{value:" file to quickly find out the changed dependencies:",paraId:12,tocIndex:2},{value:`- name: \u{1F3A8} Diff Report
  if: \${{ failure() }}
  run: npx diff-yarn-lock --source=~tmpProj/yarn.lock --target=~tmpProj/yarn.lock.failed
`,paraId:13,tocIndex:2},{value:"We also push messages to the developer group through the IM push protocol when failed, so we can identify the problem in the first place. The complete script can be viewed ",paraId:14,tocIndex:2},{value:"here",paraId:14,tocIndex:2},{value:".",paraId:14,tocIndex:2},{value:"We have been continuously optimizing the problems encountered in the maintenance process. If you have any good ideas or suggestions in use, you are welcome to put them in our issue or discussion. Have a nice day.",paraId:15,tocIndex:3}]},372935:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Recently we encountered an ",paraId:0},{value:"issue",paraId:0},{value:", saying that when ",paraId:0},{value:"contextHolder",paraId:0},{value:" of ",paraId:0},{value:"Modal.useModal",paraId:0},{value:" is placed in different positions, ",paraId:0},{value:"modal.confirm",paraId:0},{value:" popup location will be different:",paraId:0},{value:`import React from 'react';
import { Button, Modal } from 'antd';

export default () => {
  const [modal, contextHolder] = Modal.useModal();

  return (
    <div>
      <Modal open>
        <Button
          onClick={() => {
            modal.confirm({ title: 'Hello World' });
          }}
        >
          Confirm
        </Button>

        {/* \u{1F6A8} BUG when put here */}
        {contextHolder}
      </Modal>

      {/* \u2705 Work as expect when put here */}
      {/* {contextHolder} */}
    </div>
  );
};
`,paraId:1},{value:"Workable version:",paraId:2},{value:"Bug version:",paraId:3},{value:"From the figure above, we can see that when ",paraId:4},{value:"contextHolder",paraId:4},{value:" is placed inside ",paraId:4},{value:"Modal",paraId:4},{value:", the pop-up position of the hooks call is incorrect.",paraId:4},{value:"antd's Modal internal calls the ",paraId:5,tocIndex:0},{value:"rc-dialog",paraId:5,tocIndex:0},{value:" component library, which accepts a ",paraId:5,tocIndex:0},{value:"mousePosition",paraId:5,tocIndex:0},{value:" attribute to control the pop-up position(",paraId:5,tocIndex:0},{value:"Dialog/Content/index.tsx",paraId:5,tocIndex:0},{value:")\uFF1A",paraId:5,tocIndex:0},{value:`// pseudocode
const elementOffset = offset(dialogElement);
const transformOrigin = \`\${mousePosition.x - elementOffset.left}px \${
  mousePosition.y - elementOffset.top
}px\`;
`,paraId:6,tocIndex:0},{value:"The ",paraId:7,tocIndex:0},{value:"offset",paraId:7,tocIndex:0},{value:" method is used to obtain the coordinate position of the form itself(",paraId:7,tocIndex:0},{value:"util.ts",paraId:7,tocIndex:0},{value:")\uFF1A",paraId:7,tocIndex:0},{value:`// pseudocode
function offset(el: Element) {
  const { left, top } = el.getBoundingClientRect();
  return { left, top };
}
`,paraId:8,tocIndex:0},{value:"Through breakpoint debugging, we can find that the value of ",paraId:9,tocIndex:0},{value:"mousePosition",paraId:9,tocIndex:0},{value:" is correct, but the value of ",paraId:9,tocIndex:0},{value:"rect",paraId:9,tocIndex:0},{value:" obtained in ",paraId:9,tocIndex:0},{value:"offset",paraId:9,tocIndex:0},{value:" is wrong:",paraId:9,tocIndex:0},{value:`{
  "left": 0,
  "top": 0,
  "width": 0,
  "height": 0
}
`,paraId:10,tocIndex:0},{value:"This value obviously means that the form component has not been added to the DOM tree at the animation start node, so we need to check the logic added by Dialog.",paraId:11,tocIndex:0},{value:"rc-dialog",paraId:12,tocIndex:1},{value:" creates a node in the document through ",paraId:12,tocIndex:1},{value:"rc-portal",paraId:12,tocIndex:1},{value:", and then renders the component to this node through ",paraId:12,tocIndex:1},{value:"ReactDOM.createPortal",paraId:12,tocIndex:1},{value:". For the different positions of ",paraId:12,tocIndex:1},{value:"contextHolder",paraId:12,tocIndex:1},{value:" and different interactive, it can be speculated that there must be a problem with the timing of creating nodes in the document, so we can take a closer look at the part of adding nodes by default in ",paraId:12,tocIndex:1},{value:"rc-portal",paraId:12,tocIndex:1},{value:"(",paraId:12,tocIndex:1},{value:"useDom.tsx",paraId:12,tocIndex:1},{value:")\uFF1A",paraId:12,tocIndex:1},{value:`// pseudocode
function append() {
  // This is not real world code, just for explain
  document.body.appendChild(document.createElement('div'));
}

useLayoutEffect(() => {
  if (queueCreate) {
    queueCreate(append);
  } else {
    append();
  }
}, []);
`,paraId:13,tocIndex:1},{value:"Among them, ",paraId:14,tocIndex:1},{value:"queueCreate",paraId:14,tocIndex:1},{value:" is obtained through ",paraId:14,tocIndex:1},{value:"context",paraId:14,tocIndex:1},{value:", the purpose is to prevent the situation that the child element is created before the parent element under the nesting level:",paraId:14,tocIndex:1},{value:`<Modal title="Hello 1" open>
  <Modal title="Hello 2" open>
  <Modal>
<Modal>
`,paraId:15,tocIndex:1},{value:`<!-- Child \`useLayoutEffect\` is run before parent. Which makes inject dom before parent -->
<div data-title="Hello 2"></div>
<div data-title="Hello 1"></div>
`,paraId:16,tocIndex:1},{value:"Use ",paraId:17,tocIndex:1},{value:"queueCreate",paraId:17,tocIndex:1},{value:" to add the ",paraId:17,tocIndex:1},{value:"append",paraId:17,tocIndex:1},{value:" of the child element to the queue, and then use ",paraId:17,tocIndex:1},{value:"useLayoutEffect",paraId:17,tocIndex:1},{value:" to execute:",paraId:17,tocIndex:1},{value:`// pseudocode
const [queue, setQueue] = useState<VoidFunction[]>([]);

function queueCreate(appendFn: VoidFunction) {
  setQueue((origin) => {
    const newQueue = [appendFn, ...origin];
    return newQueue;
  });
}

useLayoutEffect(() => {
  if (queue.length) {
    queue.forEach((appendFn) => appendFn());
    setQueue([]);
  }
}, [queue]);
`,paraId:18,tocIndex:1},{value:"Due to the above queue operation, the dom of the portal will be triggered in the next ",paraId:19,tocIndex:2},{value:"useLayoutEffect",paraId:19,tocIndex:2},{value:" under nesting. This causes the ",paraId:19,tocIndex:2},{value:"uesLayoutEffect",paraId:19,tocIndex:2},{value:" timing of the animation to start in ",paraId:19,tocIndex:2},{value:"rc-dialog",paraId:19,tocIndex:2},{value:" after the node behavior is added, resulting in the element not being in the document and unable to obtain the correct coordinate information.",paraId:19,tocIndex:2},{value:"Since Modal is already enabled, it does not need to be executed asynchronously through ",paraId:20,tocIndex:2},{value:"queue",paraId:20,tocIndex:2},{value:", so we only need to add a judgment if it is enabled, and execute ",paraId:20,tocIndex:2},{value:"append",paraId:20,tocIndex:2},{value:" directly:",paraId:20,tocIndex:2},{value:`// pseudocode
const appendedRef = useRef(false);

const queueCreate = !appendedRef.current
  ? (appendFn: VoidFunction) => {
      // same code
    }
  : undefined;

function append() {
  // This is not real world code, just for explain
  document.body.appendChild(document.createElement('div'));
  appendedRef.current = true;
}

// ...

return <PortalContext value={queueCreate}>{children}</PortalContext>;
`,paraId:21,tocIndex:2},{value:"That's all.",paraId:22,tocIndex:2}]},89324:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In 5.10.0, we introduced a new feature to Notification, which allows eye-catching reminders that would otherwise fill the screen to be stacked together, bringing a touch of agility to the originally tense component:",paraId:0,tocIndex:0},{value:"We liked this new feature so much that we made it the default behavior for Notification after 5.10.0. This feature will bring about some changes in the look and feel. For example, the order of notifications in the expanded state changes from bottom-to-top to top-to-bottom. This is exactly the opposite of the previous default behavior, but it is the best under the new animation. order.",paraId:1,tocIndex:0},{value:"Of course, users can pass ",paraId:2,tocIndex:0},{value:"stack: false",paraId:2,tocIndex:0},{value:" to turn off this feature and return to the default behavior before 5.9.x. Please refer to our documentation for details.",paraId:2,tocIndex:0},{value:"In order to implement this feature, we have been coding for a long time, hoping to make all the details perfect. We can start with the demands.",paraId:3,tocIndex:1},{value:"The default trigger threshold for stacking is that ",paraId:4,tocIndex:1},{value:"more than three",paraId:4,tocIndex:1},{value:" Notifications appear at the same time, which means that when the fourth Notification appears, the entire Notification group will be in a collapsed state. This threshold can be adjusted via ",paraId:4,tocIndex:1},{value:"stack: { threshold: 3 }",paraId:4,tocIndex:1},{value:".",paraId:4,tocIndex:1},{value:"There are ",paraId:4,tocIndex:1},{value:"two",paraId:4,tocIndex:1},{value:" Notifications that are visible behind the folded state, and we added a frosted glass background to them to further dilute their existence. It is worth mentioning that we have also optimized this effect for dark mode. You can click button on the bottom-right to switch themes to give it a try.",paraId:4,tocIndex:1},{value:"All undisplayed Notifications do not disappear when collapsed. When you use the mouse to hover over the collapsed Notification group, all Notifications that have not been automatically closed will be expanded and arranged in order, and the duration of all Notifications will be refreshed.",paraId:4,tocIndex:1},{value:"The folding direction will be different under different ",paraId:4,tocIndex:1},{value:"placement",paraId:4,tocIndex:1},{value:", but it can only be divided into two types: upward or downward. The order of arrangement when expanded will also be from top to bottom or bottom to top.",paraId:4,tocIndex:1},{value:"You may find that as the Notification height changes, the message hidden behind it is always posted below the latest message, and there will be no cross-border situations. Yes, in the collapsed state, all message boxes are limited to the same height as the latest message, which will bring several benefits:",paraId:5,tocIndex:3},{value:"We don\u2019t have to worry about the message behind being exceeded if the height of the latest message is too small;",paraId:6,tocIndex:3},{value:"Just by giving a fixed offset, we can get the position and width of the two message boxes behind it, so as to get a smooth-looking animation effect.",paraId:6,tocIndex:3},{value:"Of course, it doesn't end as long as the heights are directly equal. Don't forget that our Notification supports expansion. When expanded, all message boxes should be restored to their original size, and the offset when expanded is calculated from the original height.",paraId:7,tocIndex:3},{value:"But the width and height have been modified, how do we restore it?",paraId:8,tocIndex:3},{value:"In order to implement this new feature, we added a new layer of ",paraId:9,tocIndex:3},{value:"div",paraId:9,tocIndex:3},{value:" outside the original message box as a container for the message box to bear the responsibility of size changes. The original message box only retains the content part to ensure that its height is not affected by the container. The width of the container is changed by ",paraId:9,tocIndex:3},{value:"scaleX",paraId:9,tocIndex:3},{value:", which avoids the situation where the width change causes the text to wrap to increase the height of the container. Under this layer of structure, we can not only get the correct content size, but also modify the size of the container at will without affecting the layout of the content, killing two birds with one stone.",paraId:9,tocIndex:3},{value:"In terms of positioning, we chose the simplest method, absolutely positioning all message boxes. When expanding, we calculate the height of each message box and accumulate its positioning offsets to achieve the current smooth animation effect.",paraId:10,tocIndex:4},{value:"If animation effects are not considered, there are other layout methods. For example, during the implementation process, we used flex layout to implement the order of expansion first, and then used negative ",paraId:11,tocIndex:4},{value:"margin",paraId:11,tocIndex:4},{value:" to achieve the stacking effect. This is also an idea, but in fact there will be some problems with the animation effect: when a new message appears, all the messages below will have an instant displacement to make way for the new message. This problem and some other positioning problems will be merged together and ultimately difficult to solve perfectly, so we finally adopted the simplest method - absolute positioning, and all offsets were calculated manually.",paraId:11,tocIndex:4},{value:"This new feature is an attempt by the antd team to improve the flexibility and fashion of components. We hope to bring you a better experience~",paraId:12,tocIndex:5},{value:"Because it is a new feature, if you encounter usage problems or bugs, please feel free to send an issue.",paraId:13,tocIndex:5},{value:"Finally, I hope you all like this smart Notification~",paraId:14,tocIndex:5}]},612882:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"For heavy components, some bug fixes or new features can easily destroy the original performance optimization inadvertently over time. Recently, we are refactoring the Table to troubleshoot and restore the performance loss caused by some historical updates. Here, we introduce some common troubleshooting method and frequently meet problems.",paraId:0},{value:"Before that, we recommend you to read the official ",paraId:1},{value:"Perf tool",paraId:1},{value:" to choose what you need.",paraId:1},{value:"In most cases, invalid rendering is not as dramatic as an un-optimized loop. However, in some scenarios such as large forms, tables, and lists, due to the large number of sub components, the performance impact of invalid rendering overlays is also terrible.",paraId:2,tocIndex:0},{value:"For example, in antd v4, in order to improve Table hover highlighting experience of ",paraId:3,tocIndex:0},{value:"rowSpan",paraId:3,tocIndex:0},{value:", we added an event listener for ",paraId:3,tocIndex:0},{value:"tr",paraId:3,tocIndex:0},{value:", and added an additional ",paraId:3,tocIndex:0},{value:"className",paraId:3,tocIndex:0},{value:" for the selected row in ",paraId:3,tocIndex:0},{value:"td",paraId:3,tocIndex:0},{value:" to support multiple row highlighting capability. However, because ",paraId:3,tocIndex:0},{value:"td",paraId:3,tocIndex:0},{value:" consumes ",paraId:3,tocIndex:0},{value:"hoverStartRow",paraId:3,tocIndex:0},{value:" and ",paraId:3,tocIndex:0},{value:"hoverEndRow",paraId:3,tocIndex:0},{value:" data in the context, non-related rows will ",paraId:3,tocIndex:0},{value:"re-render",paraId:3,tocIndex:0},{value:" due to changes of ",paraId:3,tocIndex:0},{value:"hoverStartRow",paraId:3,tocIndex:0},{value:" and ",paraId:3,tocIndex:0},{value:"hoverEndRow",paraId:3,tocIndex:0},{value:".",paraId:3,tocIndex:0},{value:"Problems like this are repeated in heavy components, so we need some helper way to determine the number of renders. In the latest ",paraId:4,tocIndex:0},{value:"rc-table",paraId:4,tocIndex:0},{value:", we encapsulate a ",paraId:4,tocIndex:0},{value:"useRenderTimes",paraId:4,tocIndex:0},{value:" method. It will mark the monitored rendering times on React Dev Tools through React's ",paraId:4,tocIndex:0},{value:"useDebugValue",paraId:4,tocIndex:0},{value:" in development mode:",paraId:4,tocIndex:0},{value:`// Sample Code, please view real world code if needed
import React from 'react';

function useRenderTimes<T>(props: T) {
  // Render times
  const timesRef = React.useRef(0);
  timesRef.current += 1;

  // Cache for prev props
  const cacheProps = React.useRef(props);
  const changedPropKeys = getDiff(props, cacheProps.current); // Some compare logic

  React.useDebugValue(timesRef.current);
  React.useDebugValue(changedPropKeys);

  cacheProps.current = props;
}

export default process.env.NODE_ENV !== 'production' ? useRenderTimes : () => {};
`,paraId:5,tocIndex:0},{value:"Generally on the root node of the component, we will create a Context based on ",paraId:6,tocIndex:2},{value:"props",paraId:6,tocIndex:2},{value:" and ",paraId:6,tocIndex:2},{value:"state",paraId:6,tocIndex:2},{value:" to pass the aggregated data down. But in some cases, the actual content of the Context may not change and trigger the re-render of the child component:",paraId:6,tocIndex:2},{value:`// pseudocode
const MyContext = React.createContext<{ prop1: string; prop2: string }>();

const Child = React.memo(() => {
  const { prop1 } = React.useContext(MyContext);
  return <>{prop1}</>;
});

const Root = ({ prop1, prop2 }) => {
  const [count, setCount] = React.useState(0);

  // Some logic to trigger rerender
  React.useEffect(() => {
    setCount(1);
  }, []);

  return (
    <MyContext.Provider value={{ prop1, prop2 }}>
      <Child />
    </MyContext.Provider>
  );
};
`,paraId:7,tocIndex:2},{value:"In the example, although ",paraId:8,tocIndex:2},{value:"prop1",paraId:8,tocIndex:2},{value:" and ",paraId:8,tocIndex:2},{value:"prop2",paraId:8,tocIndex:2},{value:" have not changed, it is obvious that ",paraId:8,tocIndex:2},{value:"value",paraId:8,tocIndex:2},{value:" in MyContext is a new object, causing the child component to re-render even if ",paraId:8,tocIndex:2},{value:"prop1",paraId:8,tocIndex:2},{value:" has not changed. So we need to Memo the Context ",paraId:8,tocIndex:2},{value:"value",paraId:8,tocIndex:2},{value:":",paraId:8,tocIndex:2},{value:`// pseudocode
const context = React.useMemo(() => ({ prop1, prop2 }), [prop1, prop2]);

return (
  <MyContext.Provider value={context}>
    <Child />
  </MyContext.Provider>
);
`,paraId:9,tocIndex:2},{value:"Note: You can configure eslint ",paraId:10,tocIndex:2},{value:"rules",paraId:10,tocIndex:2},{value:" to avoid this case.",paraId:10,tocIndex:2},{value:"Also, refer to the example above. If we put both ",paraId:11,tocIndex:3},{value:"prop1",paraId:11,tocIndex:3},{value:" and ",paraId:11,tocIndex:3},{value:"prop2",paraId:11,tocIndex:3},{value:" in the Context, then even if ",paraId:11,tocIndex:3},{value:"prop1",paraId:11,tocIndex:3},{value:" does not change, ",paraId:11,tocIndex:3},{value:"prop2",paraId:11,tocIndex:3},{value:" changes will cause the child component to re-render. Therefore, we can split the Context into several according to the function, thereby reducing the scope of influence:",paraId:11,tocIndex:3},{value:`// pseudocode
const MyContext1 = React.createContext<{ prop1: string }>();
const MyContext2 = React.createContext<{ prop2: string }>();

// Child
const { prop1 } = React.useContext(MyContext1);

// Root
<MyContext1.Provider value={context1}>
  <MyContext2.Provider value={context2}>
    <Child />
  </MyContext2.Provider>
</MyContext1.Provider>;
`,paraId:12,tocIndex:3},{value:"In ",paraId:13,tocIndex:3},{value:"rc-table",paraId:13,tocIndex:3},{value:", we split it into multiple to optimize rendering performance:",paraId:13,tocIndex:3},{value:"BodyContext",paraId:14,tocIndex:3},{value:"ExpandedRowContext",paraId:14,tocIndex:3},{value:"HoverContext",paraId:14,tocIndex:3},{value:"PerfContext",paraId:14,tocIndex:3},{value:"ResizeContext",paraId:14,tocIndex:3},{value:"StickyContext",paraId:14,tocIndex:3},{value:"TableContext",paraId:14,tocIndex:3},{value:"If you have used Redux, then you may be familiar with ",paraId:15,tocIndex:4},{value:"useSelector",paraId:15,tocIndex:4},{value:", which only rerender when the data that needs to be consumed changes. In React, there is also a related RFC(",paraId:15,tocIndex:4},{value:"#118",paraId:15,tocIndex:4},{value:")(",paraId:15,tocIndex:4},{value:"#119",paraId:15,tocIndex:4},{value:") about ",paraId:15,tocIndex:4},{value:"useContextSelector",paraId:15,tocIndex:4},{value:", which will also be implemented in React 18 in the future:",paraId:15,tocIndex:4},{value:"Before the API is officially launched, there are many third-party libraries implement (of course, you can also use redux directly). It is no longer necessary to consider the problem of function splitting Context through ",paraId:16,tocIndex:4},{value:"useContextSelector",paraId:16,tocIndex:4},{value:", which also reduces the mental burden of developers:",paraId:16,tocIndex:4},{value:`// pseudocode
const Child = React.memo(() => {
  const prop1 = useContextSelector(MyContext, (context) => context.prop1);
  return <>{prop1}</>;
});
`,paraId:17,tocIndex:4},{value:"After optimizing in various ways, we still have to face a problem. If some rendering needs to pass through the external render method, and it happens that the method uses a closure. Then ",paraId:18,tocIndex:5},{value:"React.memo",paraId:18,tocIndex:5},{value:" is unaware:",paraId:18,tocIndex:5},{value:`// pseudocode
import React from 'react';

const MyComponent = React.memo(({ valueRender }: { valueRender: () => React.ReactElement }) =>
  valueRender(),
);

const App = () => {
  const countRef = React.useRef(0);
  const [, forceUpdate] = React.useState({});

  React.useEffect(() => {
    countRef.current += 1;
    forceUpdate({});
  }, []);

  // In real world, class component often meet this by \`this.state\`
  const valueRender = React.useCallback(() => countRef.current, []);

  return <MyComponent valueRender={valueRender} />;
};
`,paraId:19,tocIndex:5},{value:"Due to the existence of closures, we cannot determine whether the final dom has changed before calling the ",paraId:20,tocIndex:5},{value:"render",paraId:20,tocIndex:5},{value:" method, which is why we optimized the Table through memo in the early days of antd v4 and removed some of it over time (Actually, Table still has some scenarios where this problem needs to be solved).",paraId:20,tocIndex:5},{value:"Considering that Table provides ",paraId:21,tocIndex:5},{value:"shouldCellUpdate",paraId:21,tocIndex:5},{value:" method, we plan to adjust Table rendering logic in the future. When the Parent node renders, the Table will be completely re-rendered, and when the Table is updated internally (such as horizontal scrolling position synchronization), it will hit the cache and skip.",paraId:21,tocIndex:5},{value:"antd Table optimization is still in progress, and we will continue to pay attention to new features of React and new ideas from the community. If you have any ideas, welcome to discuss on Github. In addition, for the suggestion of self-developed components, we recommend that after each optimization, a corresponding test case should be created, and the source issue should be noted for future retrospection. That's all. Thank you for reading.",paraId:22,tocIndex:6}]},521675:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"We know that React 18 provides a ",paraId:0},{value:"useInsertionEffect",paraId:0},{value:" hooks specifically for CSS-IN-JS, which has a faster timing priority than ",paraId:0},{value:"useLayoutEffect",paraId:0},{value:", so that the order of calls will not be affected by the order of writing:",paraId:0},{value:`useLayoutEffect(() => {
  console.log('layout effect');
}, []);

useInsertionEffect(() => {
  console.log('insertion effect');
}, []);

// Console:
// - insertion effect
// - layout effect
`,paraId:1},{value:"In early ",paraId:2},{value:"@ant-design/cssinjs",paraId:2},{value:" implementation, we did not choose ",paraId:2},{value:"useInsertionEffect",paraId:2},{value:" because we needed to be compatible with React 17 version, but simulated the effect of inserting in advance by adding styles in the render phase:",paraId:2},{value:`// pseudocode. Not used in real world
function useStyleInsertion(hash: string, counter: Record<string, number>) {
  useMemo(() => {
    if (!counter[hash]) {
      // Insert only when current style not inserted
    }

    counter[hash] += 1;
  }, [hash]);

  useEffect(
    () => () => {
      counter[hash] -= 1;

      if (!counter[hash]) {
        // Remove if set to clear on destroy
      }
    },
    [hash],
  );
}
`,paraId:3},{value:"Above code will count the usage of styles, if the current style has not been inserted, it will insert the style in the render phase. Similarly, if the current style is configured to be unloaded when it is not in use, it will be cleared after the effect confirms the count. In addition, there is a similar logic that listens for changes in tokens, and when there are multiple tokens, it will clear all styles ",paraId:4},{value:"<style />",paraId:4},{value:" corresponding to tokens that are no longer in use to avoid memory leaks caused by too many theme switches.",paraId:4},{value:"These code can run perfectly in React 17, and also run very well in React 18's StrictMode. ",paraId:5},{value:"counter",paraId:5},{value:" always appears and disappears in pairs. But under Suspense, it may have problems.",paraId:5},{value:"The StrictMode of React 18 is different from ",paraId:6,tocIndex:0},{value:"React 17",paraId:6,tocIndex:0},{value:" in that it will be called multiple times in each phase to ensure that developers clean up the Effect:",paraId:6,tocIndex:0},{value:`
\`\`\`tsx
const My = () => {
  console.log('render');

  useMemo(() => {
    console.log('memo');
  }, []);

  useEffect(() => {
    console.log('effect');

    return () => {
      console.log('effect cleanup');
    };
  }, []);
};

<StrictMode>
  <My />
</StrictMode>;

// Console:
// - render
// - memo
// - render
// - memo
// - effect
// - effect cleanup
// - effect
`,paraId:7,tocIndex:0},{value:"With above sample, we can know that ",paraId:8,tocIndex:0},{value:"counter",paraId:8,tocIndex:0},{value:" in StrictMode will be accumulated, but the final value will be correct (that is, each component will only be counted once):",paraId:8,tocIndex:0},{value:"memo: 1",paraId:9,tocIndex:0},{value:"memo: 2",paraId:9,tocIndex:0},{value:"effect cleanup: 1",paraId:9,tocIndex:0},{value:"But StrictMode is just a simulation of Suspense. In the real scenario, the number of executions is not guaranteed to appear in pairs.",paraId:10,tocIndex:0},{value:"We use ",paraId:11,tocIndex:1},{value:"umi",paraId:11,tocIndex:1},{value:" for site development, which is split by page and loaded on demand by default. Display the loading state during the loading process through Suspense:",paraId:11,tocIndex:1},{value:`<BrowserRoutes>
  <Routs>
    <Suspense fallback={<Loading />} />
  </Routs>
</BrowserRoutes>
`,paraId:12,tocIndex:1},{value:"When switching pages, there is a chance that some styles will be lost when the page is switched back and forth:",paraId:13,tocIndex:1},{value:"Part of the style lost in Page 1 is the style unique to Page 1 (some tokens are customized through ConfigProvider), and the style of Page 2 is the style common to Page 1 and Page 2.",paraId:14,tocIndex:1},{value:"With the style management logic we introduced at the beginning, Page 1 will be cleared all styles ",paraId:15,tocIndex:1},{value:"<style />",paraId:15,tocIndex:1},{value:" corresponding to the token when Page 2 is rendered because it has styles corresponding to the independent token. This looks as expected, so the problem is that the style is not re-inserted when switching back to Page 1.",paraId:15,tocIndex:1},{value:"With a series of breakpoints, we found that this problem is caused by the asynchronous nature of Suspense. It will call the component multiple times during the loading process, so the timing of the component style registration will also be called multiple times. And since our counter is in the render phase, the counter will be called multiple times under Suspense, which will cause the value of the counter to be incorrect:",paraId:16,tocIndex:2},{value:"render: 0",paraId:17,tocIndex:2},{value:"useMemo: 1",paraId:17,tocIndex:2},{value:"render: 1",paraId:17,tocIndex:2},{value:"useMemo: 2",paraId:17,tocIndex:2},{value:"effect: 2",paraId:17,tocIndex:2},{value:"Not like StrictMode, effect is not executed again, so effect cleanup will not be executed",paraId:17,tocIndex:2},{value:"Counter is not synchronized, so the token manager thinks that the style is no longer in use, so it performs batch cleaning, while the component style manager thinks that other components are still in use, so when re-entering Page 1, the style will not be re-inserted.",paraId:18,tocIndex:2},{value:"Obviously, due to its characteristics, we cannot use ",paraId:19,tocIndex:3},{value:"useMemo",paraId:19,tocIndex:3},{value:" as a counter, it will not appear in pairs with ",paraId:19,tocIndex:3},{value:"useEffect",paraId:19,tocIndex:3},{value:". So we consider using ",paraId:19,tocIndex:3},{value:"useInsertionEffect",paraId:19,tocIndex:3},{value:" to insert styles:",paraId:19,tocIndex:3},{value:`// pseudocode. Not used in real world
useInsertionEffect(() => {
  if (!counter[hash]) {
    // Insert only when current style not inserted
  }
  counter[hash] += 1;

  return () => {
    counter[hash] -= 1;

    if (!counter[hash]) {
      // Remove if set to clear on destroy
    }
  };
}, [hash]);
`,paraId:20,tocIndex:3},{value:"And for React 17 version, it is downgraded to ",paraId:21,tocIndex:3},{value:"useLayoutEffect",paraId:21,tocIndex:3},{value:":",paraId:21,tocIndex:3},{value:`const useMergedInsertionEffect = useInsertionEffect || useLayoutEffect;

useMergedInsertionEffect(() => {
  // Same as above
}, [hash]);
`,paraId:22,tocIndex:3},{value:"With this modification, we found that React 17's CI was failed. After checking, we found that ",paraId:23,tocIndex:3},{value:"useLayoutEffect",paraId:23,tocIndex:3},{value:" will have a timing problem:",paraId:23,tocIndex:3},{value:`// Some logic measure dom size
useLayoutEffect(() => {
  // This is not correct since style is not applied
  const { clientHeight } = nodeRef.current;
}, []);

// Inject style
useLayoutEffect(() => {
  // ...
}, [hash]);
`,paraId:24,tocIndex:3},{value:"Measure logic in ",paraId:25,tocIndex:3},{value:"useLayoutEffect",paraId:25,tocIndex:3},{value:" is executed before injecting style, resulting in incorrect size information. It can also be predicted that this will have an impact on developers. So we have to compromise, and in React 17 version, it will be downgraded to the original ",paraId:25,tocIndex:3},{value:"useMemo",paraId:25,tocIndex:3},{value:" insertion.",paraId:25,tocIndex:3},{value:"With the above solution, ",paraId:26,tocIndex:4},{value:"useInsertionEffect",paraId:26,tocIndex:4},{value:" perfectly solve the rendering problem. But in React 17 and below versions, we still insert styles in the render phase, but we will increase the reference count in the effect phase. But this brings a new problem, let's look at a piece of code (",paraId:26,tocIndex:4},{value:"CodeSandbox",paraId:26,tocIndex:4},{value:"):",paraId:26,tocIndex:4},{value:`import React from 'react';

const A = () => {
  React.useMemo(() => {
    console.log('A render');
  }, []);

  React.useEffect(() => {
    console.log('A mounted');
    return () => {
      console.log('A unmounted');
    };
  }, []);

  return <div>A</div>;
};

const B = () => {
  React.useMemo(() => {
    console.log('B render');
  }, []);

  React.useEffect(() => {
    console.log('B mounted');
    return () => {
      console.log('B unmounted');
    };
  }, []);

  return <div>B</div>;
};

export default function App() {
  const [show, setShow] = React.useState(true);

  const toggle = () => {
    setShow((prev) => !prev);
  };

  return (
    <div>
      <button onClick={toggle}>toggle</button>
      <div>{show ? <A /> : <B />}</div>
    </div>
  );
}
`,paraId:27,tocIndex:4},{value:"In this code (strict mode), clicking the button will switch the rendering of A and B. So what will the order of console be when switching from A to B? The answer is:",paraId:28,tocIndex:4},{value:`B render
B render
A unmounted
B mounted
B unmounted
B mounted
`,paraId:29,tocIndex:4},{value:"We can see that the rendering of the new component is before the unmount callback of the old component. Remember the processing logic of ",paraId:30,tocIndex:4},{value:"cssinjs",paraId:30,tocIndex:4},{value:" in React 17? Let's mark it:",paraId:30,tocIndex:4},{value:`B render      // Write to cache and insert style tag
B render      // Write to cache and insert style tag
A unmounted   // **Reference count--** (Reference count changed from 1 to 0, so the style was unloaded)
B mounted     // Reference count++ (Reference count changed from 0 to 1, but the style was inserted before unloaded)
B unmounted   // Reference count--
B mounted     // Reference count++
`,paraId:31,tocIndex:4},{value:"We finally find out that due to reference count is not updated in time, the style was unloaded, which in not as expected.",paraId:32,tocIndex:4},{value:"And the solution is simple: when the count changes from 0 to 1, style will be inserted again.",paraId:33,tocIndex:4},{value:"Suspense brings rendering performance improvements, but it also makes timing very important. It is not the best way to only 'work on' StrictMode. Different logic is used for different React versions is not good choice since it will have timing problem. ",paraId:34,tocIndex:5},{value:"render",paraId:34,tocIndex:5},{value:" will trigger from parent node to child node in turn, while ",paraId:34,tocIndex:5},{value:"useInsertionEffect",paraId:34,tocIndex:5},{value:" is the opposite. However, from the perspective of antd, the component styles are independent of each other, so this problem will not affect us.",paraId:34,tocIndex:5}]},391115:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Hello, I am ",paraId:0},{value:"@li-jia-nan",paraId:0},{value:". It is also a new Collaborator who joined antd in the past few months. Fortunately, as one of the Collaborators, I developed the ",paraId:0},{value:"FloatButton component",paraId:1},{value:" and ",paraId:0},{value:"QRCode component",paraId:2},{value:", as well as some other maintenance work. Let me share the migration of the antd test library son~",paraId:0},{value:"In ",paraId:3,tocIndex:0},{value:"antd@4.x",paraId:3,tocIndex:0},{value:", ",paraId:3,tocIndex:0},{value:"enzyme",paraId:3,tocIndex:0},{value:" is used as the test framework. However, due to the lack of maintenance of enzyme, it is difficult to support it in the React 18 era . Therefore, I had to start a long ",paraId:3,tocIndex:0},{value:"@testing-lib",paraId:3,tocIndex:0},{value:" migration road for antd.",paraId:3,tocIndex:0},{value:"During the migration process, I undertook about a quarter of the workload of antd. Here I mainly record the problems encountered during the migration process.",paraId:4,tocIndex:0},{value:"Thanks for the time ",paraId:5,tocIndex:0},{value:"@zombieJ",paraId:5,tocIndex:0},{value:" ",paraId:5,tocIndex:0},{value:"@MadCcc",paraId:5,tocIndex:0},{value:" ",paraId:5,tocIndex:0},{value:"@miracles1919",paraId:5,tocIndex:0},{value:" for help.",paraId:5,tocIndex:0},{value:"Before migrating, we need to figure out what the purpose of the migration is. In ",paraId:6,tocIndex:1},{value:"enzyme",paraId:6,tocIndex:1},{value:', most scenarios are to test whether the state in the component is correct, or whether the static properties on the class are assigned normally, which is actually unreasonable, because we need to care more about whether the "function" is normal , rather than whether the "attribute" is correct, because the source code is a black box for the user, and the user only cares about whether the component is correct.',paraId:6,tocIndex:1},{value:'Basically, test cases should be written based on "behavior", not "implementation" (this is also the goal of ',paraId:7,tocIndex:1},{value:"testing-library",paraId:7,tocIndex:1},{value:"). In principle, several use cases were found to be redundant (because some functions would not be triggered individually in real code), and their removal did not affect the test coverage.",paraId:7,tocIndex:1},{value:"Of course, this is only one of the reasons to drop ",paraId:8,tocIndex:1},{value:"enzyme",paraId:8,tocIndex:1},{value:". More importantly it is unmaintained and does not support React 18 anymore.",paraId:8,tocIndex:1},{value:"enzyme",paraId:9,tocIndex:3},{value:" supports rendering in three ways:",paraId:9,tocIndex:3},{value:"shallow: Shallow rendering, which is an encapsulation of the official Shallow Renderer. Render the component into a virtual DOM object. The component obtained through Shallow Render will not have a part asserted to the sub-component, and the information of the component can be accessed using jQuery.",paraId:10,tocIndex:3},{value:"render: Static rendering, which renders the React component into a static HTML string, then parses the string, and returns an instance object, which can be used to analyze the html structure of the component.",paraId:11,tocIndex:3},{value:"mount: Fully rendered, it loads component rendering into a real DOM node to test the interaction of DOM API and the life cycle of components, and uses jsdom to simulate the browser environment.",paraId:12,tocIndex:3},{value:"In order to be close to the real scene of the browser, ",paraId:13,tocIndex:3},{value:"antd@4.x",paraId:13,tocIndex:3},{value:" uses ",paraId:13,tocIndex:3},{value:"mount",paraId:13,tocIndex:3},{value:" for rendering, and the corresponding ",paraId:13,tocIndex:3},{value:"render",paraId:13,tocIndex:3},{value:" method in ",paraId:13,tocIndex:3},{value:"@testing-library",paraId:13,tocIndex:3},{value:":",paraId:13,tocIndex:3},{value:`--  import { mount } from 'enzyme';
++  import { render } from '@testing-library/react';

--  const wrapper = mount(
++  const { container } = render(
      <ConfigProvider getPopupContainer={getPopupContainer}>
        <Slider />
      </ConfigProvider>,
    );
`,paraId:14,tocIndex:3},{value:"enzyme",paraId:15,tocIndex:4},{value:" provides ",paraId:15,tocIndex:4},{value:"simulate(event)",paraId:15,tocIndex:4},{value:" method to simulate event triggering and user interaction, ",paraId:15,tocIndex:4},{value:"event",paraId:15,tocIndex:4},{value:" is the name of the event, and the corresponding ",paraId:15,tocIndex:4},{value:"fireEvent",paraId:15,tocIndex:4},{value:" method in ",paraId:15,tocIndex:4},{value:"@testing-library",paraId:15,tocIndex:4},{value:":",paraId:15,tocIndex:4},{value:`++  import { fireEvent } from '@testing-library/react';

--  wrapper.find('.ant-handle').simulate('click');
++  fireEvent.click(container.querySelector('.ant-handle'));
`,paraId:16,tocIndex:4},{value:"In ",paraId:17,tocIndex:5},{value:"enzyme",paraId:17,tocIndex:5},{value:", some built-in APIs are provided to manipulate dom, or find components:",paraId:17,tocIndex:5},{value:"instance(): Returns an instance of the test component",paraId:18,tocIndex:5},{value:"at(index): returns a rendered object",paraId:18,tocIndex:5},{value:"text(): Returns the text content of the current component",paraId:18,tocIndex:5},{value:"html(): Returns the HTML code form of the current component",paraId:18,tocIndex:5},{value:"props(): Returns all properties of the component",paraId:18,tocIndex:5},{value:"prop(key): Returns the specified property of the component",paraId:18,tocIndex:5},{value:"state(): Returns the state of the component",paraId:18,tocIndex:5},{value:"setState(nextState): Set the state of the component",paraId:18,tocIndex:5},{value:"setProps(nextProps): Set the properties of the component",paraId:18,tocIndex:5},{value:"find(selector): Find the node according to the selector, the selector can be the selector in CSS, or the constructor of the component, and the displayName of the component, etc.",paraId:18,tocIndex:5},{value:"In ",paraId:19,tocIndex:5},{value:"testing-library",paraId:19,tocIndex:5},{value:", these APIs are not provided (as mentioned above - ",paraId:19,tocIndex:5},{value:"testing-library",paraId:19,tocIndex:5},{value:" focuses more on behavioral testing), so it needs to be replaced by native dom operations:",paraId:19,tocIndex:5},{value:`    expect(ref.current.getPopupDomNode()).toBe(null);
--  popover.find('span').simulate('click');
--  expect(popover.find('Trigger PopupInner').props().visible).toBeTruthy();

++  expect(container.querySelector('.ant-popover-inner-content')).toBeFalsy();
++  fireEvent.click(popover.container.querySelector('span'));
++  expect(container.querySelector('.ant-popover-inner-content')).toBeTruthy();
`,paraId:20,tocIndex:5},{value:"While the major version is being upgraded, some components are discarded, but they are not removed in antd. For example, the BackTop component needs to add warning to the component to ensure compatibility, so it is also necessary to write a special unit test for warning:",paraId:21,tocIndex:6},{value:`    describe('BackTop', () => {
++    it('should console Error', () => {
++        const errSpy = jest.spyOn(console, 'error').mockImplementation(() => {});
++        render(<BackTop />);
++        expect(errSpy).toHaveBeenCalledWith(
++          'Warning: [antd: BackTop] \`BackTop\` is deprecated. Please use \`FloatButton.BackTop\` instead.',
++        );
++      errSpy.mockRestore();
++    });
    });
`,paraId:22,tocIndex:6},{value:"During the conversion process, I discovered a magical phenomenon. In some cases, the DOM snapshot generated by the same case will be different, so I began to explore what has changed in React 18:",paraId:23,tocIndex:7},{value:"In the past, the ",paraId:24,tocIndex:7},{value:"snapshot",paraId:24,tocIndex:7},{value:" comparison of ",paraId:24,tocIndex:7},{value:"enzyme",paraId:24,tocIndex:7},{value:" was to convert the ",paraId:24,tocIndex:7},{value:"enzyme object",paraId:24,tocIndex:7},{value:" into a serialized object through the ",paraId:24,tocIndex:7},{value:"enzyme-to-json",paraId:24,tocIndex:7},{value:" plugin:",paraId:24,tocIndex:7},{value:`// jest.config.js
module.exports = {
  // ...
  snapshotSerializers: ['enzyme-to-json/serializer'],
};
`,paraId:25,tocIndex:7},{value:"When it comes to ",paraId:26,tocIndex:7},{value:"@testing-library/react",paraId:26,tocIndex:7},{value:", directly call ",paraId:26,tocIndex:7},{value:"render",paraId:26,tocIndex:7},{value:" to generate dom elements, and then compare the dom:",paraId:26,tocIndex:7},{value:`--  import { mount } from 'enzyme';
++  import { render } from '@testing-library/react';

    describe('xxx', () => {
      it('yyy', () => {
--      const wrapper = mount(<Demo />);
++      const { container } = render(<Demo />);
--      expect(wrapper.render()).toMatchSnapshot();
++      expect(container.firstChild).toMatchSnapshot();
      });
    });

`,paraId:27,tocIndex:7},{value:"Interestingly, in some test cases. It will hang, the difference is that React 18 sometimes has fewer blank lines:",paraId:28,tocIndex:7},{value:`    <div>
--
      Hello World
    </div>
`,paraId:29,tocIndex:7},{value:"After testing ",paraId:30,tocIndex:7},{value:"innerHTML",paraId:30,tocIndex:7},{value:" of dom, it is found that 17 and 18 are the same. So at the beginning of the problem, we simply changed the test case to compare ",paraId:30,tocIndex:7},{value:"innerHTML",paraId:30,tocIndex:7},{value:":",paraId:30,tocIndex:7},{value:`expect(container.querySelector('.className').innerHTML).toMatchSnapshot();
`,paraId:31,tocIndex:7},{value:"However, as you migrate more, you will gradually see this happening over and over again. Comparing ",paraId:32,tocIndex:7},{value:"innerHTML",paraId:32,tocIndex:7},{value:" is also not a long-term solution. So began to explore why this happens.",paraId:32,tocIndex:7},{value:"pretty-format",paraId:33,tocIndex:8},{value:" is an interesting library that converts any object into a string. One of its uses is for snapshot comparison of jest. One of its features is that conversion rules can be customized.",paraId:33,tocIndex:8},{value:"Compared with ",paraId:34,tocIndex:8},{value:"snapshot",paraId:34,tocIndex:8},{value:" in ",paraId:34,tocIndex:8},{value:"jest",paraId:34,tocIndex:8},{value:", ",paraId:34,tocIndex:8},{value:"format",paraId:34,tocIndex:8},{value:" will be done first, for common objects such as native ",paraId:34,tocIndex:8},{value:"dom",paraId:34,tocIndex:8},{value:", ",paraId:34,tocIndex:8},{value:"object",paraId:34,tocIndex:8},{value:". It has built-in a set of ",paraId:34,tocIndex:8},{value:"plugins",paraId:34,tocIndex:8},{value:" for format conversion:",paraId:34,tocIndex:8},{value:`<div>
  <span>Hello</span>
  <p>World</p>
</div>
\u2193
<div>
  <span> Hello </span>
  <p>World</p>
</div>
`,paraId:35,tocIndex:8},{value:"The first reaction to the appearance of extra spaces is whether it is because the version of ",paraId:36,tocIndex:8},{value:"@testing-lib/react",paraId:36,tocIndex:8},{value:" introduced by 17 & 18 is different, which affects the version of ",paraId:36,tocIndex:8},{value:"pretty-format",paraId:36,tocIndex:8},{value:" that ",paraId:36,tocIndex:8},{value:"jest",paraId:36,tocIndex:8},{value:" depends on. After checking, they are all consistent:",paraId:36,tocIndex:8},{value:`{
  "devDependencies": {
    "pretty-format": "^29.0.0",
    "@testing-library/react": "^13.0.0"
  }
}
`,paraId:37,tocIndex:8},{value:"After this judgment is wrong, it is another situation. There is an ",paraId:38,tocIndex:8},{value:"empty element",paraId:38,tocIndex:8},{value:" in the dom, which makes ",paraId:38,tocIndex:8},{value:"pretty-format",paraId:38,tocIndex:8},{value:" perceptible, but it does not affect ",paraId:38,tocIndex:8},{value:"innerHTML",paraId:38,tocIndex:8},{value:", so I wrote a simple test case:",paraId:38,tocIndex:8},{value:`const holder = document.createElement('div');
holder.append('');
holder.append(document.createElement('a'));
expect(holder).toMatchSnapshot();
console.log(holder.innerHTML);
`,paraId:39,tocIndex:8},{value:"and get the following output:",paraId:40,tocIndex:8},{value:`// snapshot
exports[\`debug exports modules correctly 1\`] = \`
<div>

  <a />
</div>
\`;

// console.log
<a></a>
`,paraId:41,tocIndex:8},{value:"Consistent with the idea, then it is very simple. Then there is a high probability that the ",paraId:42,tocIndex:8},{value:"render",paraId:42,tocIndex:8},{value:" of ",paraId:42,tocIndex:8},{value:"React 18",paraId:42,tocIndex:8},{value:" will ignore empty elements. Let's do a simple experiment:",paraId:42,tocIndex:8},{value:`import React, { useEffect, useRef, version } from 'react';

const App: React.FC = () => {
  const holderRef = useRef<HTMLDivElement>(null);
  useEffect(() => {
    console.log(holderRef.current?.childNodes);
  }, []);
  return (
    <div ref={holderRef}>
      <p>{version}</p>
    </div>
  );
};

export default App;
`,paraId:43,tocIndex:8},{value:"as predicted:",paraId:44,tocIndex:8},{value:"React 17",paraId:45,tocIndex:8},{value:"React 18",paraId:45,tocIndex:8},{value:"NodeList(2) [text, p]",paraId:45,tocIndex:8},{value:"NodeList [p]",paraId:45,tocIndex:8},{value:"Check the ",paraId:46,tocIndex:8},{value:"Fiber",paraId:46,tocIndex:8},{value:" node information, you can find that ",paraId:46,tocIndex:8},{value:"React 17",paraId:46,tocIndex:8},{value:" will treat empty elements as ",paraId:46,tocIndex:8},{value:"Fiber",paraId:46,tocIndex:8},{value:" nodes, while ",paraId:46,tocIndex:8},{value:"React 18",paraId:46,tocIndex:8},{value:" will ignore empty elements:",paraId:46,tocIndex:8},{value:"React 17:",paraId:47,tocIndex:8},{value:"React 18:",paraId:48,tocIndex:8},{value:"You can find the relevant PR by following the map:",paraId:49,tocIndex:8},{value:"https://github.com/facebook/react/pull/22807",paraId:50,tocIndex:8},{value:"Antd needs to test React16, 17, and 18. If snapshot is not feasible, it will cause too much cost. So we need to modify jest. ",paraId:51,tocIndex:9},{value:"enzyme-to-json",paraId:51,tocIndex:9},{value:" gave me inspiration, we can modify the snapshot generation logic to smooth out the diff between different versions of React:",paraId:51,tocIndex:9},{value:`expect.addSnapshotSerializer({
  // Determine whether it is a dom element, if yes, go to our own serialization logic
  // The code has been simplified, more logic is needed for real judgment, you can refer to setupAfterEnv.ts of antd
  test: (element) => element instanceof HTMLElement,
  // ...
});
`,paraId:52,tocIndex:9},{value:"Then access ",paraId:53,tocIndex:9},{value:"pretty-format",paraId:53,tocIndex:9},{value:" and add your own logic:",paraId:53,tocIndex:9},{value:`const htmlContent = format(element, {
  plugins: [plugins.DOMCollection, plugins.DOMElement],
});

expect.addSnapshotSerializer({
  test: '//...',
  print: (element) => {
    const filtered = htmlContent
      .split(/[\\n\\r]+/)
      .filter((line) => line.trim())
      .map((line) => line.replace(/\\s+$/, ''))
      .join('\\n');
    return filtered;
  },
});
`,paraId:54,tocIndex:9},{value:"The above are some problems encountered during the migration of the antd test framework. I hope to help students who need to migrate or have not yet started writing test cases. Everyone is also welcome to join the antd community and contribute to open source together.",paraId:55,tocIndex:10}]},643394:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Hello everyone, I am ",paraId:0},{value:"heiyu",paraId:0},{value:". About Ant Design, I believe everyone is very familiar with it. Before I contributed to Ant Design, I have used Ant Design in many background management system projects at work. The biggest feeling for me is that it is easy to use, beautiful, simple and stable. Now that the v5 version has been released, I strongly recommend everyone to try it. I am also fortunate to have developed the v5 version of the ",paraId:0},{value:"Tour",paraId:0},{value:" component and ",paraId:0},{value:"App",paraId:0},{value:" component, as well as some other maintenance work. Let me share with you the PR process of Ant Design, hoping to provide a reference for who are interested in building together for the community.",paraId:0},{value:"Contributing",paraId:1,tocIndex:0},{value:"How to gracefully contribute code on github",paraId:2,tocIndex:0},{value:"Become a Community Collaborator",paraId:3,tocIndex:0},{value:"developer notes",paraId:4,tocIndex:0},{value:"Some tips about git with PR",paraId:5,tocIndex:0},{value:"First you need to fork the project, enter the ",paraId:6,tocIndex:2},{value:"project page",paraId:6,tocIndex:2},{value:", click the ",paraId:6,tocIndex:2},{value:"Fork button",paraId:6,tocIndex:2},{value:"Ant Design link will appear in your github account is ",paraId:6,tocIndex:2},{value:"https://github.com/heiyu4585/ant-design",paraId:6,tocIndex:2},{value:" this project",paraId:6,tocIndex:2},{value:"Use the following command on the project address on the local computer: get a github folder",paraId:6,tocIndex:2},{value:`git clone https://github.com/[yourGithubAccount]/ant-design.git
`,paraId:7,tocIndex:2},{value:"Note: ",paraId:8,tocIndex:2},{value:"[yourGithubAccount]",paraId:8,tocIndex:2},{value:" changed to your own github username",paraId:8,tocIndex:2},{value:"Go to the Ant Design folder and add the remote address of Ant Design",paraId:9,tocIndex:3},{value:`cd ant-design
git remote add upstream https://github.com/ant-design/ant-design
`,paraId:10,tocIndex:3},{value:"Pull the latest remote branch version",paraId:11,tocIndex:3},{value:`git pull upstream master
`,paraId:12,tocIndex:3},{value:"Now we are on the master branch from the fork, and this master is reserved for remote code tracking upstream",paraId:13,tocIndex:3},{value:`git pull
git checkout fix-branch
`,paraId:14,tocIndex:5},{value:"Now we can change the code on the branch",paraId:15,tocIndex:5},{value:"Ant Design issue",paraId:16},{value:"To help you start your first attempt, we use ",paraId:17,tocIndex:6},{value:"good first issues",paraId:17,tocIndex:6},{value:" marks bugs and small features that are relatively easy to fix, and these issues are good as your first try. ",paraId:17,tocIndex:6},{value:"help wanted",paraId:17,tocIndex:6},{value:" After all, it is easy to take over as a developer some problems.",paraId:17,tocIndex:6},{value:"npm start",paraId:18,tocIndex:7},{value:" A website running Ant Design locally",paraId:18,tocIndex:7},{value:"As issue mentioned. Debug, fixing or add new feature",paraId:18,tocIndex:7},{value:"When add new related test case, also make sure all tests pass ",paraId:19,tocIndex:8},{value:"npm run test",paraId:19,tocIndex:8},{value:". Tips: You can use ",paraId:19,tocIndex:8},{value:"npm test -- --watch TestName",paraId:19,tocIndex:8},{value:" to run specified tests during development.",paraId:19,tocIndex:8},{value:"Run ",paraId:19,tocIndex:8},{value:"npm test -- -u",paraId:19,tocIndex:8},{value:" to update ",paraId:19,tocIndex:8},{value:"jest snapshot",paraId:19,tocIndex:8},{value:" and put These updates are also committed (if any).",paraId:19,tocIndex:8},{value:"Make sure your code passes the lint check ",paraId:19,tocIndex:8},{value:"npm run lint",paraId:19,tocIndex:8},{value:".",paraId:19,tocIndex:8},{value:"A common problem is that the remote upstream (ant-design/master) has a new update, which will lead to conflicts when we submit the Pull Request, so we can put the commits of other remote developers and our commit is merged.",paraId:20,tocIndex:9},{value:"Switch to the ",paraId:21,tocIndex:9},{value:"master",paraId:21,tocIndex:9},{value:" branch with the following code:",paraId:21,tocIndex:9},{value:`git checkout master
`,paraId:22,tocIndex:9},{value:"Use the following code to pull the latest code from the remote:",paraId:23,tocIndex:9},{value:`git pull upstream master
`,paraId:24,tocIndex:9},{value:"switch back to fix-branch",paraId:25,tocIndex:9},{value:`git checkout fix-branch
`,paraId:26,tocIndex:9},{value:"Merge the ",paraId:27,tocIndex:9},{value:"commit",paraId:27,tocIndex:9},{value:" of ",paraId:27,tocIndex:9},{value:"master",paraId:27,tocIndex:9},{value:" into ",paraId:27,tocIndex:9},{value:"fix-branch",paraId:27,tocIndex:9},{value:", and resolve conflicts if there are conflicts:",paraId:27,tocIndex:9},{value:`git rebase master
`,paraId:28,tocIndex:9},{value:"Submit the updated code to your own ",paraId:29,tocIndex:9},{value:"fix-branch",paraId:29,tocIndex:9},{value:":",paraId:29,tocIndex:9},{value:`git push origin fix-branch
`,paraId:30,tocIndex:9},{value:"You can switch to the branches page on your github code repository page, click the fix-branch branch, click the ",paraId:31,tocIndex:10},{value:"New pull request",paraId:31,tocIndex:10},{value:" button, add relevant comments and submit. Or switch to the code repository of the fix-branch branch, click the ",paraId:31,tocIndex:10},{value:"Compare & pull request",paraId:31,tocIndex:10},{value:" button, add relevant comments and submit.",paraId:31,tocIndex:10},{value:"On the ",paraId:32,tocIndex:10},{value:"PR page",paraId:32,tocIndex:10},{value:", carefully fill in the submission description according to the default format, and you can refer to the merged PR.",paraId:32,tocIndex:10},{value:"Check whether all the checks are passed. If you don\u2019t click ",paraId:33,tocIndex:10},{value:"details",paraId:33,tocIndex:10},{value:", check the corresponding error report, and push again after repairing.",paraId:33,tocIndex:10},{value:"PR description is not filled in as required",paraId:34,tocIndex:12},{value:"Not rebase to latest version",paraId:35,tocIndex:12},{value:"react 16 test failed",paraId:36,tocIndex:12},{value:"Repair method:",paraId:37,tocIndex:12},{value:`npm run install-react-16
npm run test component/XXX
`,paraId:38,tocIndex:12},{value:"After a period of continuous maintenance, Collaborators will start the invitation mechanism and initiate a vote in ",paraId:39,tocIndex:13},{value:"#3222",paraId:39,tocIndex:13},{value:". When enough votes are met, you will be officially invited to become a Collaborator.",paraId:39,tocIndex:13},{value:"To learn more about Ant Design's development process and considerations, see:",paraId:40,tocIndex:15},{value:"contributor development maintenance guide",paraId:41,tocIndex:15}]},451598:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"With daily development, have you thought about a problem. When the range limit is different from the actual value, how should we deal with it? Suppose we have a display component that simply displays your value:",paraId:0},{value:`interface StrProps {
  value: string;
}

function MyStr({ value }: StrProps) {
  return <div>{value}</div>;
}
<MyStr value="Hello World" />;
`,paraId:1},{value:"Without a doubt, ",paraId:2},{value:"Hello World",paraId:2},{value:" should be displayed on the page. Next, we add a scope limit:",paraId:2},{value:`interface StrProps {
  value: string;
  maxLen?: number;
}
`,paraId:3},{value:"What should be displayed if we use a value out of range at this time?",paraId:4},{value:`<MyStr value="Hello World" maxLen={5}>
`,paraId:5},{value:'"Obviously", since you have ',paraId:6},{value:"maxLen",paraId:6},{value:", you should display ",paraId:6},{value:"Hello",paraId:6},{value:" instead of ",paraId:6},{value:"Hello World",paraId:6},{value:".",paraId:6},{value:"But this intuitive approach is not correct in all cases. If you use native input, you will find that the behavior is not like this:",paraId:7},{value:`<input value="Hello World" maxLength={5} />
`,paraId:8},{value:"As described by the standard, ",paraId:9},{value:"maxLength",paraId:9},{value:" only limits user input. Is this standard wrong?",paraId:9},{value:"A form control maxlength attribute, controlled by the dirty value flag, declares a limit on the number of characters a user can input.",paraId:10},{value:"With the above questions in mind, we imagine an input scenario. Now you have an e-commerce system, set prices for products:",paraId:11,tocIndex:0},{value:`<Form>
  <Form.Item label="Name" name="name">
    <Input />
  </Form.Item>

  <Form.Item label="Price" name="price">
    <InputNumber />
  </Form.Item>
</Form>
`,paraId:12,tocIndex:0},{value:"One day your manager said that the price of our product cannot exceed $99 according to regulations, and you have to set the limit directly on the form. This change is not difficult:",paraId:13,tocIndex:0},{value:`--  <InputNumber />
++  <InputNumber max={99} />
`,paraId:14,tocIndex:0},{value:"But for existing products, we obviously cannot restrict them directly on the form. Otherwise, when the user edits the product, he will find that the price of his product has been changed. This is obviously unreasonable.",paraId:15,tocIndex:0},{value:"(Users will never be able to understand why the data in the background does not match what they see)",paraId:16,tocIndex:0},{value:"In fact, in many scenarios, components should not directly modify the actual value. Especially for input components, changing the display value without authorization will have very serious consequences.",paraId:17,tocIndex:0},{value:`At the component library level, we cannot "guess" the user's usage scenarios, so we need to implement the processing of boundary scenarios in the most conservative way. But at the same time, we can actually do some optimization methods. For example, set the restriction to the `,paraId:18,tocIndex:1},{value:"rules",paraId:18,tocIndex:1},{value:" of Form.Item, and use the form validation ability to make restrictions:",paraId:18,tocIndex:1},{value:"For some components themselves, it is also possible to add explicit style reminders:",paraId:19,tocIndex:1},{value:"For non-input custom components, you can also consider reminding users through design. For example, we can add a Tooltip to the display component:",paraId:20,tocIndex:1},{value:`// Same demo we've seen before
<MyStr value="Hello World" maxLen={5}>
`,paraId:21,tocIndex:1},{value:"Or use some other display way:",paraId:22,tocIndex:1},{value:"Boundary scenarios need to be carefully handled when developing components. In complex system, upstream users may not know how your internal logic is handled. Therefore, as the complexity and usage scenarios increase, we recommend always choosing a conservative approach to the default behavior. For situations that do not meet the requirements, it can be implemented in the form of HOC or some additional Props configuration, so as to prevent developers from having too many agreements when using it without knowing it.",paraId:23,tocIndex:2}]},712372:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In the ",paraId:0},{value:"5.3.0",paraId:0},{value:" version, we will update the underlying dependency ",paraId:0},{value:"@rc-component/trigger",paraId:0},{value:" of the Tooltip component to better implement adaptive alignment logic. Before that, let's talk about some problems encountered in the previous version.",paraId:0},{value:"Tooltip is append to ",paraId:1,tocIndex:0},{value:"body",paraId:1,tocIndex:0},{value:" by default, and it will scroll along with it when scrolling in full screen. But when the target element of the Tooltip is placed in the scrolling container, it will not follow the scrolling because the scrolling container is different:",paraId:1,tocIndex:0},{value:"We suggest to use ",paraId:2,tocIndex:0},{value:"getPopupContainer",paraId:2,tocIndex:0},{value:" in FAQ, allowing developers to insert the popup element into the parent container of the target element through this method. But this solution is not perfect, because it requires the developer to determine which of the parent containers of the target element is the scrolling container. In a reused component, the component that uses the Tooltip may not be the same as the component it scrolls, which makes it not easy to set the target scroll container.",paraId:2,tocIndex:0},{value:"Tooltip supports edge display within the scrolling range. But because the pop-up layer is a whole, the centered arrow cannot point to the target position after offset:",paraId:3,tocIndex:1},{value:"We recommend using the ",paraId:4,tocIndex:1},{value:"placement",paraId:4,tocIndex:1},{value:" property and configure ",paraId:4,tocIndex:1},{value:"topLeft",paraId:4,tocIndex:1},{value:" to align the popup layer to the left to solve this problem before:",paraId:4,tocIndex:1},{value:"Similarly, if it is a reused component. Maybe it doesn't always need to be displayed side-by-side, it will be very strange when the popup layer is indeed left/right aligned when an element is displayed in the middle.",paraId:5,tocIndex:1},{value:"Tooltip uses the ",paraId:6,tocIndex:2},{value:"dom-align",paraId:6,tocIndex:2},{value:" library for align, which will directly add ",paraId:6,tocIndex:2},{value:"left",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"top",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"transform",paraId:6,tocIndex:2},{value:" styles to the dom node to achieve alignment, so in order to make it support the React life cycle, we encapsulated it on top of it ",paraId:6,tocIndex:2},{value:"rc-align",paraId:6,tocIndex:2},{value:" component. In addition, it only cares about the alignment implementation, not the trigger timing itself. So the ",paraId:6,tocIndex:2},{value:"rc-align",paraId:6,tocIndex:2},{value:" component will additionally add a ResizeObserver to monitor size changes, and then call ",paraId:6,tocIndex:2},{value:"dom-align",paraId:6,tocIndex:2},{value:" for alignment.",paraId:6,tocIndex:2},{value:"dom-align",paraId:7,tocIndex:2},{value:" calculates the respective coordinate positions of the target element and the pop-up layer by traversing the parent layer nodes, and then calculates the difference according to the alignment rules. When the parent layer node has a ",paraId:7,tocIndex:2},{value:"transform",paraId:7,tocIndex:2},{value:" style, it will cause the calculated coordinate position to be inaccurate, resulting in incorrect alignment:",paraId:7,tocIndex:2},{value:"The above problems such as scrolling and margining can be avoided in some ways, but the scaling problem cannot be solved. We hope that these problems can be solved by antd, rather than by the developers themselves. To this end, we rewrote the ",paraId:8,tocIndex:3},{value:"@rc-component/trigger",paraId:8,tocIndex:3},{value:" component to integrate alignment logic and arrow logic. No longer depend on ",paraId:8,tocIndex:3},{value:"rc-align",paraId:8,tocIndex:3},{value:" and ",paraId:8,tocIndex:3},{value:"dom-align",paraId:8,tocIndex:3},{value:". At the same time, use the new calculation method to avoid calculation problems caused by the ",paraId:8,tocIndex:3},{value:"transform",paraId:8,tocIndex:3},{value:" style.",paraId:8,tocIndex:3},{value:"Considering that there are various ",paraId:9,tocIndex:4},{value:"position",paraId:9,tocIndex:4},{value:"s in the parent node of the popup element, it is not cost-effective to recursively search the parent element node to calculate the relative position. We only need to calculate the offset according to the final positions of the two, and then apply the final zoom ratio of the popup layer:",paraId:9,tocIndex:4},{value:"Generate the Popup element",paraId:10,tocIndex:4},{value:"Add the Popup style ",paraId:10,tocIndex:4},{value:"left: 0",paraId:10,tocIndex:4},{value:" & ",paraId:10,tocIndex:4},{value:"top: 0",paraId:10,tocIndex:4},{value:` to force it to be aligned to the upper left corner
`,paraId:10,tocIndex:4},{value:"There may be ",paraId:11,tocIndex:4},{value:"fixed",paraId:11,tocIndex:4},{value:", ",paraId:11,tocIndex:4},{value:"relative",paraId:11,tocIndex:4},{value:", and ",paraId:11,tocIndex:4},{value:"absolute",paraId:11,tocIndex:4},{value:" nodes in ",paraId:11,tocIndex:4},{value:"position",paraId:11,tocIndex:4},{value:" in the parent container of the Popup element, which does not affect our calculation of offset. Just make sure to make an offset at the ",paraId:11,tocIndex:4},{value:"0/0",paraId:11,tocIndex:4},{value:" position",paraId:11,tocIndex:4},{value:"Obtain the position information of the target element and Popup element through ",paraId:10,tocIndex:4},{value:"getBoundingClientRect",paraId:10,tocIndex:4},{value:"Calculate the offset difference",paraId:10,tocIndex:4},{value:"The zoom ratio cannot be obtained directly, but we can calculate the zoom ratio through ",paraId:12,tocIndex:5},{value:"getBoundingClientRect",paraId:12,tocIndex:5},{value:" and ",paraId:12,tocIndex:5},{value:"offsetWidth",paraId:12,tocIndex:5},{value:"/",paraId:12,tocIndex:5},{value:"offsetHeight",paraId:12,tocIndex:5},{value:":",paraId:12,tocIndex:5},{value:`const popupRect = popupEle.getBoundingClientRect();
const { offsetWidth, offsetHeight } = popupEle;

const scaleX = popupRect.width / offsetWidth;
const scaleY = popupRect.height / offsetHeight;
`,paraId:13,tocIndex:5},{value:"Then apply the scaling to the calculated offset:",paraId:14,tocIndex:5},{value:`// Some logic for align offset calculation
// const baseOffsetX = ...
// const baseOffsetY = ...

const scaledOffsetX = baseOffsetX / scaleX;
const scaledOffsetY = baseOffsetY / scaleY;
`,paraId:15,tocIndex:5},{value:"In the past, arrows were added by ",paraId:16,tocIndex:6},{value:"rc-tooltip",paraId:16,tocIndex:6},{value:" instead of ",paraId:16,tocIndex:6},{value:"rc-trigger",paraId:16,tocIndex:6},{value:". This makes the ",paraId:16,tocIndex:6},{value:"rc-tooltip",paraId:16,tocIndex:6},{value:" lost the alignment information, so that the arrow position cannot be adjusted correctly when the Popup is offset. To this end, we also integrate the arrow logic into ",paraId:16,tocIndex:6},{value:"rc-trigger",paraId:16,tocIndex:6},{value:", so that the position of the arrow can be offset with the offset of the Popup. After merging, the arrow position calculation becomes very simple. We only need to take the minimum value of the target element and the Popup boundary value, and then take the middle value:",paraId:16,tocIndex:6},{value:"The new monitoring mode will detect the ",paraId:17,tocIndex:9},{value:"overflow",paraId:17,tocIndex:9},{value:" style of the Popup parent node when the Tooltip is started. When ",paraId:17,tocIndex:9},{value:"scroll",paraId:17,tocIndex:9},{value:", ",paraId:17,tocIndex:9},{value:"hidden",paraId:17,tocIndex:9},{value:", and ",paraId:17,tocIndex:9},{value:"auto",paraId:17,tocIndex:9},{value:" exist, the visible area except the scroll bar will be superimposed to calculate the final display area:",paraId:17,tocIndex:9},{value:"Similarly, we need to listen to its scrolling events. When any parent node is scrolled, the display area needs to be recalculated:",paraId:18,tocIndex:9},{value:`function collectScroll(ele: HTMLElement) {
  const scrollList: HTMLElement[] = [];
  let current = ele?.parentElement;

  while (current) {
    if (isScrollContainer(current)) {
      scrollList.push(ele);
    }

    current = current.parentElement;
  }

  return scrollList;
}

const targetScrollList = collectScroll(targetEle);
const popupScrollList = collectScroll(popupEle);

// We merge the list in real world. Here just for sample
[window, ...targetScrollList, ...popupScrollList].forEach((ele) => {
  ele.addEventListener(...);
});
`,paraId:19,tocIndex:9},{value:"In the end, we get the effect of adaptive scrolling:",paraId:20,tocIndex:9},{value:"After completing the transformation of Tooltip, we will continue to transform other components which has popup element. We hope that after this, developers can use components directly instead of paying attention to the configuration of ",paraId:21,tocIndex:10},{value:"getPopupContainer",paraId:21,tocIndex:10},{value:" as much as possible. Have a nice day!",paraId:21,tocIndex:10}]},868574:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In modern JS applications, unused module can be automatically removed by modular packaging tools. This process is called ",paraId:0},{value:"Tree Shaking",paraId:0},{value:". However, if you are already very familiar with it, you will find that it is not so perfect in reality. We still need some extra operations to achieve the best size optimization effect. Today, let's talk about a problem that ConfigProvider causes Tree Shaking to fail.",paraId:0},{value:"In daily maintenance, we encountered some problems that using ConfigProvider would cause bundle size to increase:",paraId:1,tocIndex:0},{value:"https://github.com/ant-design/ant-design/issues/41607",paraId:2,tocIndex:0},{value:"https://github.com/ant-design/ant-design/issues/43019",paraId:2,tocIndex:0},{value:"https://github.com/ant-design/ant-design/issues/42499",paraId:2,tocIndex:0},{value:"The community also found the package that was incorrectly packaged while giving feedback ",paraId:3,tocIndex:0},{value:"rc-field-form",paraId:3,tocIndex:0},{value:". Here we directly borrow the illustration in the issue:",paraId:3,tocIndex:0},{value:"ConfigProvider provides global configuration capabilities, which also includes the custom template configuration of Form component verification information:",paraId:4,tocIndex:0},{value:`<ConfigProvider form={{ validateMessages }} />
`,paraId:5,tocIndex:0},{value:"Since this feature dependents with the verification of the form, it is implemented by the FormProvider provided by the underlying ",paraId:6,tocIndex:0},{value:"rc-field-form",paraId:6,tocIndex:0},{value:". In antd, it will be aggregated with its own localized ",paraId:6,tocIndex:0},{value:"validateMessages",paraId:6,tocIndex:0},{value:":",paraId:6,tocIndex:0},{value:`// Sample only. Not real world code.
import { FormProvider } from 'rc-field-form';

const ConfigProvider = ({ validateMessages, children }) => {
  const mergedValidateMessages = React.useMemo(
    () => merge(antdDefaultValidateMessages, validateMessages),
    [validateMessages],
  );

  return (
    <FormProvider validateMessages={mergedValidateMessages}>
      <SomeOtherProvider>{children}</SomeOtherProvider>
    </FormProvider>
  );
};
`,paraId:7,tocIndex:0},{value:"Meanwhile, FormProvider itself encapsulates the FormContext of ",paraId:8,tocIndex:0},{value:"rc-field-form",paraId:8,tocIndex:0},{value:", which causes more content of ",paraId:8,tocIndex:0},{value:"rc-field-form",paraId:8,tocIndex:0},{value:" to be packaged after introducing FormProvider:",paraId:8,tocIndex:0},{value:"You may think, can we optimize it? If ",paraId:9,tocIndex:0},{value:"validateMessages",paraId:9,tocIndex:0},{value:" is not configured, we will not call this FormProvider?",paraId:9,tocIndex:0},{value:`// Sample only. Not real world code.
import { FormProvider } from 'rc-field-form';

const ConfigProvider = ({ validateMessages, children }) => {
  let node = children;

  if (validateMessages) {
    node = <FormProvider validateMessages={merge(...)}>{node}</FormProvider>;
  }

  return node;
};
`,paraId:10,tocIndex:0},{value:"Unfortunately, this is not possible. Tree Shaking is a static compilation process, and ",paraId:11,tocIndex:0},{value:"validateMessages",paraId:11,tocIndex:0},{value:" is a runtime configuration. So in the packaging process, we cannot know whether ",paraId:11,tocIndex:0},{value:"validateMessages",paraId:11,tocIndex:0},{value:" exists, so we cannot achieve this optimization.",paraId:11,tocIndex:0},{value:"We can adjust ",paraId:12,tocIndex:1},{value:"rc-field-form",paraId:12,tocIndex:1},{value:" dependencies, so that FormProvider can be decoupled. But obviously, we should not rely on the adjustment of third-party libraries though ",paraId:12,tocIndex:1},{value:"rc-field-form",paraId:12,tocIndex:1},{value:" is also maintained by us. We should solve this problem fundamentally, so that ConfigProvider no longer depends on FormProvider. The implementation is also very simple. Since this is unique to ",paraId:12,tocIndex:1},{value:"rc-field-form",paraId:12,tocIndex:1},{value:", we directly extract a Context, so that ConfigProvider no longer perceives FormProvider:",paraId:12,tocIndex:1},{value:`// Sample only. Not real world code.
import { ValidateMessageContext } from '../form/context.ts';

const ConfigProvider = ({ validateMessages, children }) => {
  const mergedValidateMessages = ...

  return (
    // Just use the proxy context
    <ValidateMessageContext value={mergedValidateMessages}>
      <SomeOtherProvider>{children}</SomeOtherProvider>
    </ValidateMessageContext>
  );
};
`,paraId:13,tocIndex:1},{value:"Form also consumes the proxy Context:",paraId:14,tocIndex:1},{value:`// Sample only. Not real world code.
import Form, { FormProvider } from 'rc-field-form';
import { ValidateMessageContext } from './context';

export default (props) => {
  const validateMessages = React.useContext(ValidateMessageContext);

  return (
    <FormProvider validateMessages={validateMessages}>
      <Form {...props} />
    </FormProvider>
  );
};
`,paraId:15,tocIndex:1},{value:"Decomposing the dependencies in this way:",paraId:16,tocIndex:1},{value:"Tree Shaking provides an automated way to optimize bundle size, but we need to pay attention to some details. Otherwise, some dependencies may be incorrectly introduced. Thanks.",paraId:17,tocIndex:2}]},734081:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The definition of TypeScript is very powerful, it can solve many problems, help developers find type errors in advance to avoid painful debugging at runtime. In antd, we also export the basic definitions of components:",paraId:0},{value:`import React from 'react';
import { Table, type TableColumnsType } from 'antd';

const columns: TableColumnsType = [
  {
    title: 'Name',
    dataIndex: 'name',
    key: 'name',
  },
];

export default () => <Table columns={columns} />;
`,paraId:1},{value:"These definitions meet most scenarios, but sometimes developers want to get more refined type definitions, which antd may not export. In the past, we recommended developers to extend them by themselves through TypeScript's type gymnastics to meet their needs:",paraId:2},{value:`import type { SelectProps } from 'antd';

type SelectOption<T> = NonNullable<SelectProps<T>['options']>[number];
`,paraId:3},{value:"It's not a difficult task for developer who are familiar with TypeScript. But for TypeScript beginners, this may be a difficult problem. Therefore, we have launched a type tool library to help developers simplify the process of extracting types.",paraId:4},{value:"We now provide 3 additional utility types in antd:",paraId:5,tocIndex:0},{value:"GetProps<ComponentType>",paraId:6,tocIndex:0},{value:"GetProp<ComponentTypeOrComponentPropsType, PropName>",paraId:6,tocIndex:0},{value:"GetRef<ComponentType>",paraId:6,tocIndex:0},{value:"Previous two are used to help developers extract the props type of the component, and the last one is used to extract the ref type of the component. We can understand the usage of these types through the following examples:",paraId:7,tocIndex:0},{value:"Some sub-component definition may not be exported in antd. You can get it directly through ",paraId:8,tocIndex:1},{value:"GetProps",paraId:8,tocIndex:1},{value:":",paraId:8,tocIndex:1},{value:`import type { Checkbox, GetProps } from 'antd';

type CheckboxGroupType = GetProps<typeof Checkbox.Group>;
`,paraId:9,tocIndex:1},{value:"For the property type of the component, we can get it through ",paraId:10,tocIndex:2},{value:"GetProp",paraId:10,tocIndex:2},{value:". It has been encapsulated with ",paraId:10,tocIndex:2},{value:"NonNullable",paraId:10,tocIndex:2},{value:". So there is no need to consider the null case:",paraId:10,tocIndex:2},{value:`import type { GetProp, Select, SelectProps } from 'antd';

// Both of this can work
type SelectOptionType1 = GetProp<SelectProps, 'options'>[number];
type SelectOptionType2 = GetProp<typeof Select, 'options'>[number];
`,paraId:11,tocIndex:2},{value:"Through ",paraId:12,tocIndex:3},{value:"GetRef",paraId:12,tocIndex:3},{value:", you don't need to remember what the ref type of the component is, HTMLElement or some special definition. Just use it:",paraId:12,tocIndex:3},{value:`import React, { forwardRef } from 'react';
import type { GetRef, Select } from 'antd';

type SelectRefType = GetRef<typeof Select>; // BaseSelectRef

const Div = forwardRef<HTMLDivElement>((_, ref) => <div ref={ref} />);
type DomRefType = GetRef<typeof Div>; // HTMLDivElement
`,paraId:13,tocIndex:3},{value:"Here is the type util we provided, hope it can help you. If you have better ideas, please feel free to raise an issue or PR on Github.",paraId:14,tocIndex:4}]},283883:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In v4, we added a custom ",paraId:0,tocIndex:0},{value:"components",paraId:0,tocIndex:0},{value:" example for Table, which replaces the default ",paraId:0,tocIndex:0},{value:"<tbody>",paraId:0,tocIndex:0},{value:" with ",paraId:0,tocIndex:0},{value:"components.body",paraId:0,tocIndex:0},{value:" to achieve virtual scrolling. But many developers feedback that the virtual table in the Demo has many functions that cannot be implemented. For example, fixed columns, merged rows and columns, expandable rows, etc.",paraId:0,tocIndex:0},{value:"So we proposed ",paraId:1,tocIndex:0},{value:"[RFC] StaticTable for fast perf & virtual scroll support",paraId:1,tocIndex:0},{value:" in v5. The RFC expects to provide a high-performance Table.StaticTable, which will support virtual scrolling by default. But as the development progressed, we eventually decided to implement StaticTable on the underlying ",paraId:1,tocIndex:0},{value:"rc-table",paraId:1,tocIndex:0},{value:", and on the antd side, we only need to enable it with ",paraId:1,tocIndex:0},{value:"<Table virtual />",paraId:1,tocIndex:0},{value:".",paraId:1,tocIndex:0},{value:"Table supports virtual scrolling by setting the ",paraId:2,tocIndex:1},{value:"virtual",paraId:2,tocIndex:1},{value:" prop. At the same time, the original Table's functions except ",paraId:2,tocIndex:1},{value:"components.body",paraId:2,tocIndex:1},{value:" can be used normally:",paraId:2,tocIndex:1},{value:`<Table virtual scroll={{ x: 2000, y: 500 }} {...otherProps} />
`,paraId:3,tocIndex:1},{value:"You can visit the ",paraId:4,tocIndex:4},{value:"virtual list",paraId:5,tocIndex:4},{value:" example to experience it.",paraId:4,tocIndex:4},{value:"Table in antd internally uses the ",paraId:6,tocIndex:5},{value:"rc-table",paraId:6,tocIndex:5},{value:" component. Our virtual scrolling feature also reuses the ",paraId:6,tocIndex:5},{value:"components",paraId:6,tocIndex:5},{value:" property mentioned above. Replace the middle ",paraId:6,tocIndex:5},{value:"<tbody>",paraId:6,tocIndex:5},{value:" with ",paraId:6,tocIndex:5},{value:"rc-virtual-list",paraId:6,tocIndex:5},{value:", which is widely used in various virtual scrolling scenarios of antd like Select and Tree. ",paraId:6,tocIndex:5},{value:"rc-virtual-list",paraId:6,tocIndex:5},{value:" itself does not support horizontal scrolling, so we also added horizontal scrolling support for it in this refactoring.",paraId:6,tocIndex:5},{value:"In v4, we refactored the fixed columns of Table into ",paraId:7,tocIndex:6},{value:"position: sticky",paraId:7,tocIndex:6},{value:". This CSS allows you to fix an element at a certain position when scrolling. So as to avoid the need to render an extra Table in v3 to achieve the fixed position effect:",paraId:7,tocIndex:6},{value:"For overlapping fixed columns, you only need to configure different offsets:",paraId:8,tocIndex:6},{value:"We can also use this feature in virtual scrolling. Just reuse the ",paraId:9,tocIndex:6},{value:"sticky",paraId:9,tocIndex:6},{value:" style to achieve the effect of fixed columns. ",paraId:9,tocIndex:6},{value:"rc-virtual-list",paraId:9,tocIndex:6},{value:" only needs to provide horizontal scrolling, and does not need to care about the implementation of fixed columns.",paraId:9,tocIndex:6},{value:"We will flatten the tree structure of ",paraId:10,tocIndex:7},{value:"dataSource",paraId:10,tocIndex:7},{value:" through ",paraId:10,tocIndex:7},{value:"useFlattenRecords",paraId:10,tocIndex:7},{value:" in ",paraId:10,tocIndex:7},{value:"rc-table",paraId:10,tocIndex:7},{value:", so as to support developers' custom virtual scrolling capabilities. Thanks to ",paraId:10,tocIndex:7},{value:"@crawler-django",paraId:10,tocIndex:7},{value:" for his contribution at that time, so we don't need to implement the flattening logic again.",paraId:10,tocIndex:7},{value:"But in testing, we found a strange phenomenon. When the table is rendered for the first time or re-render, there will be a very large lag. When debugging, it comes from the ",paraId:11,tocIndex:7},{value:"useFlattenRecords",paraId:11,tocIndex:7},{value:" hook. It's strange that test code itself does not use the expandable tree function. It was found that there were a lot of GC operations in ",paraId:11,tocIndex:7},{value:"useFlattenRecords",paraId:11,tocIndex:7},{value:". And these operations are caused by a piece of inconspicuous code:",paraId:11,tocIndex:7},{value:`// Fake code. Not used in real word
function flatten<T extends { children?: T[] }>(data: T[] = []) {
  let tmpList: T[] = [];

  for (let i = 0; i < data.length; i += 1) {
    const record = data[i];
    tmpList = [...tmpList, record, ...flatten(record.children)];
  }

  return tmpList;
}
`,paraId:12,tocIndex:7},{value:"When traversing, although ",paraId:13,tocIndex:7},{value:"children",paraId:13,tocIndex:7},{value:" is empty and only enters recursion once. But when looping through each Record, a temporary empty array will be created. But when ",paraId:13,tocIndex:7},{value:"dataSource",paraId:13,tocIndex:7},{value:" data is huge, they will continue to trigger GC to clean up these temporary arrays. So we added logic to avoid unnecessary consumption:",paraId:13,tocIndex:7},{value:`// Fake code. Not used in real word
function flatten<T extends { children?: T[] }>(data: T[] = [], list: T[] = []) {
  for (let i = 0; i < data.length; i += 1) {
    const record = data[i];
    list.push(record);
    flatten(record.children, list);
  }

  return list;
}
`,paraId:14,tocIndex:7},{value:"If you are familiar with the implementation of Table, you will know that row and column merging is achieved through ",paraId:15,tocIndex:8},{value:"rowSpan",paraId:15,tocIndex:8},{value:" and ",paraId:15,tocIndex:8},{value:"colSpan",paraId:15,tocIndex:8},{value:". In virtual scrolling, since not all nodes are rendered, there will be cases where the rows and columns to be rendered do not exist:",paraId:15,tocIndex:8},{value:"To render this content, we need to calculate the ",paraId:16,tocIndex:8},{value:"rowSpan",paraId:16,tocIndex:8},{value:" and ",paraId:16,tocIndex:8},{value:"colSpan",paraId:16,tocIndex:8},{value:" of all Records in the current visible area. And this calculation process is very complicated. We need to traverse all Records and calculate the ",paraId:16,tocIndex:8},{value:"rowSpan",paraId:16,tocIndex:8},{value:" and ",paraId:16,tocIndex:8},{value:"colSpan",paraId:16,tocIndex:8},{value:" of each Record. Obviously, this is a very time-consuming operation, and when the ",paraId:16,tocIndex:8},{value:"rowSpan",paraId:16,tocIndex:8},{value:" data is too far away from the visible area, the amount of content it needs to render will also be very large:",paraId:16,tocIndex:8},{value:"Maybe you will think of whether we can calculate the ",paraId:17,tocIndex:8},{value:"rowSpan",paraId:17,tocIndex:8},{value:" in advance and then get these data when scrolling. This is actually not possible. The row and column data is provided by ",paraId:17,tocIndex:8},{value:"onCell",paraId:17,tocIndex:8},{value:", and calculating ",paraId:17,tocIndex:8},{value:"onCell",paraId:17,tocIndex:8},{value:" every time when rendering the parent node will cause huge performance loss:",paraId:17,tocIndex:8},{value:`const Demo = () => {
  const [spanCount, setSpanCount] = useState(3);

  const columns = [
    {
      dataIndex: 'group',
      onCell: (_, index) => ({
        rowSpan: index % spanCount === 0 ? spanCount : 0,
      }),
    },
  ];

  // WOW!
  React.useEffect(() => {
    setSpanCount(5);
  }, []);

  return <Table columns={columns} {...props} />;
};
`,paraId:18,tocIndex:8},{value:"Thus, even if we count the ",paraId:19,tocIndex:8},{value:"rowSpan",paraId:19,tocIndex:8},{value:" data and render the rows outside the screen, it is still not enough. It may appear that ",paraId:19,tocIndex:8},{value:"rowSpan",paraId:19,tocIndex:8},{value:" alternates:",paraId:19,tocIndex:8},{value:"And for the worst case, all rows have ",paraId:20,tocIndex:8},{value:"rowSpan",paraId:20,tocIndex:8},{value:" with other rows, then the amount of content we need to render will be the entire ",paraId:20,tocIndex:8},{value:"dataSource",paraId:20,tocIndex:8},{value:". That is, virtual scrolling is no longer virtual. Therefore, we need to clip it to render only the ",paraId:20,tocIndex:8},{value:"rowSpan",paraId:20,tocIndex:8},{value:" in the visible area, and remove the irrelevant parts outside the screen:",paraId:20,tocIndex:8},{value:"So, think backwards. We only need to start from the visible area. Then get the Records affected by ",paraId:21,tocIndex:8},{value:"rowSpan",paraId:21,tocIndex:8},{value:" up and down. Then only render the ",paraId:21,tocIndex:8},{value:"cell",paraId:21,tocIndex:8},{value:" that provides ",paraId:21,tocIndex:8},{value:"rowSpan",paraId:21,tocIndex:8},{value:":",paraId:21,tocIndex:8},{value:"rc-virtual-list",paraId:22,tocIndex:8},{value:" provides the ",paraId:22,tocIndex:8},{value:"extraRender",paraId:22,tocIndex:8},{value:" method, which will provide the row number currently rendered in virtual scrolling. We only need to execute ",paraId:22,tocIndex:8},{value:"onCell",paraId:22,tocIndex:8},{value:" on each Record in this range to get the ",paraId:22,tocIndex:8},{value:"rowSpan",paraId:22,tocIndex:8},{value:" and ",paraId:22,tocIndex:8},{value:"colSpan",paraId:22,tocIndex:8},{value:" information of each ",paraId:22,tocIndex:8},{value:"cell",paraId:22,tocIndex:8},{value:". So we can know whether the current row has ",paraId:22,tocIndex:8},{value:"rowSpan",paraId:22,tocIndex:8},{value:":",paraId:22,tocIndex:8},{value:`// Fake code. Not used in real word
const extraRender = ({ start, end }) => {
  // Start record
  const startRecord = flattenData[start];
  columns.forEach((col) => {
    // \`rowSpan\` === 0 means upper record has \`rowSpan\`
    const { rowSpan } = col.onCell(startRecord, start);
  });

  // End record
  const endRecord = flattenData[end];
  columns.forEach((col) => {
    // \`rowSpan\` > 1 means it should extend to next records
    const { rowSpan } = col.onCell(endRecord, end);
  });
};
`,paraId:23,tocIndex:8},{value:"You should note that, in the actual collection process, we will record all ",paraId:24,tocIndex:8},{value:"cell",paraId:24,tocIndex:8},{value:" with ",paraId:24,tocIndex:8},{value:"rowSpan",paraId:24,tocIndex:8},{value:" in the range instead of just the head and tail Record. Then render these ",paraId:24,tocIndex:8},{value:"cell",paraId:24,tocIndex:8},{value:" through the ",paraId:24,tocIndex:8},{value:"extraRender",paraId:24,tocIndex:8},{value:" method (and skip rendering for ",paraId:24,tocIndex:8},{value:"cell",paraId:24,tocIndex:8},{value:" affected by ",paraId:24,tocIndex:8},{value:"rowSpan",paraId:24,tocIndex:8},{value:" in the original Record). This ensures the correctness of ",paraId:24,tocIndex:8},{value:"rowSpan",paraId:24,tocIndex:8},{value:".",paraId:24,tocIndex:8},{value:"Of course, this implementation is based on the assumption that ",paraId:25,tocIndex:8},{value:"rowSpan > 1",paraId:25,tocIndex:8},{value:" and ",paraId:25,tocIndex:8},{value:"rowSpan = 0",paraId:25,tocIndex:8},{value:" will appear. It does not support the case where ",paraId:25,tocIndex:8},{value:"rowSpan",paraId:25,tocIndex:8},{value:" is used to squeeze to the lower level, but for data tables, this is enough.",paraId:25,tocIndex:8},{value:"Virtual scrolling is a very complex feature, and there are many factors to consider. But we believe that it is worth spending this effort, and developers no longer need to choose between functionality and performance. Instead, you can have both. However, it should be noted that since we have implemented virtual scrolling through ",paraId:26,tocIndex:9},{value:"components.body",paraId:26,tocIndex:9},{value:", developers cannot override the ",paraId:26,tocIndex:9},{value:"body",paraId:26,tocIndex:9},{value:" part of the component.",paraId:26,tocIndex:9},{value:"That's all.",paraId:27,tocIndex:9}]},715341:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"message.success",paraId:0},{value:" is working well, why do you warn me to use hooks? antd is getting worse and worse, goodbye!",paraId:0},{value:"We've heard some complaints about hooks replacement of static methods. We know it's painful, but after years of consideration, we still decide to do a cut in v5 (yes, this discussion is even older than hooks, but there was no simple way to implement it before hooks, so we just put it aside).",paraId:1},{value:"For the early JS, there already exists a simple and easy-to-use API ",paraId:2,tocIndex:0},{value:"alert",paraId:2,tocIndex:0},{value:". You can call it anytime, anywhere. And at the framework level, this kind of convenience is also fascinating. A common example is that use ",paraId:2,tocIndex:0},{value:"message.error",paraId:2,tocIndex:0},{value:" to display an error message on the screen when the ajax request fails in Redux:",paraId:2,tocIndex:0},{value:"But from the perspective of data flow, this actually couples UI and data layer. It just looks like it doesn't directly depend on the UI context when it's called, so it looks harmless. And for the perspective of testing, this kind of coupling also makes the test complicated.",paraId:3,tocIndex:0},{value:"Call static methods in the function, although it looks like there is a context. But in fact, static methods will not consume the context, it will be independent of the current React lifecycle, so the content obtained through Context is actually nothing:",paraId:4,tocIndex:1},{value:`const Context = React.createContext('default');

const MyContent = () => React.useContext(Context);

const Wrapper = () => {
  React.useEffect(() => {
    // Static function is out of context.
    // We can only get \`default\` instead of \`Hello World\`.
    message.success(<MyContent />);
  }, []);

  return null;
};

const Demo = () => (
  <Context.Provider value="Hello World">
    <Wrapper />
  </Context.Provider>
);
`,paraId:5,tocIndex:1},{value:"Static methods are actually implemented by creating a new React instance through ",paraId:6,tocIndex:1},{value:"ReactDOM.render",paraId:6,tocIndex:1},{value:". So it's completely irrelevant to the current context. So you might think, if I configure the theme, internationalization, global configuration, etc., then these configurations will not take effect.",paraId:6,tocIndex:1},{value:'But when I say this, you may react to: "Wait! The static method of antd internationalization is working!"',paraId:7,tocIndex:1},{value:"Yes, but this is not really consuming the Context. We have done a very Hack implementation. When the user provides the ",paraId:8,tocIndex:1},{value:"locale",paraId:8,tocIndex:1},{value:" property through ConfigProvider, we will temporarily store it in a global variable. And when the static method is called, use it to fill in:",paraId:8,tocIndex:1},{value:`// Sample. Not real world code.
let globalLocale = null;

const ConfigProvider = (props) => {
  if (props.locale) {
    globalLocale = props.locale;
  }

  // ...
};

Modal.confirm = (props) => {
  // ...

  ReactDOM.render(
    <ConfigProvider locale={globalLocale}>
      <Modal {...modalProps} />
    </ConfigProvider>,
  );
};
`,paraId:9,tocIndex:1},{value:"You can easily find that this code is very fragile. Static methods don't know what the call stack is, it may be called inside or outside the ConfigProvider. Even there may be multiple ConfigProvider configurations at the same time. In this case, we cannot and cannot guarantee that the static method can correctly obtain the current configuration.",paraId:10,tocIndex:1},{value:"When we start to support dynamic theme, this problem will become more obvious. In the theme, it is easy to encounter a mixed theme. The style of Modal, message, notification called by developers at different levels may be completely different.",paraId:11,tocIndex:1},{value:"As we said above, in order to consume context, we need to know the current node position when calling the method. Therefore, in v4, we introduced the corresponding Hooks method for static methods:",paraId:12,tocIndex:2},{value:`const Demo = () => {
  const [messageApi, contextHolder] = message.useMessage();

  const info = () => {
    messageApi.info('Hello, Ant Design!');
  };

  return (
    <>
      {/* Different insert holder position will get different context */}
      {contextHolder}
      <Button type="primary" onClick={info}>
        Display normal message
      </Button>
    </>
  );
};
`,paraId:13,tocIndex:2},{value:"You can find it's not convenient. For developers, each usage place is directly called from the past, and it becomes must to set the injected Context node. In most cases, the Context of the static method in the past only needs to pay attention to stable configurations such as internationalization and theme. So if we can have a place to put the Holder, it would be better to reuse it directly in other places.",paraId:14,tocIndex:2},{value:"Thus we provide App component in v5. This component has a DOM structure, which will add some reset styles to the sub-nodes (for example, the global style pollution that was criticized in the past version, now it will only work under App). At the same time, Modal, message, notification holder is also added in App. So after the developer adds App to the outermost layer of the application, it can be used simply in the code:",paraId:15,tocIndex:3},{value:`const Demo = () => {
  const { message } = App.useApp();

  React.useEffect(() => {
    message.success('Hello World');
  }, []);

  // ...
};
`,paraId:16,tocIndex:3},{value:`It's a bad implementation from the design perspective. But we know that static methods are so convenient and easy to use in business scenarios. Even if it has some "harmless" shortcomings, it is still worth having a place in history. So we are thinking, is there any other way to remove these side effects from the component library, but at the same time can also serve developers. For example, improve the umi antd plugin, and automatically static the top-level App instance to antd when configuring `,paraId:17,tocIndex:4},{value:"appData",paraId:17,tocIndex:4},{value:". Of course, these are just some ideas. We will continue to explore this issue in subsequent versions.",paraId:17,tocIndex:4}]},350362:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Tips: The following generic properties apply to most antd components; those not supported are described separately.",paraId:0},{value:"Property",paraId:1},{value:"Description",paraId:1},{value:"Type",paraId:1},{value:"Default",paraId:1},{value:"rootClassName",paraId:1},{value:"ClassName on the root element",paraId:1},{value:"string",paraId:1},{value:"-",paraId:1}]},626667:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Ant Design supports the last 2 versions of modern browsers. If you need to be compatible with legacy browsers, please perform downgrade processing according to actual needs:",paraId:0},{value:"Please ref ",paraId:1,tocIndex:0},{value:"@ant-design/cssinjs",paraId:1,tocIndex:0},{value:".",paraId:1,tocIndex:0},{value:'The CSS-in-JS feature of Ant Design uses the ":where" selector by default to lower the CSS selector specificity, reducing the additional cost of adjusting custom styles when upgrading for users. However, the compatibility of the ":where" syntax is relatively poor in older browsers (',paraId:2,tocIndex:1},{value:"compatibility",paraId:2,tocIndex:1},{value:"). In certain scenarios, if you need to support older browsers (or encounter priority conflicts like TailwindCSS), you can use ",paraId:2,tocIndex:1},{value:"@ant-design/cssinjs",paraId:2,tocIndex:1},{value:" to disable the default lowering of specificity (please ensure version consistency with antd).",paraId:2,tocIndex:1},{value:`import { StyleProvider } from '@ant-design/cssinjs';

// Config \`hashPriority\` to \`high\` instead of default \`low\`
// Which will remove \`:where\` wrapper
export default () => (
  <StyleProvider hashPriority="high">
    <MyApp />
  </StyleProvider>
);
`,paraId:3,tocIndex:1},{value:"It will turn ",paraId:4,tocIndex:1},{value:":where",paraId:4,tocIndex:1},{value:" to class selector:",paraId:4,tocIndex:1},{value:`--  :where(.css-bAMboO).ant-btn {
++  .css-bAMboO.ant-btn {
      color: #fff;
    }
`,paraId:5,tocIndex:1},{value:"Note: After turning off the ",paraId:6,tocIndex:1},{value:":where",paraId:6,tocIndex:1},{value:" downgrade, you may need to manually adjust the priority of some styles. Or you can ",paraId:6,tocIndex:1},{value:"use PostCSS plugin",paraId:6,tocIndex:1},{value:" to raise application css selector priority. PostCSS provides many plugins can help on this. e.g:",paraId:6,tocIndex:1},{value:"postcss-scopify",paraId:7,tocIndex:1},{value:"postcss-increase-specificity",paraId:7,tocIndex:1},{value:"postcss-add-root-selector",paraId:7,tocIndex:1},{value:"Raise priority through plugin:",paraId:8,tocIndex:1},{value:`--  .my-btn {
++  #root .my-btn {
      background: red;
    }
`,paraId:9,tocIndex:1},{value:"To unify LTR and RTL styles, Ant Design uses CSS logical properties. For example, the original ",paraId:10,tocIndex:2},{value:"margin-left",paraId:10,tocIndex:2},{value:" is replaced by ",paraId:10,tocIndex:2},{value:"margin-inline-start",paraId:10,tocIndex:2},{value:", so that it is the starting position spacing under both LTR and RTL. If you need to be compatible with older browsers, you can configure ",paraId:10,tocIndex:2},{value:"transformers",paraId:10,tocIndex:2},{value:" through the ",paraId:10,tocIndex:2},{value:"StyleProvider",paraId:10,tocIndex:2},{value:" of ",paraId:10,tocIndex:2},{value:"@ant-design/cssinjs",paraId:10,tocIndex:2},{value:":",paraId:10,tocIndex:2},{value:`import { legacyLogicalPropertiesTransformer, StyleProvider } from '@ant-design/cssinjs';

// \`transformers\` provides a way to transform CSS properties
export default () => (
  <StyleProvider transformers={[legacyLogicalPropertiesTransformer]}>
    <MyApp />
  </StyleProvider>
);
`,paraId:11,tocIndex:2},{value:"When toggled, styles will downgrade CSS logical properties:",paraId:12,tocIndex:2},{value:`.ant-modal-root {
-- inset: 0;
++ top: 0;
++ right: 0;
++ bottom: 0;
++ left: 0;
}
`,paraId:13,tocIndex:2},{value:"In responsive web development, there is a need for a convenient and flexible way to achieve page adaptation and responsive design. The ",paraId:14,tocIndex:3},{value:"px2remTransformer",paraId:14,tocIndex:3},{value:" transformer can quickly and accurately convert pixel units in style sheets to rem units relative to the root element (HTML tag), enabling the implementation of adaptive and responsive layouts.",paraId:14,tocIndex:3},{value:`import { px2remTransformer, StyleProvider } from '@ant-design/cssinjs';

const px2rem = px2remTransformer({
  rootValue: 32, // 32px = 1rem; @default 16
});

export default () => (
  <StyleProvider transformers={[px2rem]}>
    <MyApp />
  </StyleProvider>
);
`,paraId:15,tocIndex:3},{value:"The resulting transformed styles:",paraId:16,tocIndex:3},{value:` .px2rem-box {
-  width: 400px;
+  width: 12.5rem;
   background-color: green;
-  font-size: 32px;
+  font-size: 1rem;
   border: 10PX solid #f0f;
 }

 @media only screen and (max-width: 600px) {
   .px2rem-box {
     background-color: red;
-    margin: 10px;
+    margin: 0.3125rem;
   }
 }
`,paraId:17,tocIndex:3},{value:"Parameter",paraId:18,tocIndex:4},{value:"Description",paraId:18,tocIndex:4},{value:"Type",paraId:18,tocIndex:4},{value:"Default",paraId:18,tocIndex:4},{value:"rootValue",paraId:18,tocIndex:4},{value:"Font size of the root element",paraId:18,tocIndex:4},{value:"number",paraId:18,tocIndex:4},{value:"16",paraId:18,tocIndex:4},{value:"precision",paraId:18,tocIndex:4},{value:"Decimal places for the converted value",paraId:18,tocIndex:4},{value:"number",paraId:18,tocIndex:4},{value:"5",paraId:18,tocIndex:4},{value:"mediaQuery",paraId:18,tocIndex:4},{value:"Whether to convert px in media queries",paraId:18,tocIndex:4},{value:"boolean",paraId:18,tocIndex:4},{value:"false",paraId:18,tocIndex:4},{value:"For more details, please refer to: ",paraId:19,tocIndex:4},{value:"px2rem.ts#Options",paraId:19,tocIndex:4},{value:"Since ",paraId:20,tocIndex:5},{value:"<style />",paraId:20,tocIndex:5},{value:" tag insertion is different from normal DOM in Shadow DOM scenario, you need to use ",paraId:20,tocIndex:5},{value:"StyleProvider",paraId:20,tocIndex:5},{value:" of ",paraId:20,tocIndex:5},{value:"@ant-design/cssinjs",paraId:20,tocIndex:5},{value:" to configure the ",paraId:20,tocIndex:5},{value:"container",paraId:20,tocIndex:5},{value:" property to set the insertion position:",paraId:20,tocIndex:5},{value:`import { StyleProvider } from '@ant-design/cssinjs';
import { createRoot } from 'react-dom/client';

const shadowRoot = someEle.attachShadow({ mode: 'open' });
const container = document.createElement('div');
shadowRoot.appendChild(container);
const root = createRoot(container);

root.render(
  <StyleProvider container={shadowRoot}>
    <MyApp />
  </StyleProvider>,
);
`,paraId:21,tocIndex:5}]},143789:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The following is a set of guidelines for contributing to Ant Design. Please spend several minutes reading these guidelines before you create an issue or pull request.",paraId:0},{value:"We have adopted a ",paraId:1,tocIndex:0},{value:"Code of Conduct",paraId:1,tocIndex:0},{value:" that we expect project participants to adhere to. Please read the full text so that you can understand what actions will and will not be tolerated.",paraId:1,tocIndex:0},{value:"All work on Ant Design happens directly on ",paraId:2,tocIndex:1},{value:"GitHub",paraId:2,tocIndex:1},{value:". Both core team members and external contributors send pull requests which go through the same review process.",paraId:2,tocIndex:1},{value:"According to our ",paraId:3,tocIndex:2},{value:"release schedule",paraId:4,tocIndex:2},{value:", we maintain two branches, ",paraId:3,tocIndex:2},{value:"master",paraId:3,tocIndex:2},{value:" and ",paraId:3,tocIndex:2},{value:"feature",paraId:3,tocIndex:2},{value:". If you send a bugfix pull request, please do it against the ",paraId:3,tocIndex:2},{value:"master",paraId:3,tocIndex:2},{value:" branch, if it's a feature pull request, please do it against the ",paraId:3,tocIndex:2},{value:"feature",paraId:3,tocIndex:2},{value:" branch.",paraId:3,tocIndex:2},{value:"We are using ",paraId:5,tocIndex:3},{value:"GitHub Issues",paraId:5,tocIndex:3},{value:" for bug tracking. The best way to get your bug fixed is by using our ",paraId:5,tocIndex:3},{value:"issue helper",paraId:5,tocIndex:3},{value:" and provide reproduction steps with this ",paraId:5,tocIndex:3},{value:"template",paraId:5,tocIndex:3},{value:".",paraId:5,tocIndex:3},{value:"Before you report a bug, please make sure you've searched existing issues, and read our ",paraId:6,tocIndex:3},{value:"FAQ",paraId:7,tocIndex:3},{value:".",paraId:6,tocIndex:3},{value:"If you intend to change the public API or introduce new feature, we also recommend you use our ",paraId:8,tocIndex:4},{value:"issue helper",paraId:8,tocIndex:4},{value:" to create a feature request issue.",paraId:8,tocIndex:4},{value:"If you want to help on new API, please reference ",paraId:9,tocIndex:4},{value:"API Naming Rules",paraId:9,tocIndex:4},{value:" to name it.",paraId:9,tocIndex:4},{value:"Working on your first Pull Request? You can learn how from this free video series:",paraId:10,tocIndex:5},{value:"How to Contribute to an Open Source Project on GitHub",paraId:11,tocIndex:5},{value:"To help you get your feet wet and get you familiar with our contribution process, we have a list of ",paraId:12,tocIndex:5},{value:"good first issues",paraId:12,tocIndex:5},{value:" that contain bugs or small features that have a relatively limited scope. This is a great place to get started.",paraId:12,tocIndex:5},{value:"If you decide to fix an issue, please be sure to check the comment thread in case somebody is already working on a fix. If nobody is working on it at the moment, please leave a comment stating that you intend to work on it so other people don't accidentally duplicate your effort.",paraId:13,tocIndex:5},{value:"If somebody claims an issue but doesn't follow up for more than two weeks, it's fine to take over it but you should still leave a comment.",paraId:14,tocIndex:5},{value:"The core team is monitoring for pull requests. We will review your pull request and either merge it, request changes to it, or close it with an explanation.",paraId:15,tocIndex:6},{value:"Before submitting a pull request",paraId:16,tocIndex:6},{value:", please make sure the following is done:",paraId:16,tocIndex:6},{value:"Fork the repository and create your branch from the ",paraId:17,tocIndex:6},{value:"correct branch",paraId:18,tocIndex:6},{value:".",paraId:17,tocIndex:6},{value:"Run ",paraId:17,tocIndex:6},{value:"npm install",paraId:17,tocIndex:6},{value:" in the repository root.",paraId:17,tocIndex:6},{value:"If you've fixed a bug or added code that should be tested, add tests!",paraId:17,tocIndex:6},{value:"Ensure the test suite passes (npm run test). Tip: ",paraId:17,tocIndex:6},{value:"npm test -- --watch TestName",paraId:17,tocIndex:6},{value:" is helpful in development.",paraId:17,tocIndex:6},{value:"Run ",paraId:17,tocIndex:6},{value:"npm test -- -u",paraId:17,tocIndex:6},{value:" to update the ",paraId:17,tocIndex:6},{value:"jest snapshots",paraId:17,tocIndex:6},{value:" and commit these changes as well (if there are any updates).",paraId:17,tocIndex:6},{value:"Ensure the UI change passes ",paraId:17,tocIndex:6},{value:"npm run test-image",paraId:17,tocIndex:6},{value:", Run ",paraId:17,tocIndex:6},{value:"npm run test-image -- -u",paraId:17,tocIndex:6},{value:" to update UI snapshots and commit these changes as well (if there are any updates), ",paraId:17,tocIndex:6},{value:"UI test base on ",paraId:17,tocIndex:6},{value:"Docker",paraId:17,tocIndex:6},{value:", need download the corresponding installation according to the platform",paraId:17,tocIndex:6},{value:"Make sure your code lints (npm run lint). Tip: Lint runs automatically when you ",paraId:17,tocIndex:6},{value:"git commit",paraId:17,tocIndex:6},{value:" (Use ",paraId:17,tocIndex:6},{value:"Git Hooks",paraId:17,tocIndex:6},{value:").",paraId:17,tocIndex:6},{value:"Finally, please make sure that all GitHub CI checks pass, if they fail, you can click ",paraId:17,tocIndex:6},{value:"detail",paraId:17,tocIndex:6},{value:" to enter the details to view the reason.",paraId:17,tocIndex:6},{value:"Sending a Pull Request to ",paraId:19,tocIndex:6},{value:"react-component",paraId:19,tocIndex:6},{value:":",paraId:19,tocIndex:6},{value:"Since antd's components are based on react-component, sometimes you may need to send pull request to the corresponding react-component repository. If it's a bugfix pull request, after it's merged, the core team will release a patch release for that component as soon as possible, then you only need to reinstall antd in your project to get the latest patch release. If it's a feature pull request, after it's merged, the core team will release a minor release, then you need raise another pull request to ",paraId:20,tocIndex:6},{value:"Ant Design",paraId:20,tocIndex:6},{value:" to update dependencies, document and TypeScript interfaces (if needed).",paraId:20,tocIndex:6},{value:"npm",paraId:21,tocIndex:7},{value:" or ",paraId:21,tocIndex:7},{value:"yarn",paraId:21,tocIndex:7},{value:" are recommended as package management tools.",paraId:21,tocIndex:7},{value:"After you clone the antd code and use following commands to install dependencies:",paraId:22,tocIndex:7},{value:"You can also run the following common commands:",paraId:23},{value:"Runs Ant Design website locally.",paraId:24,tocIndex:8},{value:"runs the complete test suite. (Make sure the ",paraId:25,tocIndex:10},{value:"NODE_ENV",paraId:25,tocIndex:10},{value:" environment variable is unset, or it may causing some problems.)",paraId:25,tocIndex:10},{value:"compiles TypeScript code to the ",paraId:26,tocIndex:11},{value:"lib",paraId:26,tocIndex:11},{value:" and ",paraId:26,tocIndex:11},{value:"es",paraId:26,tocIndex:11},{value:" directory.",paraId:26,tocIndex:11},{value:"creates UMD build of antd.",paraId:27,tocIndex:12},{value:"VSCode plugin for CSS in JS: ",paraId:28,tocIndex:13},{value:"https://marketplace.visualstudio.com/items?itemName=shezhangzhang.antd-design-token",paraId:28,tocIndex:13},{value:"Ant Design cheatsheet in VS Code: ",paraId:28,tocIndex:13},{value:"https://github.com/fi3ework/vscode-antd-rush",paraId:28,tocIndex:13},{value:"If you are an active contributor and are willing to work with Ant Design Team in our opensource workflow, you can ",paraId:29,tocIndex:14},{value:"apply to be a outside collaborator",paraId:29,tocIndex:14},{value:".",paraId:29,tocIndex:14},{value:"You can also refer to the following contribution guide to become an antd contributor:",paraId:30,tocIndex:14},{value:"How to Grow as a Collaborator",paraId:31,tocIndex:14}]},326740:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Since ",paraId:0},{value:"5.12.0",paraId:0},{value:", Ant Design 5.x enabled CSS variables again. Unlike 4.x, this time we have integrated the capabilities of CSS-in-JS, and all Design Tokens have been included in the management scope of CSS variables.",paraId:0},{value:"Currently, the CSS variable mode has been globally enabled on the official website.",paraId:1},{value:"CSS variable mode brings two important improvements to Ant Design's styling capabilities:",paraId:2,tocIndex:0},{value:"The styles of the same component under different themes can be shared, reducing the total size of the styles",paraId:3,tocIndex:0},{value:"When switching themes, there is no need to re-serialize the styles, which improves the performance of theme switching",paraId:3,tocIndex:0},{value:"Therefore, if your application depends on Ant Design's theme capabilities, we strongly recommend that you enable the CSS variable mode.",paraId:4,tocIndex:0},{value:"To enable CSS variable mode, use the ",paraId:5,tocIndex:1},{value:"cssVar",paraId:5,tocIndex:1},{value:" configuration in the ",paraId:5,tocIndex:1},{value:"theme",paraId:5,tocIndex:1},{value:" property of ConfigProvider. This configuration will be inherited, so if you want to enable CSS variable mode globally, you only need to configure it in the root of your application.",paraId:5,tocIndex:1},{value:"CSS variable mode requires a unique key for each theme to ensure style isolation. In React 18, we use ",paraId:6},{value:"useId",paraId:6},{value:" to generate unique keys by default, so you don't have to worry about this issue in React 18. But in React 17 or 16, you need to manually set a unique key for each theme, otherwise the themes will be mixed up.",paraId:6},{value:`// React 18
<ConfigProvider theme={{ cssVar: true }}>
  <App />
</ConfigProvider>

// React 17 or 16
<ConfigProvider theme={{ cssVar: { key: 'app' } }}>
  <App />
</ConfigProvider>
`,paraId:7},{value:"After enabling it, you can see that some specific values in the antd component styles have been replaced with CSS variables:",paraId:8},{value:"Hash is one of the features since Ant Design 5.0. Its function is to calculate a unique hash value for each theme, and use it in the class of the component to isolate the theme style.",paraId:9,tocIndex:3},{value:"However, after enabling CSS variables, the component styles of the same antd version will not change with the token \u2014\u2014 because we use CSS variables to fill in the dynamic parts of the styles. So if there is only one version of antd in your application, you can choose to disable hash to further reduce the total size of the styles:",paraId:10,tocIndex:3},{value:`<ConfigProvider theme={{ cssVar: true, hashed: false }}>
  <App />
</ConfigProvider>
`,paraId:11,tocIndex:3},{value:"By the way, we strongly recommend using ",paraId:12,tocIndex:3},{value:"extractStyle",paraId:12,tocIndex:3},{value:" to extract static styles, which will bring a certain amount of performance improvement to the application.",paraId:12,tocIndex:3},{value:"With CSS variable mode, the method of modifying the theme is the same as before, refer to ",paraId:13,tocIndex:4},{value:"Customize Theme",paraId:14,tocIndex:4},{value:".",paraId:13,tocIndex:4},{value:"cssVar",paraId:15,tocIndex:5},{value:" configuration:",paraId:15,tocIndex:5},{value:"Properties",paraId:16,tocIndex:5},{value:"Description",paraId:16,tocIndex:5},{value:"Type",paraId:16,tocIndex:5},{value:"Default",paraId:16,tocIndex:5},{value:"Version",paraId:16,tocIndex:5},{value:"prefix",paraId:16,tocIndex:5},{value:"Prefix of CSS Variables",paraId:16,tocIndex:5},{value:"string",paraId:16,tocIndex:5},{value:"ant",paraId:16,tocIndex:5},{value:"5.12.0",paraId:16,tocIndex:5},{value:"key",paraId:16,tocIndex:5},{value:"The unique key of theme. Automatically set by ",paraId:16,tocIndex:5},{value:"useId",paraId:16,tocIndex:5},{value:" in React 18, but need to be set manually in React 17 or 16",paraId:16,tocIndex:5},{value:"string",paraId:16,tocIndex:5},{value:"useId",paraId:16,tocIndex:5},{value:" in React 18",paraId:16,tocIndex:5},{value:"5.12.0",paraId:16,tocIndex:5}]},375306:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Ant Design allows you to customize our design tokens to satisfy UI diversity from business or brand requirements, including primary color, border radius, border color, etc.",paraId:0},{value:"In version 5.0, we provide a new way to customize themes. Different from the less and CSS variables of the 4.x version, with CSS-in-JS, the ability of theming has also been enhanced, including but not limited to:",paraId:1},{value:"Switching theme dynamically\uFF1B",paraId:2},{value:"Multiple themes\uFF1B",paraId:2},{value:"Customizing theme variables for some component\uFF1B",paraId:2},{value:"...",paraId:2},{value:"In version 5.0 we call the smallest element that affects the theme ",paraId:3,tocIndex:0},{value:"Design Token",paraId:3,tocIndex:0},{value:". By modifying the Design Token, we can present various themes or components. You can pass ",paraId:3,tocIndex:0},{value:"theme",paraId:3,tocIndex:0},{value:" to `ConfigProvider`` to customize theme. After migrate to V5, theme of V5 will be applied by default",paraId:3,tocIndex:0},{value:"ConfigProvider",paraId:4},{value:" will not take effect on static methods such as ",paraId:4},{value:"message.xxx",paraId:4},{value:", ",paraId:4},{value:"Modal.xxx",paraId:4},{value:", ",paraId:4},{value:"notification.xxx",paraId:4},{value:", because in these methods, antd will dynamically create new ones through ",paraId:4},{value:"ReactDOM.render",paraId:4},{value:" React entities. Its context is not the same as the context of the current code, so context information cannot be obtained.",paraId:4},{value:"When you need context information (such as the content configured by ConfigProvider), you can use the ",paraId:5},{value:"Modal.useModal",paraId:5},{value:" method to return the modal entity and the contextHolder node. Just insert it where you need to get the context, or you can use ",paraId:5},{value:"App Component",paraId:6},{value:" to simplify the problem of usingModal and other methods that need to manually implant the contextHolder.",paraId:5},{value:"By modifying ",paraId:7,tocIndex:1},{value:"token",paraId:7,tocIndex:1},{value:" property of ",paraId:7,tocIndex:1},{value:"theme",paraId:7,tocIndex:1},{value:", we can modify Design Token globally. Some tokens will affect other tokens. We call these tokens Seed Token.",paraId:7,tocIndex:1},{value:`const sandpackConfig = {
  autorun: true,
};

import { Button, ConfigProvider, Space } from 'antd';
import React from 'react';

const App: React.FC = () => (
  <ConfigProvider
    theme={{
      token: {
        // Seed Token
        colorPrimary: '#00b96b',
        borderRadius: 2,

        // Alias Token
        colorBgContainer: '#f6ffed',
      },
    }}
  >
    <Space>
      <Button type="primary">Primary</Button>
      <Button>Default</Button>
    </Space>
  </ConfigProvider>
);

export default App;
`,paraId:8,tocIndex:1},{value:"Themes with different styles can be quickly generated by modifying ",paraId:9,tocIndex:2},{value:"algorithm",paraId:9,tocIndex:2},{value:". Ant Design 5.0 provides three sets of preset algorithms by default:",paraId:9,tocIndex:2},{value:"default algorithm ",paraId:10,tocIndex:2},{value:"theme.defaultAlgorithm",paraId:10,tocIndex:2},{value:"dark algorithm ",paraId:10,tocIndex:2},{value:"theme.darkAlgorithm",paraId:10,tocIndex:2},{value:"compact algorithm ",paraId:10,tocIndex:2},{value:"theme.compactAlgorithm",paraId:10,tocIndex:2},{value:"You can switch algorithms by modifying the ",paraId:11,tocIndex:2},{value:"algorithm",paraId:11,tocIndex:2},{value:" property of ",paraId:11,tocIndex:2},{value:"theme",paraId:11,tocIndex:2},{value:" in ConfigProvider.",paraId:11,tocIndex:2},{value:`const sandpackConfig = {
  dark: true,
};

import React from 'react';
import { Button, ConfigProvider, Input, Space, theme } from 'antd';

const App: React.FC = () => (
  <ConfigProvider
    theme={{
      // 1. Use dark algorithm
      algorithm: theme.darkAlgorithm,

      // 2. Combine dark algorithm and compact algorithm
      // algorithm: [theme.darkAlgorithm, theme.compactAlgorithm],
    }}
  >
    <Space>
      <Input placeholder="Please Input" />
      <Button type="primary">Submit</Button>
    </Space>
  </ConfigProvider>
);

export default App;
`,paraId:12,tocIndex:2},{value:"In addition to Design Token, each component will also have its own Component Token to achieve style customization capabilities for components, and different components will not affect each other. Similarly, other Design Token of components can also be overridden in this way.",paraId:13,tocIndex:3},{value:"By default, all component tokens can only override global token and will not be derived based on Seed Token.",paraId:14},{value:"In version ",paraId:15},{value:">= 5.8.0",paraId:15},{value:", component tokens support the ",paraId:15},{value:"algorithm",paraId:15},{value:" property, which can be used to enable algorithm or pass in other algorithms.",paraId:15},{value:`import React from 'react';
import { ConfigProvider, Button, Space, Input, Divider } from 'antd';

const App: React.FC = () => (
  <>
    <ConfigProvider
      theme={{
        components: {
          Button: {
            colorPrimary: '#00b96b',
            algorithm: true, // Enable algorithm
          },
          Input: {
            colorPrimary: '#eb2f96',
            algorithm: true, // Enable algorithm
          }
        },
      }}
    >
      <Space>
        <div style={{ fontSize: 14 }}>Enable algorithm: </div>
        <Input placeholder="Please Input" />
        <Button type="primary">Submit</Button>
      </Space>
    </ConfigProvider>
    <Divider />
    <ConfigProvider
      theme={{
        components: {
          Button: {
            colorPrimary: '#00b96b',
          },
          Input: {
            colorPrimary: '#eb2f96',
          }
        },
      }}
    >
      <Space>
        <div style={{ fontSize: 14 }}>Disable algorithm: </div>
        <Input placeholder="Please Input" />
        <Button type="primary">Submit</Button>
      </Space>
    </ConfigProvider>
  </>
);

export default App;
`,paraId:16},{value:"antd has built-in interaction animations to make enterprise-level pages more detailed. In some extreme scenarios, it may affect the performance of page interaction. If you need to turn off the animation, try seting ",paraId:17,tocIndex:4},{value:"motion",paraId:17,tocIndex:4},{value:" of ",paraId:17,tocIndex:4},{value:"token",paraId:17,tocIndex:4},{value:" to ",paraId:17,tocIndex:4},{value:"false",paraId:17,tocIndex:4},{value:":",paraId:17,tocIndex:4},{value:`import React from 'react';
import { Checkbox, Col, ConfigProvider, Flex, Radio, Row, Switch } from 'antd';

const App: React.FC = () => {
  const [checked, setChecked] = React.useState<boolean>(false);
  const timerRef = React.useRef<ReturnType<typeof setInterval>>();
  React.useEffect(() => {
    timerRef.current = setInterval(() => {
      setChecked((prev) => !prev);
    }, 500);
    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, []);

  const nodes = (
    <Flex gap="small">
      <Checkbox checked={checked}>Checkbox</Checkbox>
      <Radio checked={checked}>Radio</Radio>
      <Switch checked={checked} />
    </Flex>
  );

  return (
    <Row gutter={[24, 24]}>
      <Col span={24}>{nodes}</Col>
      <Col span={24}>
        <ConfigProvider theme={{ token: { motion: false } }}>{nodes}</ConfigProvider>
      </Col>
    </Row>
  );
};

export default App;
`,paraId:18,tocIndex:4},{value:"In v5, dynamically switching themes is very simple for users, you can dynamically switch themes at any time through the ",paraId:19,tocIndex:6},{value:"theme",paraId:19,tocIndex:6},{value:" property of ",paraId:19,tocIndex:6},{value:"ConfigProvider",paraId:19,tocIndex:6},{value:" without any additional configuration.",paraId:19,tocIndex:6},{value:`import { Button, ConfigProvider, Space, Input, ColorPicker, Divider } from 'antd';
import React from 'react';

const App: React.FC = () => {
  const [primary, setPrimary] = React.useState('#1677ff');

  return (
    <>
      <ColorPicker showText value={primary} onChangeComplete={(color) => setPrimary(color.toHexString())} />
      <Divider />
      <ConfigProvider
        theme={{
          token: {
            colorPrimary: primary,
          },
        }}
      >
        <Space>
          <Input placeholder="Please Input" />
          <Button type="primary">Submit</Button>
        </Space>
      </ConfigProvider>
    </>
  );
}

export default App;
`,paraId:20,tocIndex:6},{value:"By nesting ",paraId:21,tocIndex:7},{value:"ConfigProvider",paraId:21,tocIndex:7},{value:" you can apply local theme to some parts of your page. Design Tokens that have not been changed in the child theme will inherit the parent theme.",paraId:21,tocIndex:7},{value:`import React from 'react';
import { Button, ConfigProvider, Space } from 'antd';

const App: React.FC = () => (
  <ConfigProvider
    theme={{
      token: {
        colorPrimary: '#1677ff',
      },
    }}
  >
    <Space>
      <Button type="primary">Theme 1</Button>
      <ConfigProvider
        theme={{
          token: {
            colorPrimary: '#00b96b',
          },
        }}
      >
        <Button type="primary">Theme 2</Button>
      </ConfigProvider>
    </Space>
  </ConfigProvider>
);

export default App;
`,paraId:22,tocIndex:7},{value:"If you want to consume the Design Token under the current theme, we provide ",paraId:23,tocIndex:8},{value:"useToken",paraId:23,tocIndex:8},{value:" hook to get Design Token.",paraId:23,tocIndex:8},{value:`import React from 'react';
import { Button, theme } from 'antd';

const { useToken } = theme;

const App: React.FC = () => {
  const { token } = useToken();

  return (
    <div
      style={{
        backgroundColor: token.colorPrimaryBg,
        padding: token.padding,
        borderRadius: token.borderRadius,
        color: token.colorPrimaryText,
        fontSize: token.fontSize,
      }}
    >
      Consume Design Token
    </div>
  );
};

export default App;
`,paraId:24,tocIndex:8},{value:"When you need token out of React life cycle, you can use static function to get them:",paraId:25,tocIndex:9},{value:`import { theme } from 'antd';

const { getDesignToken } = theme;

const globalToken = getDesignToken();
`,paraId:26,tocIndex:9},{value:"Same as ConfigProvider, ",paraId:27,tocIndex:9},{value:"getDesignToken",paraId:27,tocIndex:9},{value:" could also accept a config object as ",paraId:27,tocIndex:9},{value:"theme",paraId:27,tocIndex:9},{value:":",paraId:27,tocIndex:9},{value:`import type { ThemeConfig } from 'antd';
import { theme } from 'antd';
import { createRoot } from 'react-dom/client';

const { getDesignToken, useToken } = theme;

const config: ThemeConfig = {
  token: {
    colorPrimary: '#1890ff',
  },
};

// By static function
const globalToken = getDesignToken(config);

// By hook
const App = () => {
  const { token } = useToken();
  return null;
};

// Example for rendering
createRoot(document.getElementById('#app')).render(
  <ConfigProvider theme={config}>
    <App />
  </ConfigProvider>,
);
`,paraId:28,tocIndex:9},{value:"If you want to use in preprocess style framework like less, use less-loader for injection:",paraId:29,tocIndex:9},{value:`{
  loader: "less-loader",
  options: {
    lessOptions: {
      modifyVars: mapToken,
    },
  },
}
`,paraId:30,tocIndex:9},{value:"Compatible package provide convert function to transform to v4 less variable. Read ",paraId:31,tocIndex:9},{value:"this",paraId:32,tocIndex:9},{value:" for detail.",paraId:31,tocIndex:9},{value:"We provide tools to help users debug themes: ",paraId:33,tocIndex:10},{value:"Theme Editor",paraId:34,tocIndex:10},{value:"You can use this tool to freely modify Design Token to meet your theme expectations.",paraId:35,tocIndex:10},{value:"In Design Token, we provide a three-layer structure that is more suitable for the design, and disassemble the Design Token into three parts: Seed Token, Map Token and Alias Token. These three groups of Tokens are not simple groupings, but a three-layer derivation relationship. Map Tokens are derived from Seed Tokens, and Alias Tokens are derived from Map Tokens. In most cases, using Seed Tokens is sufficient for custom themes. But if you need a higher degree of theme customization, you need to understand the life cycle of Design Token in antd.",paraId:36,tocIndex:11},{value:"Seed Token means the origin of all design intent. For example, we can change the theme color by changing ",paraId:37,tocIndex:13},{value:"colorPrimary",paraId:37,tocIndex:13},{value:", and the algorithm inside antd will automatically calculate and apply a series of corresponding colors according to the Seed Token:",paraId:37,tocIndex:13},{value:`const theme = {
  token: {
    colorPrimary: '#1890ff',
  },
};
`,paraId:38,tocIndex:13},{value:"Map Token is a gradient variable derived from Seed. It is recommended to implement custom Map Token through ",paraId:39,tocIndex:14},{value:"theme.algorithm",paraId:39,tocIndex:14},{value:", which can ensure the gradient relationship between Map Tokens. It can also be overridden by ",paraId:39,tocIndex:14},{value:"theme.token",paraId:39,tocIndex:14},{value:" to modify the value of some map tokens individually.",paraId:39,tocIndex:14},{value:`const theme = {
  token: {
    colorPrimaryBg: '#e6f7ff',
  },
};
`,paraId:40,tocIndex:14},{value:"Alias Token is used to control the style of some common components in batches, which is basically a Map Token alias, or a specially processed Map Token.",paraId:41,tocIndex:15},{value:`const theme = {
  token: {
    colorLink: '#1890ff',
  },
};
`,paraId:42,tocIndex:15},{value:"The basic algorithm is used to expand the Seed Token into a Map Token, such as calculating a gradient color palette from a basic color, or calculating rounded corners of various sizes from a basic rounded corner. Algorithms can be used alone or in any combination, for example, dark and compact algorithms can be combined to get a dark and compact theme.",paraId:43,tocIndex:16},{value:`import { theme } from 'antd';

const { darkAlgorithm, compactAlgorithm } = theme;

const theme = {
  algorithm: [darkAlgorithm, compactAlgorithm],
};
`,paraId:44,tocIndex:16},{value:"Property",paraId:45,tocIndex:18},{value:"Description",paraId:45,tocIndex:18},{value:"Type",paraId:45,tocIndex:18},{value:"Default",paraId:45,tocIndex:18},{value:"token",paraId:45,tocIndex:18},{value:"Modify Design Token",paraId:45,tocIndex:18},{value:"AliasToken",paraId:45,tocIndex:18},{value:"-",paraId:45,tocIndex:18},{value:"inherit",paraId:45,tocIndex:18},{value:"Inherit theme configured in upper ConfigProvider",paraId:45,tocIndex:18},{value:"boolean",paraId:45,tocIndex:18},{value:"true",paraId:45,tocIndex:18},{value:"algorithm",paraId:45,tocIndex:18},{value:"Modify the algorithms of theme",paraId:45,tocIndex:18},{value:"(token: SeedToken) => MapToken",paraId:45,tocIndex:18},{value:" | ",paraId:45,tocIndex:18},{value:"((token: SeedToken) => MapToken)[]",paraId:45,tocIndex:18},{value:"defaultAlgorithm",paraId:45,tocIndex:18},{value:"components",paraId:45,tocIndex:18},{value:"Modify Component Token and Alias Token applied to components",paraId:45,tocIndex:18},{value:"ComponentsConfig",paraId:45,tocIndex:18},{value:"-",paraId:45,tocIndex:18},{value:"Property",paraId:46,tocIndex:19},{value:"Description",paraId:46,tocIndex:19},{value:"Type",paraId:46,tocIndex:19},{value:"Default",paraId:46,tocIndex:19},{value:"Component",paraId:46,tocIndex:19},{value:" (Can be any antd Component name like ",paraId:46,tocIndex:19},{value:"Button",paraId:46,tocIndex:19},{value:")",paraId:46,tocIndex:19},{value:"Modify Component Token or override Component used Alias Token",paraId:46,tocIndex:19},{value:"ComponentToken & AliasToken & { algorithm: boolean | (token: SeedToken) => MapToken",paraId:46,tocIndex:19},{value:" | ",paraId:46,tocIndex:19},{value:"((token: SeedToken) => MapToken)[]}",paraId:46,tocIndex:19},{value:"-",paraId:46,tocIndex:19},{value:"algorithm",paraId:47,tocIndex:19},{value:" of component is ",paraId:47,tocIndex:19},{value:"false",paraId:47,tocIndex:19},{value:" by default, which means tokens of component will only override global token. When it is set with ",paraId:47,tocIndex:19},{value:"true",paraId:47,tocIndex:19},{value:", the algorithm will be the same as global. You can also pass algorithm or Array of algorithm, and it will override algorithm of global.",paraId:47,tocIndex:19},{value:"Inherit all SeedToken properties",paraId:48,tocIndex:21},{value:"Inherit all SeedToken and MapToken properties",paraId:49,tocIndex:22},{value:"theme",paraId:50},{value:"undefined",paraId:50},{value:"undefined",paraId:50},{value:"In ConfigProvider, we pass context through ",paraId:51,tocIndex:24},{value:"DesignTokenContext",paraId:51,tocIndex:24},{value:". When ",paraId:51,tocIndex:24},{value:"theme",paraId:51,tocIndex:24},{value:" is ",paraId:51,tocIndex:24},{value:"undefined",paraId:51,tocIndex:24},{value:", a layer of Provider will not be set, so React VirtualDOM structure changes from scratch or from existence to nothing, causing components to be re-mounted. Solution: Replace ",paraId:51,tocIndex:24},{value:"undefined",paraId:51,tocIndex:24},{value:" with an empty object ",paraId:51,tocIndex:24},{value:"{}",paraId:51,tocIndex:24},{value:".",paraId:51,tocIndex:24}]},633936:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Here are the frequently asked questions about Ant Design and antd that you should look up before you ask in the community or create a new issue. We also maintain a ",paraId:0},{value:"FAQ issues label",paraId:0},{value:" for common github issues.",paraId:0},{value:"undefined",paraId:1},{value:"null",paraId:1},{value:"antd",paraId:1},{value:"Yes. antd will treat ",paraId:2,tocIndex:0},{value:"undefined",paraId:2,tocIndex:0},{value:" as uncontrolled but ",paraId:2,tocIndex:0},{value:"null",paraId:2,tocIndex:0},{value:" as controlled component which means empty value of it.",paraId:2,tocIndex:0},{value:"As input element, React treats both ",paraId:3,tocIndex:0},{value:"undefined",paraId:3,tocIndex:0},{value:" and ",paraId:3,tocIndex:0},{value:"null",paraId:3,tocIndex:0},{value:" as uncontrolled. When the ",paraId:3,tocIndex:0},{value:"value",paraId:3,tocIndex:0},{value:" is converted from a valid value to ",paraId:3,tocIndex:0},{value:"undefined",paraId:3,tocIndex:0},{value:" or ",paraId:3,tocIndex:0},{value:"null",paraId:3,tocIndex:0},{value:", the component is no longer controlled, which causes some unexpected cases.",paraId:3,tocIndex:0},{value:"But in antd, ",paraId:4,tocIndex:0},{value:"undefined",paraId:4,tocIndex:0},{value:" is treated as uncontrolled, and ",paraId:4,tocIndex:0},{value:"null",paraId:4,tocIndex:0},{value:" is used as an explicit empty value of controlled components. To deal with some cases (e.g. ",paraId:4,tocIndex:0},{value:"allowClear",paraId:4,tocIndex:0},{value:") like clearing the ",paraId:4,tocIndex:0},{value:"value",paraId:4,tocIndex:0},{value:" when the ",paraId:4,tocIndex:0},{value:"value",paraId:4,tocIndex:0},{value:" is non-primitive. If you need a component controlled with the ",paraId:4,tocIndex:0},{value:"value",paraId:4,tocIndex:0},{value:" valid, just set the ",paraId:4,tocIndex:0},{value:"value",paraId:4,tocIndex:0},{value:" as ",paraId:4,tocIndex:0},{value:"null",paraId:4,tocIndex:0},{value:".",paraId:4,tocIndex:0},{value:"Note: For ",paraId:5,tocIndex:0},{value:"options",paraId:5,tocIndex:0},{value:" in ",paraId:5,tocIndex:0},{value:"Select-like",paraId:5,tocIndex:0},{value:" components, it is ",paraId:5,tocIndex:0},{value:"strongly recommended not",paraId:5,tocIndex:0},{value:" to use ",paraId:5,tocIndex:0},{value:"undefined",paraId:5,tocIndex:0},{value:" and ",paraId:5,tocIndex:0},{value:"null",paraId:5,tocIndex:0},{value:" as ",paraId:5,tocIndex:0},{value:"value",paraId:5,tocIndex:0},{value:" in ",paraId:5,tocIndex:0},{value:"option",paraId:5,tocIndex:0},{value:". Please use ",paraId:5,tocIndex:0},{value:"string | number",paraId:5,tocIndex:0},{value:" as a valid ",paraId:5,tocIndex:0},{value:"value",paraId:5,tocIndex:0},{value:" in ",paraId:5,tocIndex:0},{value:"option",paraId:5,tocIndex:0},{value:".",paraId:5,tocIndex:0},{value:"NOT RECOMMENDED. Internal API is not guaranteed to be compatible with future versions. It may be removed or changed in some versions. If you really need to use it, you should make sure these APIs are still valid when upgrading to a new version or just lock version for usage.",paraId:6,tocIndex:1},{value:"We are cautious when adding APIs because some APIs may not be abstract enough to become historical debt. For example, when there is a need to change the way of interaction, these poor abstractions may cause breaking changes. To avoid such problems, we recommend that new features be implemented through HOCs first.",paraId:7,tocIndex:2},{value:"Select Dropdown DatePicker TimePicker Popover Popconfirm",paraId:1},{value:"This is an old bug that has been fixed since ",paraId:8,tocIndex:3},{value:"v3.11.x",paraId:8,tocIndex:3},{value:". If you're using an older version, you can use ",paraId:8,tocIndex:3},{value:"<Select getPopupContainer={trigger => trigger.parentElement}>",paraId:8,tocIndex:3},{value:" to render a component inside Popover. (Or other ",paraId:8,tocIndex:3},{value:"getXxxxContainer",paraId:8,tocIndex:3},{value:" props)",paraId:8,tocIndex:3},{value:"https://ant.design/components/select/#Select-props",paraId:9,tocIndex:3},{value:"Related issue: ",paraId:10,tocIndex:3},{value:"#3487",paraId:10,tocIndex:3},{value:" ",paraId:10,tocIndex:3},{value:"#3438",paraId:10,tocIndex:3},{value:"Select Dropdown DatePicker TimePicker Popover Popconfirm",paraId:1},{value:"Use ",paraId:11,tocIndex:4},{value:"<Select getPopupContainer={trigger => trigger.parentElement}>",paraId:11,tocIndex:4},{value:" (",paraId:11,tocIndex:4},{value:"API reference",paraId:12,tocIndex:4},{value:") to render a component inside the scroll area. If you need to config this globally in your application, try ",paraId:11,tocIndex:4},{value:"<ConfigProvider getPopupContainer={trigger => trigger.parentElement}>",paraId:11,tocIndex:4},{value:" (",paraId:11,tocIndex:4},{value:"API reference",paraId:13,tocIndex:4},{value:")",paraId:11,tocIndex:4},{value:"And make sure that parentElement is ",paraId:14,tocIndex:4},{value:"position: relative",paraId:14,tocIndex:4},{value:" or ",paraId:14,tocIndex:4},{value:"position: absolute",paraId:14,tocIndex:4},{value:".",paraId:14,tocIndex:4},{value:"Related issue: ",paraId:15,tocIndex:4},{value:"#3487",paraId:15,tocIndex:4},{value:" ",paraId:15,tocIndex:4},{value:"#3438",paraId:15,tocIndex:4},{value:"See: ",paraId:16,tocIndex:5},{value:"customize-theme",paraId:17,tocIndex:5},{value:".",paraId:16,tocIndex:5},{value:"Menu",paraId:1},{value:"Button",paraId:1},{value:"While you can override a component's style, we don't recommend doing so. antd is not only a set of React components, but also a design specification as well.",paraId:18,tocIndex:6},{value:"antd will avoid breaking change in minor & patch version. You can safe do follow things:",paraId:19,tocIndex:7},{value:"Official demo usage",paraId:20,tocIndex:7},{value:"FAQ suggestion. Including codesandbox sample, marked as FAQ issue",paraId:20,tocIndex:7},{value:"And which you should avoid to do:",paraId:21,tocIndex:7},{value:"Bug as feature. It will break in any other case (e.g. Use div as Tabs children)",paraId:22,tocIndex:7},{value:"Use magic code to realize requirement but which can be realized with normal API",paraId:22,tocIndex:7},{value:"Please refer to ",paraId:23,tocIndex:8},{value:"Use custom date library",paraId:24,tocIndex:8},{value:".",paraId:23,tocIndex:8},{value:"defaultValue",paraId:1},{value:"The ",paraId:25,tocIndex:9},{value:"defaultXxxx",paraId:25,tocIndex:9},{value:" (e.g. ",paraId:25,tocIndex:9},{value:"defaultValue",paraId:25,tocIndex:9},{value:") of ",paraId:25,tocIndex:9},{value:"Input",paraId:25,tocIndex:9},{value:"/",paraId:25,tocIndex:9},{value:"Select",paraId:25,tocIndex:9},{value:"(etc...) only works on the first render. It is a specification of React. Please read ",paraId:25,tocIndex:9},{value:"React's documentation",paraId:25,tocIndex:9},{value:".",paraId:25,tocIndex:9},{value:"antd use shallow compare of props to optimize performance. You should always pass the new object when updating the state. Please ref ",paraId:26,tocIndex:10},{value:"React's document",paraId:26,tocIndex:10},{value:"value",paraId:1},{value:"Input",paraId:1},{value:"Select",paraId:1},{value:"Try ",paraId:27,tocIndex:11},{value:"onChange",paraId:27,tocIndex:11},{value:" to change ",paraId:27,tocIndex:11},{value:"value",paraId:27,tocIndex:11},{value:", and please read ",paraId:27,tocIndex:11},{value:"React's documentation",paraId:27,tocIndex:11},{value:".",paraId:27,tocIndex:11},{value:"Try ",paraId:28,tocIndex:12},{value:"Space",paraId:28,tocIndex:12},{value:" component to make them aligned.",paraId:28,tocIndex:12},{value:"Yes, antd is designed to help you develop a complete background application. To do so, we override some global styles for styling convenience, and currently these cannot be removed or changed. More info at ",paraId:29,tocIndex:13},{value:"https://github.com/ant-design/ant-design/issues/4331",paraId:29,tocIndex:13},{value:" .",paraId:29,tocIndex:13},{value:"Alternatively, follow the instructions in ",paraId:30,tocIndex:13},{value:"How to avoid modifying global styles?",paraId:31,tocIndex:13},{value:"antd",paraId:1},{value:"antd",paraId:1},{value:"To potentially solve this, try ",paraId:32,tocIndex:14},{value:"npm mirror china",paraId:32,tocIndex:14},{value:" and ",paraId:32,tocIndex:14},{value:"cnpm",paraId:32,tocIndex:14},{value:".",paraId:32,tocIndex:14},{value:"dependencies.antd",paraId:1},{value:"package.json",paraId:1},{value:"Please install ",paraId:33,tocIndex:15},{value:"antd",paraId:33,tocIndex:15},{value:" with either npm or yarn.",paraId:33,tocIndex:15},{value:"message",paraId:1},{value:"notification",paraId:1},{value:"No, ",paraId:34,tocIndex:16},{value:"message",paraId:34,tocIndex:16},{value:" is just a function, not a React Component, thus it is not a typo that it is in lower case.",paraId:34,tocIndex:16},{value:"antd",paraId:1},{value:"Please check ",paraId:35,tocIndex:17},{value:"Ant Design Mobile",paraId:35,tocIndex:17},{value:" as a possible solution, as ",paraId:35,tocIndex:17},{value:"antd",paraId:35,tocIndex:17},{value:" has not been optimized to work well on mobile. You can also try the ",paraId:35,tocIndex:17},{value:"react-component",paraId:35,tocIndex:17},{value:" repositories which start with 'm-' 'rn-', which are also designed for mobile.",paraId:35,tocIndex:17},{value:"antd",paraId:1},{value:"Yes, you can ",paraId:36,tocIndex:18},{value:"import ",paraId:36,tocIndex:18},{value:"antd",paraId:36,tocIndex:18},{value:" with script tag",paraId:36,tocIndex:18},{value:", but we recommend using ",paraId:36,tocIndex:18},{value:"npm",paraId:36,tocIndex:18},{value:" to import ",paraId:36,tocIndex:18},{value:"antd",paraId:36,tocIndex:18},{value:", as it is simple and easy to maintain.",paraId:36,tocIndex:18},{value:"If you need some features which should not be included in antd, try to extend antd's component with ",paraId:37,tocIndex:19},{value:"HOC",paraId:37,tocIndex:19},{value:". ",paraId:37,tocIndex:19},{value:"more",paraId:37,tocIndex:19},{value:"antd expose the basic component definitions. For the unexposed props, you can get them via the utility types provided by antd. For example:",paraId:38,tocIndex:20},{value:`import type { Checkbox, CheckboxProps, GetProp, GetProps, GetRef, Input } from 'antd';

// Get Props
type CheckboxGroupProps = GetProps<typeof Checkbox.Group>;

// Get Prop
type CheckboxValue = GetProp<CheckboxProps, 'value'>;

// Get Ref
type InputRef = GetRef<typeof Input>;
`,paraId:39,tocIndex:20},{value:"Please check whether you have imported dayjs locale correctly.",paraId:40,tocIndex:21},{value:`import 'dayjs/locale/zh-cn';

dayjs.locale('zh-cn');
`,paraId:41,tocIndex:21},{value:"Please check whether there are two versions of dayjs installed.",paraId:42,tocIndex:21},{value:`npm ls dayjs
`,paraId:43,tocIndex:21},{value:"If you are using a mismatched version of dayjs with ",paraId:44,tocIndex:21},{value:"antd's dayjs",paraId:44,tocIndex:21},{value:" in your project. That would be a problem cause locale not working.",paraId:44,tocIndex:21},{value:"You can configure ",paraId:45,tocIndex:22},{value:"nonce",paraId:45,tocIndex:22},{value:" by ",paraId:45,tocIndex:22},{value:"ConfigProvider",paraId:46,tocIndex:22},{value:".",paraId:45,tocIndex:22},{value:"mode",paraId:1},{value:"DatePicker",paraId:1},{value:"RangePicker",paraId:1},{value:"In a real world development, you may need a ",paraId:47,tocIndex:23},{value:"YearPicker",paraId:47,tocIndex:23},{value:", ",paraId:47,tocIndex:23},{value:"MonthRangePicker",paraId:47,tocIndex:23},{value:" or ",paraId:47,tocIndex:23},{value:"WeekRangePicker",paraId:47,tocIndex:23},{value:". You are trying to add ",paraId:47,tocIndex:23},{value:"mode",paraId:47,tocIndex:23},{value:" to ",paraId:47,tocIndex:23},{value:"DatePicker",paraId:47,tocIndex:23},{value:"/",paraId:47,tocIndex:23},{value:"RangePicker",paraId:47,tocIndex:23},{value:" expected to implement those pickers. However, the ",paraId:47,tocIndex:23},{value:"DatePicker",paraId:47,tocIndex:23},{value:"/",paraId:47,tocIndex:23},{value:"RangePicker",paraId:47,tocIndex:23},{value:" cannot be selected and the panels won't close now.",paraId:47,tocIndex:23},{value:"Reproduction link: ",paraId:48,tocIndex:23},{value:"https://codesandbox.io/s/dank-brook-v1csy",paraId:48,tocIndex:23},{value:"Same issues\uFF1A",paraId:48,tocIndex:23},{value:"#15572",paraId:48,tocIndex:23},{value:", ",paraId:48,tocIndex:23},{value:"#16436",paraId:48,tocIndex:23},{value:", ",paraId:48,tocIndex:23},{value:"#11938",paraId:48,tocIndex:23},{value:", ",paraId:48,tocIndex:23},{value:"#11735",paraId:48,tocIndex:23},{value:", ",paraId:48,tocIndex:23},{value:"#11586",paraId:48,tocIndex:23},{value:", ",paraId:48,tocIndex:23},{value:"#10425",paraId:48,tocIndex:23},{value:", ",paraId:48,tocIndex:23},{value:"#11053",paraId:48,tocIndex:23},{value:"Like ",paraId:49,tocIndex:23},{value:"the explanation",paraId:49,tocIndex:23},{value:" explains, this is because ",paraId:49,tocIndex:23},{value:'<DatePicker mode="year" />',paraId:49,tocIndex:23},{value:" does not equal the ",paraId:49,tocIndex:23},{value:"YearPicker",paraId:49,tocIndex:23},{value:", nor is ",paraId:49,tocIndex:23},{value:'<RangePicker mode="month" />',paraId:49,tocIndex:23},{value:" equal to ",paraId:49,tocIndex:23},{value:"MonthRangePicker",paraId:49,tocIndex:23},{value:". The ",paraId:49,tocIndex:23},{value:"mode",paraId:49,tocIndex:23},{value:" property was added to support ",paraId:49,tocIndex:23},{value:"showing time picker panel in DatePicker",paraId:49,tocIndex:23},{value:" in antd 3.0, which simply controls the displayed panel, and won't change the original date picking behavior of ",paraId:49,tocIndex:23},{value:"DatePicker",paraId:49,tocIndex:23},{value:"/",paraId:49,tocIndex:23},{value:"RangePicker",paraId:49,tocIndex:23},{value:" (for instance you will still need to click date cell to finish selection in a ",paraId:49,tocIndex:23},{value:"DatePicker",paraId:49,tocIndex:23},{value:", whatever the ",paraId:49,tocIndex:23},{value:"mode",paraId:49,tocIndex:23},{value:" is).",paraId:49,tocIndex:23},{value:"Likewise, ",paraId:50,tocIndex:23},{value:"disabledDate",paraId:50,tocIndex:23},{value:" ",paraId:50,tocIndex:23},{value:"cannot work on year/month panels",paraId:50,tocIndex:23},{value:" of ",paraId:50,tocIndex:23},{value:'<DatePicker mode="year/month" />',paraId:50,tocIndex:23},{value:", but only on cells of date panel.",paraId:50,tocIndex:23},{value:"You can refer to ",paraId:51,tocIndex:24},{value:"this article",paraId:51,tocIndex:24},{value:" or ",paraId:51,tocIndex:24},{value:"this article",paraId:51,tocIndex:24},{value:", using ",paraId:51,tocIndex:24},{value:"mode",paraId:51,tocIndex:24},{value:" and ",paraId:51,tocIndex:24},{value:"onPanelChange",paraId:51,tocIndex:24},{value:" to encapsulate a ",paraId:51,tocIndex:24},{value:"YearPicker",paraId:51,tocIndex:24},{value:" or ",paraId:51,tocIndex:24},{value:"MonthRangePicker",paraId:51,tocIndex:24},{value:" for your needs.",paraId:51,tocIndex:24},{value:"Or you can simply upgrade to ",paraId:52,tocIndex:24},{value:"antd@4.0",paraId:52,tocIndex:24},{value:", in which we ",paraId:52,tocIndex:24},{value:"added more XxxPickers",paraId:52,tocIndex:24},{value:" to meet those requirements, and ",paraId:52,tocIndex:24},{value:"disabledDate",paraId:52,tocIndex:24},{value:" could be effect on those pickers too.",paraId:52,tocIndex:24},{value:"prefixCls",paraId:1},{value:"Static methods like message/notification/Modal.confirm are not using the same render tree as ",paraId:53,tocIndex:25},{value:"<Button />",paraId:53,tocIndex:25},{value:", but rendered to independent DOM node created by ",paraId:53,tocIndex:25},{value:"ReactDOM.render",paraId:53,tocIndex:25},{value:", which cannot access React context from ConfigProvider. Consider two solutions here:",paraId:53,tocIndex:25},{value:"Replace original usages with ",paraId:54,tocIndex:25},{value:"message.useMessage",paraId:55,tocIndex:25},{value:", ",paraId:54,tocIndex:25},{value:"notification.useNotification",paraId:56,tocIndex:25},{value:" and ",paraId:54,tocIndex:25},{value:"Modal.useModal",paraId:57,tocIndex:25},{value:".",paraId:54,tocIndex:25},{value:"Use ",paraId:58,tocIndex:25},{value:"App.useApp",paraId:59,tocIndex:25},{value:" to get message/notification/modal instance.",paraId:58,tocIndex:25},{value:"You should only access the API by official doc with ref. Directly access internal ",paraId:60,tocIndex:26},{value:"props",paraId:60,tocIndex:26},{value:" or ",paraId:60,tocIndex:26},{value:"state",paraId:60,tocIndex:26},{value:" is not recommended which will make your code strong coupling with current version. Any refactor will break your code like refactor with ",paraId:60,tocIndex:26},{value:"Hooks",paraId:60,tocIndex:26},{value:" version, delete or rename internal ",paraId:60,tocIndex:26},{value:"props",paraId:60,tocIndex:26},{value:" or ",paraId:60,tocIndex:26},{value:"state",paraId:60,tocIndex:26},{value:", adjust internal node constructor, etc.",paraId:60,tocIndex:26},{value:"open",paraId:1},{value:"For historical reasons, the display names of the pop components are not uniform, and both ",paraId:61,tocIndex:27},{value:"open",paraId:61,tocIndex:27},{value:" and ",paraId:61,tocIndex:27},{value:"visible",paraId:61,tocIndex:27},{value:" are used. This makes the memory cost that non-tsx users encounter when developing. It also leads to ambiguity about what name to choose when adding a feature. So we want to unify the attribute name, you can still use the original ",paraId:61,tocIndex:27},{value:"visible",paraId:61,tocIndex:27},{value:" and it will still be backward compatible, but we will remove this attribute from the documentation as of v5.",paraId:61,tocIndex:27},{value:":where",paraId:1},{value:"Please ref dynamic theme document ",paraId:62,tocIndex:28},{value:"Legacy Browser Compatible",paraId:63,tocIndex:28},{value:" part.",paraId:62,tocIndex:28},{value:"Same as above. You can adjust antd css priority to override. Related issue: ",paraId:64,tocIndex:29},{value:"#38794",paraId:64,tocIndex:29},{value:"Please ref document ",paraId:65,tocIndex:30},{value:"Shadow Dom Usage",paraId:66,tocIndex:30},{value:".",paraId:65,tocIndex:30},{value:"Config with SeedToken:",paraId:67,tocIndex:31},{value:`import { ConfigProvider } from 'antd';

<ConfigProvider theme={{ token: { motion: false } }}>
  <App />
</ConfigProvider>;
`,paraId:68,tocIndex:31},{value:"Please ref dynamic theme document ",paraId:69,tocIndex:32},{value:"SSR",paraId:70,tocIndex:32},{value:" part.",paraId:69,tocIndex:32},{value:"In the Ant Design Token system, ",paraId:71,tocIndex:33},{value:"colorPrimary",paraId:71,tocIndex:33},{value:" and ",paraId:71,tocIndex:33},{value:"colorInfo",paraId:71,tocIndex:33},{value:" are both ",paraId:71,tocIndex:33},{value:"Seed Token",paraId:72,tocIndex:33},{value:", so they are independent of each other. ",paraId:71,tocIndex:33},{value:"colorLink",paraId:71,tocIndex:33},{value:" is an ",paraId:71,tocIndex:33},{value:"Alias Token",paraId:73,tocIndex:33},{value:", inherits ",paraId:71,tocIndex:33},{value:"colorInfo",paraId:71,tocIndex:33},{value:" by default, and is independent of ",paraId:71,tocIndex:33},{value:"colorPrimary",paraId:71,tocIndex:33},{value:".",paraId:71,tocIndex:33},{value:"\u2705 ",paraId:74,tocIndex:34},{value:"Ant Design",paraId:74,tocIndex:34},{value:": Capitalized with space, for the design language.",paraId:74,tocIndex:34},{value:"\u2705 ",paraId:74,tocIndex:34},{value:"antd",paraId:74,tocIndex:34},{value:": all lowercase, for the React UI library.",paraId:74,tocIndex:34},{value:"\u2705 ",paraId:74,tocIndex:34},{value:"ant.design",paraId:74,tocIndex:34},{value:"\uFF1AFor ant.design website url.",paraId:74,tocIndex:34},{value:"Here are some typical wrong examples:",paraId:75,tocIndex:34},{value:"\u274C AntD",paraId:76,tocIndex:34},{value:"\u274C antD",paraId:76,tocIndex:34},{value:"\u274C Antd",paraId:76,tocIndex:34},{value:"\u274C ant design",paraId:76,tocIndex:34},{value:"\u274C AntDesign",paraId:76,tocIndex:34},{value:"\u274C antdesign",paraId:76,tocIndex:34},{value:"\u274C Antdesign",paraId:76,tocIndex:34},{value:"https://opencollective.com/ant-design",paraId:77,tocIndex:35},{value:"setFieldsValue",paraId:1},{value:"null",paraId:1},{value:"When we try to set the form value using the ",paraId:78,tocIndex:36},{value:"setFieldsValue",paraId:78,tocIndex:36},{value:" method in the form instance of the form component, if the passed object contains the type null, such as:",paraId:78,tocIndex:36},{value:`// This is not real world code, just for explain
import { Form } from 'antd';

type Test = {
  value: string[] | null;
};

export default () => {
  const [form] = Form.useForm<Test>();

  form.setFieldsValue({
    value: null, // Error: Type "null" cannot be assigned to type "string[] | undefined".
  });
};
`,paraId:79,tocIndex:36},{value:"If you encounter the above error, please check the current project ",paraId:80,tocIndex:36},{value:"tsconfig.json",paraId:80,tocIndex:36},{value:" contains the following configuration:",paraId:80,tocIndex:36},{value:`{
  "strictNullChecks": true
}
`,paraId:81,tocIndex:36},{value:"The above problem occurs if ",paraId:82,tocIndex:36},{value:"strictNullChecks",paraId:82,tocIndex:36},{value:" is set to ",paraId:82,tocIndex:36},{value:"true",paraId:82,tocIndex:36},{value:", If you can determine the project don't need this configuration (see ",paraId:82,tocIndex:36},{value:"strictNullChecks",paraId:82,tocIndex:36},{value:" to judge whether need the configuration). You can try changing to ",paraId:82,tocIndex:36},{value:"false",paraId:82,tocIndex:36},{value:" to turn off the control strict check. However, if you do need to enable this feature, you can avoid this situation by using other types instead of ",paraId:82,tocIndex:36},{value:"null",paraId:82,tocIndex:36},{value:" when defining types",paraId:82,tocIndex:36},{value:"If you are using the App Router of Next.js, when you use the sub-components provided by some antd components, such as ",paraId:83,tocIndex:37},{value:"Select.Option ",paraId:83,tocIndex:37},{value:", ",paraId:83,tocIndex:37},{value:"Form.Item",paraId:83,tocIndex:37},{value:", ",paraId:83,tocIndex:37},{value:"Typography.Title",paraId:83,tocIndex:37},{value:", etc., you may get the following error:",paraId:83,tocIndex:37},{value:`Error: Cannot access .Option on the server. You cannot dot into a client module from a server component. You can only pass the imported name through.
`,paraId:84,tocIndex:37},{value:"Currently, this problem is ",paraId:85,tocIndex:37},{value:"waiting for Next.js to give an official solution",paraId:85,tocIndex:37},{value:". There are two workarounds as of now if you need to use sub-components in your page with the App Router:",paraId:85,tocIndex:37},{value:"Create a wrapper component that extracts the sub-components that you need, and re-exports them. Take the ",paraId:86,tocIndex:37},{value:"Typography",paraId:86,tocIndex:37},{value:" component as an example. A wrapper component would look something like this:",paraId:86,tocIndex:37},{value:`'use client';

import React from 'react';
import { Typography as OriginTypography } from 'antd';
import type { LinkProps } from 'antd/es/typography/Link';
import type { ParagraphProps } from 'antd/es/typography/Paragraph';
import type { TextProps } from 'antd/es/typography/Text';
import type { TitleProps } from 'antd/es/typography/Title';

const Title = React.forwardRef<HTMLElement, TitleProps & React.RefAttributes<HTMLElement>>(
  (props, ref) => <OriginTypography.Title ref={ref} {...props} />,
);

const Paragraph = React.forwardRef<HTMLElement, ParagraphProps & React.RefAttributes<HTMLElement>>(
  (props, ref) => <OriginTypography.Paragraph ref={ref} {...props} />,
);

const Link = React.forwardRef<HTMLElement, LinkProps & React.RefAttributes<HTMLElement>>(
  (props, ref) => <OriginTypography.Link ref={ref} {...props} />,
);

const Text = React.forwardRef<HTMLElement, TextProps & React.RefAttributes<HTMLElement>>(
  (props, ref) => <OriginTypography.Text ref={ref} {...props} />,
);

export { Title, Link, Text, Paragraph };
`,paraId:87,tocIndex:37},{value:"You can also make the page fully client-rendered by adding ",paraId:88,tocIndex:37},{value:"use client",paraId:88,tocIndex:37},{value:" tag at the beginning of your page's source:",paraId:88,tocIndex:37},{value:`'use client';

// This is not real world code, just for explain
export default () => {
  return (
    <div className="App">
      <Form>
        <Form.Item>
          <Button type="primary">Button</Button>
        </Form.Item>
      </Form>
    </div>
  );
};
`,paraId:89,tocIndex:37}]},173026:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Ant Design React is dedicated to providing a ",paraId:0},{value:"good development experience",paraId:0},{value:" for programmers. Before starting, it is recommended to learn ",paraId:0},{value:"React",paraId:0},{value:" first, and correctly install and configure ",paraId:0},{value:"Node.js",paraId:0},{value:" v16 or above.",paraId:0},{value:"The official guide also assumes that you have intermediate knowledge about HTML, CSS, and JavaScript, and React. If you are just starting to learn front-end or React, it may not be the best idea to use the UI framework as your first step.",paraId:1},{value:"Finally, if you are working in a local development environment, please refer to ",paraId:2},{value:"Use with create-react-app",paraId:3},{value:".",paraId:2},{value:"Here is a simple online codesandbox demo of an Ant Design component to show the usage of Ant Design React.",paraId:4,tocIndex:0},{value:`const sandpackConfig = {
  autorun: true,
};

import React from 'react';
import { Button, Space, DatePicker, version } from 'antd';

const App = () => (
  <div style={{ padding: '0 24px' }}>
    <h1>antd version: {version}</h1>
    <Space>
      <DatePicker />
      <Button type="primary">Primary Button</Button>
    </Space>
  </div>
);

export default App;
`,paraId:5,tocIndex:0},{value:"Follow the steps below to play around with Ant Design yourself:",paraId:6,tocIndex:0},{value:"Visit ",paraId:7,tocIndex:1},{value:"https://u.ant.design/codesandbox-repro",paraId:7,tocIndex:1},{value:" to create a codesandbox -- don't forget to press the save button as well to create a new instance.",paraId:7,tocIndex:1},{value:"Replace the contents of ",paraId:8,tocIndex:2},{value:"index.js",paraId:8,tocIndex:2},{value:" with the following code. As you can see, there is no difference between antd's components and typical React components.",paraId:8,tocIndex:2},{value:"If you have already set things up by following the ",paraId:9,tocIndex:2},{value:"Use with create-react-app",paraId:10,tocIndex:2},{value:", replace the content of ",paraId:9,tocIndex:2},{value:"/src/index.js",paraId:9,tocIndex:2},{value:" as follows:",paraId:9,tocIndex:2},{value:`import React, { useState } from 'react';
import { createRoot } from 'react-dom/client';
import { DatePicker, message } from 'antd';
import './index.css';

const App = () => {
  const [date, setDate] = useState(null);
  const [messageApi, contextHolder] = message.useMessage();
  const handleChange = (value) => {
    messageApi.info(\`Selected Date: \${value ? value.format('YYYY-MM-DD') : 'None'}\`);
    setDate(value);
  };
  return (
    <div style={{ width: 400, margin: '100px auto' }}>
      <DatePicker onChange={handleChange} />
      <div style={{ marginTop: 16 }}>
        Selected Date: {date ? date.format('YYYY-MM-DD') : 'None'}
      </div>
      {contextHolder}
    </div>
  );
};

createRoot(document.getElementById('root')).render(<App />);
`,paraId:11,tocIndex:2},{value:"You can view the list of components in the side menu of the Components page, such as the ",paraId:12,tocIndex:3},{value:"Alert",paraId:13,tocIndex:3},{value:" component. Plenty of examples are also provided in the component pages and API documentation as well.",paraId:12,tocIndex:3},{value:'Click the "Open in Editor" icon in the first example to open an editor with source code to use out-of-the-box. Now you can import the ',paraId:14,tocIndex:3},{value:"Alert",paraId:14,tocIndex:3},{value:" component into the codesandbox:",paraId:14,tocIndex:3},{value:`- import { DatePicker, message } from 'antd';
+ import { DatePicker, message, Alert } from 'antd';
`,paraId:15,tocIndex:3},{value:"Now add the following jsx inside the ",paraId:16,tocIndex:3},{value:"render",paraId:16,tocIndex:3},{value:" function.",paraId:16,tocIndex:3},{value:`  <DatePicker onChange={value => this.handleChange(value)} />
  <div style={{ marginTop: 20 }}>
-   Selected Date: {date ? date.format('YYYY-MM-DD') : 'None'}
+   <Alert message="Selected Date" description={date ? date.format('YYYY-MM-DD') : 'None'} />
  </div>
`,paraId:17,tocIndex:3},{value:"Select a date, and you can see the effect in the preview area on the right:",paraId:18,tocIndex:3},{value:"OK! Now that you know the basics of using antd components, you are welcome to explore more components in the codesandbox. When reporting a bug with ant design, we also strongly recommend using codesandbox to provide a reproducible demo as well.",paraId:19,tocIndex:3},{value:"During actual real-world project development, you will most likely need a development workflow consisting of ",paraId:20,tocIndex:4},{value:"compile/build/deploy/lint/debug/",paraId:20,tocIndex:4},{value:" deployment. You can read the following documents on the subject or use the following scaffolds and examples provided below:",paraId:20,tocIndex:4},{value:"Ant Design Pro",paraId:21,tocIndex:4},{value:"create-next-app",paraId:21,tocIndex:4},{value:"More scaffolds at ",paraId:21,tocIndex:4},{value:"Scaffold Market",paraId:21,tocIndex:4},{value:"If you use ",paraId:22,tocIndex:5},{value:"create-react-app",paraId:22,tocIndex:5},{value:" follow the instructions ",paraId:22,tocIndex:5},{value:"here",paraId:23,tocIndex:5},{value:" instead.",paraId:22,tocIndex:5},{value:"Jest does not support ",paraId:24,tocIndex:5},{value:"esm",paraId:24,tocIndex:5},{value:" modules, and Ant Design uses them. In order to test your Ant Design application with Jest you have to add the following to your Jest config :",paraId:24,tocIndex:5},{value:`"transform": { "^.+\\\\.(ts|tsx|js|jsx)?$": "ts-jest" }
`,paraId:25,tocIndex:5},{value:"antd",paraId:26,tocIndex:6},{value:" supports tree shaking of ES modules, so using ",paraId:26,tocIndex:6},{value:"import { Button } from 'antd';",paraId:26,tocIndex:6},{value:" would drop js code you didn't use.",paraId:26,tocIndex:6},{value:"If you want to customize your workflow, we recommend using ",paraId:27,tocIndex:7},{value:"webpack",paraId:27,tocIndex:7},{value:" or ",paraId:27,tocIndex:7},{value:"vite",paraId:27,tocIndex:7},{value:" to build and debug code. You can try out plenty of ",paraId:27,tocIndex:7},{value:"boilerplates",paraId:27,tocIndex:7},{value:" available in the React ecosystem.",paraId:27,tocIndex:7},{value:"There are also some ",paraId:28,tocIndex:7},{value:"scaffolds",paraId:28,tocIndex:7},{value:" which have already been integrated into antd, so you can try and start with one of these and even contribute.",paraId:28,tocIndex:7}]},321940:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The default language of ",paraId:0},{value:"antd",paraId:0},{value:" is currently English. If you wish to use other languages, follow the instructions below.",paraId:0},{value:"antd",paraId:1,tocIndex:0},{value:" provides a React Component ",paraId:1,tocIndex:0},{value:"ConfigProvider",paraId:2,tocIndex:0},{value:" for configuring antd locale text globally.",paraId:1,tocIndex:0},{value:`import { ConfigProvider } from 'antd';
import frFR from 'antd/locale/fr_FR';

return (
  <ConfigProvider locale={frFR}>
    <App />
  </ConfigProvider>
);
`,paraId:3,tocIndex:0},{value:"You can see the complete configuration here: ",paraId:4,tocIndex:0},{value:"ConfigProvider",paraId:5,tocIndex:0},{value:".",paraId:4,tocIndex:0},{value:"Note: ",paraId:6,tocIndex:0},{value:"fr_FR",paraId:6,tocIndex:0},{value:" is the filename, the following table also follows the same rules.",paraId:6,tocIndex:0},{value:"The following languages are currently supported:",paraId:7,tocIndex:0},{value:"Language",paraId:8,tocIndex:1},{value:"Filename",paraId:8,tocIndex:1},{value:"Arabic",paraId:8,tocIndex:1},{value:"ar_EG",paraId:8,tocIndex:1},{value:"Azerbaijani",paraId:8,tocIndex:1},{value:"az_AZ",paraId:8,tocIndex:1},{value:"Bulgarian",paraId:8,tocIndex:1},{value:"bg_BG",paraId:8,tocIndex:1},{value:"Bangla (Bangladesh)",paraId:8,tocIndex:1},{value:"bn_BD",paraId:8,tocIndex:1},{value:"Belarusian",paraId:8,tocIndex:1},{value:"by_BY",paraId:8,tocIndex:1},{value:"Catalan",paraId:8,tocIndex:1},{value:"ca_ES",paraId:8,tocIndex:1},{value:"Czech",paraId:8,tocIndex:1},{value:"cs_CZ",paraId:8,tocIndex:1},{value:"Danish",paraId:8,tocIndex:1},{value:"da_DK",paraId:8,tocIndex:1},{value:"German",paraId:8,tocIndex:1},{value:"de_DE",paraId:8,tocIndex:1},{value:"Greek",paraId:8,tocIndex:1},{value:"el_GR",paraId:8,tocIndex:1},{value:"English (United Kingdom)",paraId:8,tocIndex:1},{value:"en_GB",paraId:8,tocIndex:1},{value:"English",paraId:8,tocIndex:1},{value:"en_US",paraId:8,tocIndex:1},{value:"Spanish",paraId:8,tocIndex:1},{value:"es_ES",paraId:8,tocIndex:1},{value:"Basque",paraId:8,tocIndex:1},{value:"eu_ES",paraId:8,tocIndex:1},{value:"Estonian",paraId:8,tocIndex:1},{value:"et_EE",paraId:8,tocIndex:1},{value:"Persian",paraId:8,tocIndex:1},{value:"fa_IR",paraId:8,tocIndex:1},{value:"Finnish",paraId:8,tocIndex:1},{value:"fi_FI",paraId:8,tocIndex:1},{value:"French (Belgium)",paraId:8,tocIndex:1},{value:"fr_BE",paraId:8,tocIndex:1},{value:"French (Canada)",paraId:8,tocIndex:1},{value:"fr_CA",paraId:8,tocIndex:1},{value:"French (France)",paraId:8,tocIndex:1},{value:"fr_FR",paraId:8,tocIndex:1},{value:"Irish (Ireland)",paraId:8,tocIndex:1},{value:"ga_IE",paraId:8,tocIndex:1},{value:"Galician (Spain)",paraId:8,tocIndex:1},{value:"gl_ES",paraId:8,tocIndex:1},{value:"Hebrew",paraId:8,tocIndex:1},{value:"he_IL",paraId:8,tocIndex:1},{value:"Hindi",paraId:8,tocIndex:1},{value:"hi_IN",paraId:8,tocIndex:1},{value:"Croatian",paraId:8,tocIndex:1},{value:"hr_HR",paraId:8,tocIndex:1},{value:"Hungarian",paraId:8,tocIndex:1},{value:"hu_HU",paraId:8,tocIndex:1},{value:"Armenian",paraId:8,tocIndex:1},{value:"hy_AM",paraId:8,tocIndex:1},{value:"Indonesian",paraId:8,tocIndex:1},{value:"id_ID",paraId:8,tocIndex:1},{value:"Italian",paraId:8,tocIndex:1},{value:"it_IT",paraId:8,tocIndex:1},{value:"Icelandic",paraId:8,tocIndex:1},{value:"is_IS",paraId:8,tocIndex:1},{value:"Japanese",paraId:8,tocIndex:1},{value:"ja_JP",paraId:8,tocIndex:1},{value:"Georgian",paraId:8,tocIndex:1},{value:"ka_GE",paraId:8,tocIndex:1},{value:"Kurdish (Kurmanji)",paraId:8,tocIndex:1},{value:"kmr_IQ",paraId:8,tocIndex:1},{value:"Kannada",paraId:8,tocIndex:1},{value:"kn_IN",paraId:8,tocIndex:1},{value:"Kazakh",paraId:8,tocIndex:1},{value:"kk_KZ",paraId:8,tocIndex:1},{value:"Khmer",paraId:8,tocIndex:1},{value:"km_KH",paraId:8,tocIndex:1},{value:"Korean",paraId:8,tocIndex:1},{value:"ko_KR",paraId:8,tocIndex:1},{value:"Lithuanian",paraId:8,tocIndex:1},{value:"lt_LT",paraId:8,tocIndex:1},{value:"Latvian",paraId:8,tocIndex:1},{value:"lv_LV",paraId:8,tocIndex:1},{value:"Macedonian",paraId:8,tocIndex:1},{value:"mk_MK",paraId:8,tocIndex:1},{value:"Malayalam (India)",paraId:8,tocIndex:1},{value:"ml_IN",paraId:8,tocIndex:1},{value:"Mongolian",paraId:8,tocIndex:1},{value:"mn_MN",paraId:8,tocIndex:1},{value:"Malay (Malaysia)",paraId:8,tocIndex:1},{value:"ms_MY",paraId:8,tocIndex:1},{value:"Burmese",paraId:8,tocIndex:1},{value:"my_MM",paraId:8,tocIndex:1},{value:"Norwegian",paraId:8,tocIndex:1},{value:"nb_NO",paraId:8,tocIndex:1},{value:"Nepali",paraId:8,tocIndex:1},{value:"ne_NP",paraId:8,tocIndex:1},{value:"Dutch (Belgium)",paraId:8,tocIndex:1},{value:"nl_BE",paraId:8,tocIndex:1},{value:"Dutch",paraId:8,tocIndex:1},{value:"nl_NL",paraId:8,tocIndex:1},{value:"Polish",paraId:8,tocIndex:1},{value:"pl_PL",paraId:8,tocIndex:1},{value:"Portuguese (Brazil)",paraId:8,tocIndex:1},{value:"pt_BR",paraId:8,tocIndex:1},{value:"Portuguese",paraId:8,tocIndex:1},{value:"pt_PT",paraId:8,tocIndex:1},{value:"Romanian",paraId:8,tocIndex:1},{value:"ro_RO",paraId:8,tocIndex:1},{value:"Russian",paraId:8,tocIndex:1},{value:"ru_RU",paraId:8,tocIndex:1},{value:"Sinhalese / Sinhala",paraId:8,tocIndex:1},{value:"si_LK",paraId:8,tocIndex:1},{value:"Slovak",paraId:8,tocIndex:1},{value:"sk_SK",paraId:8,tocIndex:1},{value:"Serbian",paraId:8,tocIndex:1},{value:"sr_RS",paraId:8,tocIndex:1},{value:"Slovenian",paraId:8,tocIndex:1},{value:"sl_SI",paraId:8,tocIndex:1},{value:"Swedish",paraId:8,tocIndex:1},{value:"sv_SE",paraId:8,tocIndex:1},{value:"Tamil",paraId:8,tocIndex:1},{value:"ta_IN",paraId:8,tocIndex:1},{value:"Thai",paraId:8,tocIndex:1},{value:"th_TH",paraId:8,tocIndex:1},{value:"Turkish",paraId:8,tocIndex:1},{value:"tr_TR",paraId:8,tocIndex:1},{value:"Turkmen",paraId:8,tocIndex:1},{value:"tk_TK",paraId:8,tocIndex:1},{value:"Urdu (Pakistan)",paraId:8,tocIndex:1},{value:"ur_PK",paraId:8,tocIndex:1},{value:"Ukrainian",paraId:8,tocIndex:1},{value:"uk_UA",paraId:8,tocIndex:1},{value:"Vietnamese",paraId:8,tocIndex:1},{value:"vi_VN",paraId:8,tocIndex:1},{value:"Chinese (Simplified)",paraId:8,tocIndex:1},{value:"zh_CN",paraId:8,tocIndex:1},{value:"Chinese (Traditional)",paraId:8,tocIndex:1},{value:"zh_HK",paraId:8,tocIndex:1},{value:"Chinese (Traditional)",paraId:8,tocIndex:1},{value:"zh_TW",paraId:8,tocIndex:1},{value:"See more usage at ",paraId:9,tocIndex:1},{value:"ConfigProvider",paraId:10,tocIndex:1},{value:".",paraId:9,tocIndex:1},{value:"If your language is not in above list, feel free to create a locale package based on the ",paraId:11,tocIndex:2},{value:"en_US",paraId:11,tocIndex:2},{value:" language pack and send us a pull request. For reference, you can refer to the pull request of adding the ",paraId:11,tocIndex:2},{value:"Azerbaijani",paraId:11,tocIndex:2},{value:" language as a sample.",paraId:11,tocIndex:2},{value:"Do it step by step:",paraId:12,tocIndex:2},{value:"Fork ",paraId:13,tocIndex:2},{value:"antd",paraId:13,tocIndex:2},{value:" and git clone to local, switch to ",paraId:13,tocIndex:2},{value:"feature",paraId:13,tocIndex:2},{value:" branch, pull it to make sure it's up-to-date, create a new branch based on ",paraId:13,tocIndex:2},{value:"feature",paraId:13,tocIndex:2},{value:" branch, all work will be done in it.",paraId:13,tocIndex:2},{value:`git clone git@github.com:<your organization>/ant-design.git
cd ant-design/
git remote add upstream git@github.com:ant-design/ant-design.git
git checkout -b <your new branch name> upstream/feature
`,paraId:14,tocIndex:2},{value:"Add the language support for ",paraId:15,tocIndex:2},{value:"rc-picker",paraId:15,tocIndex:2},{value:", for example ",paraId:15,tocIndex:2},{value:"this",paraId:15,tocIndex:2},{value:".",paraId:15,tocIndex:2},{value:"Add the language support for ",paraId:16,tocIndex:2},{value:"rc-pagination",paraId:16,tocIndex:2},{value:", for example ",paraId:16,tocIndex:2},{value:"this",paraId:16,tocIndex:2},{value:".",paraId:16,tocIndex:2},{value:"Wait for ",paraId:17,tocIndex:2},{value:"rc-picker",paraId:17,tocIndex:2},{value:" and ",paraId:17,tocIndex:2},{value:"rc-pagination",paraId:17,tocIndex:2},{value:" to release the new version containing the above.",paraId:17,tocIndex:2},{value:"Update the ",paraId:18,tocIndex:2},{value:"rc-picker",paraId:18,tocIndex:2},{value:" and ",paraId:18,tocIndex:2},{value:"rc-pagination",paraId:18,tocIndex:2},{value:" versions in ",paraId:18,tocIndex:2},{value:"antd",paraId:18,tocIndex:2},{value:" and add the remaining other necessary content for the language. for example ",paraId:18,tocIndex:2},{value:"Azerbaijani PR",paraId:18,tocIndex:2},{value:".",paraId:18,tocIndex:2},{value:"Add a test case for the language in ",paraId:19,tocIndex:2},{value:"index.test.tsx",paraId:19,tocIndex:2},{value:".",paraId:19,tocIndex:2},{value:"update snapshots, you may also need to delete ",paraId:20,tocIndex:2},{value:"node_modules",paraId:20,tocIndex:2},{value:", lock files (",paraId:20,tocIndex:2},{value:"yarn.lock",paraId:20,tocIndex:2},{value:" or ",paraId:20,tocIndex:2},{value:"package-lock.json",paraId:20,tocIndex:2},{value:") and reinstall at first.",paraId:20,tocIndex:2},{value:`npm run test -- components/locale -u
`,paraId:21,tocIndex:2},{value:"Add the language to i18n list ",paraId:22,tocIndex:2},{value:"docs/react/i18n.en-US.md",paraId:22,tocIndex:2},{value:" and ",paraId:22,tocIndex:2},{value:"docs/react/i18n.zh-CN.md",paraId:22,tocIndex:2},{value:".",paraId:22,tocIndex:2},{value:"Watch out the CI status, and if it failed, look at the logs and make some changes until it all passes.",paraId:23,tocIndex:2},{value:"Ok, now everything is ready for review.",paraId:24,tocIndex:2}]},72310:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Following the Ant Design specification, we developed a React UI library ",paraId:0},{value:"antd",paraId:0},{value:" that contains a set of high quality components and demos for building rich, interactive user interfaces.",paraId:0},{value:`
  `,paraId:1},{value:`
  `,paraId:1},{value:"+",paraId:1},{value:`
  `,paraId:1},{value:"\u{1F308} Enterprise-class UI designed for web applications.",paraId:2,tocIndex:0},{value:"\u{1F4E6} A set of high-quality React components out of the box.",paraId:2,tocIndex:0},{value:"\u{1F6E1} Written in TypeScript with predictable static types.",paraId:2,tocIndex:0},{value:"\u2699\uFE0F Whole package of design resources and development tools.",paraId:2,tocIndex:0},{value:"\u{1F30D} Internationalization support for dozens of languages.",paraId:2,tocIndex:0},{value:"\u{1F3A8} Powerful theme customization in every detail.",paraId:2,tocIndex:0},{value:"Modern browsers",paraId:3,tocIndex:1},{value:"Server-side Rendering",paraId:3,tocIndex:1},{value:"Electron",paraId:3,tocIndex:1},{value:"Edge",paraId:4,tocIndex:1},{value:"Firefox",paraId:4,tocIndex:1},{value:"Chrome",paraId:4,tocIndex:1},{value:"Safari",paraId:4,tocIndex:1},{value:"Opera",paraId:4,tocIndex:1},{value:"Electron",paraId:4,tocIndex:1},{value:"Edge",paraId:4,tocIndex:1},{value:"last 2 versions",paraId:4,tocIndex:1},{value:"last 2 versions",paraId:4,tocIndex:1},{value:"last 2 versions",paraId:4,tocIndex:1},{value:"last 2 versions",paraId:4,tocIndex:1},{value:"last 2 versions",paraId:4,tocIndex:1},{value:"Polyfills are needed for IE browsers. We recommend ",paraId:5,tocIndex:1},{value:"@babel/preset-env",paraId:5,tocIndex:1},{value:" for it. You can set ",paraId:5,tocIndex:1},{value:"targets",paraId:5,tocIndex:1},{value:" config if you are using ",paraId:5,tocIndex:1},{value:"umi",paraId:5,tocIndex:1},{value:".",paraId:5,tocIndex:1},{value:"Dropped support of IE8 after ",paraId:6,tocIndex:1},{value:"antd@2.0",paraId:6,tocIndex:1},{value:". Dropped support of React 15 and IE9/10 after ",paraId:6,tocIndex:1},{value:"antd@4.0",paraId:6,tocIndex:1},{value:". Dropped support of IE after ",paraId:6,tocIndex:1},{value:"antd@5.0",paraId:6,tocIndex:1},{value:".",paraId:6,tocIndex:1},{value:"Stable: ",paraId:7,tocIndex:2},{value:"You can subscribe to this feed for new version notifications: ",paraId:8,tocIndex:2},{value:"https://github.com/ant-design/ant-design/releases.atom",paraId:8,tocIndex:2},{value:"We recommend using ",paraId:9,tocIndex:4},{value:"npm",paraId:9,tocIndex:4},{value:" or ",paraId:9,tocIndex:4},{value:"yarn",paraId:9,tocIndex:4},{value:" or ",paraId:9,tocIndex:4},{value:"pnpm",paraId:9,tocIndex:4},{value:" to install",paraId:9,tocIndex:4},{value:", it not only makes development easier, but also allow you to take advantage of the rich ecosystem of Javascript packages and tooling.",paraId:9,tocIndex:4},{value:"If you are in a bad network environment, you can try other registries and tools like ",paraId:10},{value:"cnpm",paraId:10},{value:".",paraId:10},{value:"Add ",paraId:11,tocIndex:5},{value:"script",paraId:11,tocIndex:5},{value:" and ",paraId:11,tocIndex:5},{value:"link",paraId:11,tocIndex:5},{value:" tags in your browser and use the global variable ",paraId:11,tocIndex:5},{value:"antd",paraId:11,tocIndex:5},{value:".",paraId:11,tocIndex:5},{value:"We provide ",paraId:12,tocIndex:5},{value:"antd.js",paraId:12,tocIndex:5},{value:" and ",paraId:12,tocIndex:5},{value:"antd.min.js",paraId:12,tocIndex:5},{value:" ",paraId:12,tocIndex:5},{value:"reset.css",paraId:12,tocIndex:5},{value:" under ",paraId:12,tocIndex:5},{value:"dist",paraId:12,tocIndex:5},{value:" folder in antd's npm package. You can also download these files directly from ",paraId:12,tocIndex:5},{value:", ",paraId:12,tocIndex:5},{value:" or ",paraId:12,tocIndex:5},{value:"unpkg",paraId:12,tocIndex:5},{value:".",paraId:12,tocIndex:5},{value:"We strongly discourage loading the entire files",paraId:13,tocIndex:5},{value:" this will add bloat to your application and make it more difficult to receive bugfixes and updates. Antd is intended to be used in conjunction with a build tool, such as ",paraId:13,tocIndex:5},{value:"webpack",paraId:13,tocIndex:5},{value:", which will make it easy to import only the parts of antd that you are using.",paraId:13,tocIndex:5},{value:"Note: You should import ",paraId:14,tocIndex:5},{value:"react",paraId:14,tocIndex:5},{value:"\u3001",paraId:14,tocIndex:5},{value:"react-dom",paraId:14,tocIndex:5},{value:"\u3001",paraId:14,tocIndex:5},{value:"dayjs",paraId:14,tocIndex:5},{value:" before using ",paraId:14,tocIndex:5},{value:"antd.js",paraId:14,tocIndex:5},{value:".",paraId:14,tocIndex:5},{value:`import React from 'react';
import { DatePicker } from 'antd';

const App = () => {
  return <DatePicker />;
};

export default App;
`,paraId:15,tocIndex:6},{value:"antd",paraId:16,tocIndex:7},{value:" supports ES modules tree shaking by default.",paraId:16,tocIndex:7},{value:"antd",paraId:17,tocIndex:8},{value:" provides a built-in ts definition, don't install ",paraId:17,tocIndex:8},{value:"@types/antd",paraId:17,tocIndex:8},{value:".",paraId:17,tocIndex:8},{value:"Home page",paraId:18,tocIndex:9},{value:"China Mirrors",paraId:19,tocIndex:9},{value:"Components",paraId:20,tocIndex:9},{value:"Ant Design Pro",paraId:19,tocIndex:9},{value:"Ant Design Pro Components",paraId:19,tocIndex:9},{value:"Ant Design Charts",paraId:19,tocIndex:9},{value:"Change Log",paraId:21,tocIndex:9},{value:"rc-components",paraId:19,tocIndex:9},{value:"Mobile Components",paraId:19,tocIndex:9},{value:"Mini Program Components",paraId:19,tocIndex:9},{value:"Ant Design Icons",paraId:19,tocIndex:9},{value:"Ant Design Colors",paraId:19,tocIndex:9},{value:"Landing Pages",paraId:19,tocIndex:9},{value:"Motion",paraId:19,tocIndex:9},{value:"Scaffold Market",paraId:19,tocIndex:9},{value:"Developer Instruction",paraId:19,tocIndex:9},{value:"Versioning Release Note",paraId:19,tocIndex:9},{value:"FAQ",paraId:22,tocIndex:9},{value:"CodeSandbox Template",paraId:19,tocIndex:9},{value:" for bug reports",paraId:19,tocIndex:9},{value:"Awesome Ant Design",paraId:19,tocIndex:9},{value:"Customize Theme",paraId:23,tocIndex:9},{value:"How to Apply for Being A Collaborator",paraId:19,tocIndex:9},{value:"React is used to encapsulate a library of components which embody our design language. We welcome the community to implement our design system ",paraId:24,tocIndex:10},{value:"in other front-end frameworks",paraId:25,tocIndex:10},{value:" of their choice.",paraId:24,tocIndex:10},{value:"Ant Design is widely used for building enterprise-level websites both domestically and internationally. You can refer to wappalyzer for reference data. If your company or product uses Ant Design, let us know ",paraId:26,tocIndex:11},{value:"here",paraId:26,tocIndex:11},{value:"!",paraId:26,tocIndex:11},{value:"Please read our ",paraId:27,tocIndex:12},{value:"CONTRIBUTING.md",paraId:27,tocIndex:12},{value:" first.",paraId:27,tocIndex:12},{value:"If you'd like to help us improve antd, just create a ",paraId:28,tocIndex:12},{value:"Pull Request",paraId:28,tocIndex:12},{value:". Feel free to report bugs and issues ",paraId:28,tocIndex:12},{value:"here",paraId:28,tocIndex:12},{value:".",paraId:28,tocIndex:12},{value:"If you're new to posting issues, we ask that you read ",paraId:29,tocIndex:12},{value:"How To Ask Questions The Smart Way",paraId:29,tocIndex:12},{value:" and ",paraId:29,tocIndex:12},{value:"How to Ask a Question in Open Source Community",paraId:29,tocIndex:12},{value:" and ",paraId:29,tocIndex:12},{value:"How to Report Bugs Effectively",paraId:29,tocIndex:12},{value:" prior to posting. Well written bug reports help us help you!",paraId:29,tocIndex:12},{value:"For questions on how to use antd, please post questions to ",paraId:30,tocIndex:13},{value:"GitHub Discussions",paraId:30,tocIndex:13},{value:" using the ",paraId:30,tocIndex:13},{value:"Q&A",paraId:30,tocIndex:13},{value:" tag or ",paraId:30,tocIndex:13},{value:" using the ",paraId:30,tocIndex:13},{value:"antd",paraId:30,tocIndex:13},{value:" tag.",paraId:30,tocIndex:13},{value:"As always, we encourage experienced users to help those who are not familiar with ",paraId:31,tocIndex:13},{value:"antd",paraId:31,tocIndex:13},{value:"!",paraId:31,tocIndex:13}]},471648:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This document contains the correspondence between all the less variables related to components in version 4.x and the Component Token in version 5.x. If you are upgrading from version 4.x to version 5.x, you can quickly find the corresponding Component Token through this comparison table.",paraId:0},{value:"There are still some less variables that do not have a corresponding Component Token, and these variables have been deprecated in version 5.x.",paraId:1},{value:"We could configure global token and component token for each component through the ",paraId:2,tocIndex:0},{value:"theme",paraId:2,tocIndex:0},{value:" property of ConfigProvider.",paraId:2,tocIndex:0},{value:`import React from 'react';
import { Checkbox, ConfigProvider, Radio } from 'antd';

const App: React.FC = () => (
  <ConfigProvider
    theme={{
      components: {
        Radio: {
          colorPrimary: '#00b96b',
        },
        Checkbox: {
          colorPrimary: '#ff4d4f',
        },
      },
    }}
  >
    <Radio>Radio</Radio>
    <Checkbox>Checkbox</Checkbox>
  </ConfigProvider>
);

export default App;
`,paraId:3,tocIndex:0},{value:"Less variables",paraId:4,tocIndex:2},{value:"Component Token",paraId:4,tocIndex:2},{value:"Note",paraId:4,tocIndex:2},{value:"@alert-success-border-color",paraId:4,tocIndex:2},{value:"colorSuccessBorder",paraId:4,tocIndex:2},{value:"Global token",paraId:4,tocIndex:2},{value:"@alert-success-bg-color",paraId:4,tocIndex:2},{value:"colorSuccessBg",paraId:4,tocIndex:2},{value:"Global token",paraId:4,tocIndex:2},{value:"@alert-success-icon-color",paraId:4,tocIndex:2},{value:"colorSuccess",paraId:4,tocIndex:2},{value:"Global token",paraId:4,tocIndex:2},{value:"@alert-info-border-color",paraId:4,tocIndex:2},{value:"colorInfoBorder",paraId:4,tocIndex:2},{value:"Global token",paraId:4,tocIndex:2},{value:"@alert-info-bg-color",paraId:4,tocIndex:2},{value:"colorInfoBg",paraId:4,tocIndex:2},{value:"Global token",paraId:4,tocIndex:2},{value:"@alert-info-icon-color",paraId:4,tocIndex:2},{value:"colorInfo",paraId:4,tocIndex:2},{value:"Global token",paraId:4,tocIndex:2},{value:"@alert-warning-border-color",paraId:4,tocIndex:2},{value:"colorWarningBorder",paraId:4,tocIndex:2},{value:"Global token",paraId:4,tocIndex:2},{value:"@alert-warning-bg-color",paraId:4,tocIndex:2},{value:"colorWarningBg",paraId:4,tocIndex:2},{value:"Global token",paraId:4,tocIndex:2},{value:"@alert-warning-icon-color",paraId:4,tocIndex:2},{value:"colorWarning",paraId:4,tocIndex:2},{value:"Global token",paraId:4,tocIndex:2},{value:"@alert-error-border-color",paraId:4,tocIndex:2},{value:"colorErrorBorder",paraId:4,tocIndex:2},{value:"Global token",paraId:4,tocIndex:2},{value:"@alert-error-bg-color",paraId:4,tocIndex:2},{value:"colorErrorBg",paraId:4,tocIndex:2},{value:"Global token",paraId:4,tocIndex:2},{value:"@alert-error-icon-color",paraId:4,tocIndex:2},{value:"colorError",paraId:4,tocIndex:2},{value:"Global token",paraId:4,tocIndex:2},{value:"@alert-message-color",paraId:4,tocIndex:2},{value:"colorTextHeading",paraId:4,tocIndex:2},{value:"Global token",paraId:4,tocIndex:2},{value:"@alert-text-color",paraId:4,tocIndex:2},{value:"colorText",paraId:4,tocIndex:2},{value:"Global Token",paraId:4,tocIndex:2},{value:"@alert-close-color",paraId:4,tocIndex:2},{value:"colorIcon",paraId:4,tocIndex:2},{value:"Global token",paraId:4,tocIndex:2},{value:"@alert-close-hover-color",paraId:4,tocIndex:2},{value:"colorIconHover",paraId:4,tocIndex:2},{value:"Global token",paraId:4,tocIndex:2},{value:"@alert-padding-vertical",paraId:4,tocIndex:2},{value:"defaultPadding",paraId:4,tocIndex:2},{value:"Control the whole padding",paraId:4,tocIndex:2},{value:"@alert-padding-horizontal",paraId:4,tocIndex:2},{value:"defaultPadding",paraId:4,tocIndex:2},{value:"Control the whole padding",paraId:4,tocIndex:2},{value:"@alert-no-icon-padding-vertical",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"Deprecated",paraId:4,tocIndex:2},{value:"@alert-with-description-no-icon-padding-vertical",paraId:4,tocIndex:2},{value:"withDescriptionPadding",paraId:4,tocIndex:2},{value:"Control the whole padding",paraId:4,tocIndex:2},{value:"@alert-with-description-padding-vertical",paraId:4,tocIndex:2},{value:"withDescriptionPadding",paraId:4,tocIndex:2},{value:"Control the whole padding",paraId:4,tocIndex:2},{value:"@alert-with-description-padding",paraId:4,tocIndex:2},{value:"withDescriptionPadding",paraId:4,tocIndex:2},{value:"Control the whole padding",paraId:4,tocIndex:2},{value:"@alert-icon-top",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"Deprecated",paraId:4,tocIndex:2},{value:"@alert-with-description-icon-size",paraId:4,tocIndex:2},{value:"withDescriptionIconSize",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"Less variables",paraId:5,tocIndex:3},{value:"Component Token",paraId:5,tocIndex:3},{value:"Note",paraId:5,tocIndex:3},{value:"@anchor-bg",paraId:5,tocIndex:3},{value:"'-'",paraId:5,tocIndex:3},{value:"Can be modified directly by ",paraId:5,tocIndex:3},{value:"className",paraId:5,tocIndex:3},{value:" or ",paraId:5,tocIndex:3},{value:"style",paraId:5,tocIndex:3},{value:"@anchor-border-color",paraId:5,tocIndex:3},{value:"colorSplit",paraId:5,tocIndex:3},{value:"GlobalToken",paraId:5,tocIndex:3},{value:"@anchor-link-top",paraId:5,tocIndex:3},{value:"linkPaddingBlock",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"@anchor-link-left",paraId:5,tocIndex:3},{value:"linkPaddingInlineStart",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"@anchor-link-padding",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"${linkPaddingBlock}px ${linkPaddingInlineStart}px",paraId:5,tocIndex:3},{value:"Less variables",paraId:6,tocIndex:4},{value:"Component Token",paraId:6,tocIndex:4},{value:"Note",paraId:6,tocIndex:4},{value:"@avatar-size-base",paraId:6,tocIndex:4},{value:"containerSize",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"@avatar-size-lg",paraId:6,tocIndex:4},{value:"containerSizeLG",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"@avatar-size-sm",paraId:6,tocIndex:4},{value:"containerSizeSM",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"@avatar-font-size-base",paraId:6,tocIndex:4},{value:"textFontSize",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"@avatar-font-size-lg",paraId:6,tocIndex:4},{value:"textFontSizeLG",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"@avatar-font-size-sm",paraId:6,tocIndex:4},{value:"textFontSizeSM",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"@avatar-bg",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"Can be directly overridden by ",paraId:6,tocIndex:4},{value:"className",paraId:6,tocIndex:4},{value:" or ",paraId:6,tocIndex:4},{value:"style",paraId:6,tocIndex:4},{value:"@avatar-color",paraId:6,tocIndex:4},{value:"colorTextLightSolid",paraId:6,tocIndex:4},{value:"Global Token",paraId:6,tocIndex:4},{value:"@avatar-border-radius",paraId:6,tocIndex:4},{value:"borderRadius",paraId:6,tocIndex:4},{value:"Global Token",paraId:6,tocIndex:4},{value:"@avatar-group-overlapping",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"Deprecated for style change",paraId:6,tocIndex:4},{value:"@avatar-group-space",paraId:6,tocIndex:4},{value:"groupSpace",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"@avatar-group-border-color",paraId:6,tocIndex:4},{value:"colorBorderBg",paraId:6,tocIndex:4},{value:"Global Token",paraId:6,tocIndex:4},{value:"Less variables",paraId:7,tocIndex:5},{value:"Component Token",paraId:7,tocIndex:5},{value:"Note",paraId:7,tocIndex:5},{value:"@zindex-badge",paraId:7,tocIndex:5},{value:"indicatorZIndex",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"@badge-height",paraId:7,tocIndex:5},{value:"indicatorHeight",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"@badge-height-sm",paraId:7,tocIndex:5},{value:"indicatorHeightSM",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"@badge-dot-size",paraId:7,tocIndex:5},{value:"dotSize",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"@badge-font-size",paraId:7,tocIndex:5},{value:"textFontSize",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"@badge-font-size-sm",paraId:7,tocIndex:5},{value:"textFontSizeSM",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"@badge-font-weight",paraId:7,tocIndex:5},{value:"textFontWeight",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"@badge-status-size",paraId:7,tocIndex:5},{value:"statusSize",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"@badge-text-color",paraId:7,tocIndex:5},{value:"colorBgContainer",paraId:7,tocIndex:5},{value:"Global Token",paraId:7,tocIndex:5},{value:"@badge-color",paraId:7,tocIndex:5},{value:"colorError",paraId:7,tocIndex:5},{value:"Global Token",paraId:7,tocIndex:5},{value:"Less variables",paraId:8,tocIndex:6},{value:"Component Token",paraId:8,tocIndex:6},{value:"Note",paraId:8,tocIndex:6},{value:"@breadcrumb-base-color",paraId:8,tocIndex:6},{value:"itemColor",paraId:8,tocIndex:6},{value:"-",paraId:8,tocIndex:6},{value:"@breadcrumb-last-item-color",paraId:8,tocIndex:6},{value:"lastItemColor",paraId:8,tocIndex:6},{value:"-",paraId:8,tocIndex:6},{value:"@breadcrumb-font-size",paraId:8,tocIndex:6},{value:"fontSize",paraId:8,tocIndex:6},{value:"GlobalToken",paraId:8,tocIndex:6},{value:"@breadcrumb-icon-font-size",paraId:8,tocIndex:6},{value:"iconFontSize",paraId:8,tocIndex:6},{value:"-",paraId:8,tocIndex:6},{value:"@breadcrumb-link-color",paraId:8,tocIndex:6},{value:"linkColor",paraId:8,tocIndex:6},{value:"-",paraId:8,tocIndex:6},{value:"@breadcrumb-link-color-hover",paraId:8,tocIndex:6},{value:"linkHoverColor",paraId:8,tocIndex:6},{value:"-",paraId:8,tocIndex:6},{value:"@breadcrumb-separator-color",paraId:8,tocIndex:6},{value:"separatorColor",paraId:8,tocIndex:6},{value:"-",paraId:8,tocIndex:6},{value:"@breadcrumb-separator-margin",paraId:8,tocIndex:6},{value:"separatorMargin",paraId:8,tocIndex:6},{value:"-",paraId:8,tocIndex:6},{value:"Less variables",paraId:9,tocIndex:7},{value:"Component Token",paraId:9,tocIndex:7},{value:"Note",paraId:9,tocIndex:7},{value:"@btn-font-weight",paraId:9,tocIndex:7},{value:"fontWeight",paraId:9,tocIndex:7},{value:"-",paraId:9,tocIndex:7},{value:"@btn-border-radius-base",paraId:9,tocIndex:7},{value:"borderRadius",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-border-radius-sm",paraId:9,tocIndex:7},{value:"borderRadisuSM",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-border-width",paraId:9,tocIndex:7},{value:"lineWidth",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-border-style",paraId:9,tocIndex:7},{value:"lineStyle",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-shadow",paraId:9,tocIndex:7},{value:"defaultShadow",paraId:9,tocIndex:7},{value:"-",paraId:9,tocIndex:7},{value:"@btn-primary-shadow",paraId:9,tocIndex:7},{value:"primaryShadow",paraId:9,tocIndex:7},{value:"-",paraId:9,tocIndex:7},{value:"@btn-text-shadow",paraId:9,tocIndex:7},{value:"-",paraId:9,tocIndex:7},{value:"Deprecated for no ",paraId:9,tocIndex:7},{value:"text-shadow",paraId:9,tocIndex:7},{value:" any more",paraId:9,tocIndex:7},{value:"@btn-primary-color",paraId:9,tocIndex:7},{value:"primaryColor",paraId:9,tocIndex:7},{value:"-",paraId:9,tocIndex:7},{value:"@btn-primary-bg",paraId:9,tocIndex:7},{value:"colorPrimary",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-default-color",paraId:9,tocIndex:7},{value:"colorText",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-default-bg",paraId:9,tocIndex:7},{value:"colorBgContainer",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-default-border",paraId:9,tocIndex:7},{value:"colorBorder",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-danger-color",paraId:9,tocIndex:7},{value:"dangerColor",paraId:9,tocIndex:7},{value:"-",paraId:9,tocIndex:7},{value:"@btn-danger-bg",paraId:9,tocIndex:7},{value:"colorError",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-danger-border",paraId:9,tocIndex:7},{value:"colorError",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-disable-color",paraId:9,tocIndex:7},{value:"colorTextDisabled",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-disable-bg",paraId:9,tocIndex:7},{value:"colorBgContainerDisabled",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-disable-border",paraId:9,tocIndex:7},{value:"borderColorDisabled",paraId:9,tocIndex:7},{value:"-",paraId:9,tocIndex:7},{value:"@btn-default-ghost-color",paraId:9,tocIndex:7},{value:"defaultGhostColor",paraId:9,tocIndex:7},{value:"-",paraId:9,tocIndex:7},{value:"@btn-default-ghost-bg",paraId:9,tocIndex:7},{value:"ghostBg",paraId:9,tocIndex:7},{value:"-",paraId:9,tocIndex:7},{value:"@btn-default-ghost-border",paraId:9,tocIndex:7},{value:"defaultGhostBorderColor",paraId:9,tocIndex:7},{value:"-",paraId:9,tocIndex:7},{value:"@btn-font-size-lg",paraId:9,tocIndex:7},{value:"fontSizeLG",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-font-size-sm",paraId:9,tocIndex:7},{value:"fontSizeSM",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-padding-horizontal-base",paraId:9,tocIndex:7},{value:"paddingInline",paraId:9,tocIndex:7},{value:"-",paraId:9,tocIndex:7},{value:"@btn-padding-horizontal-lg",paraId:9,tocIndex:7},{value:"paddingInlineLG",paraId:9,tocIndex:7},{value:"-",paraId:9,tocIndex:7},{value:"@btn-padding-horizontal-sm",paraId:9,tocIndex:7},{value:"paddingInlineSM",paraId:9,tocIndex:7},{value:"-",paraId:9,tocIndex:7},{value:"@btn-height-base",paraId:9,tocIndex:7},{value:"controlHeight",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-height-lg",paraId:9,tocIndex:7},{value:"controlHeightLG",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-height-sm",paraId:9,tocIndex:7},{value:"controlHeightSM",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-line-height",paraId:9,tocIndex:7},{value:"lineHeight",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-circle-size",paraId:9,tocIndex:7},{value:"controlHeight",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-circle-size-lg",paraId:9,tocIndex:7},{value:"controlHeightLG",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-circle-size-sm",paraId:9,tocIndex:7},{value:"controlHeightSM",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-square-size",paraId:9,tocIndex:7},{value:"controlHeight",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-square-size-lg",paraId:9,tocIndex:7},{value:"controlHeightLG",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-square-size-sm",paraId:9,tocIndex:7},{value:"controlHeightSM",paraId:9,tocIndex:7},{value:"Global Token",paraId:9,tocIndex:7},{value:"@btn-square-only-icon-size",paraId:9,tocIndex:7},{value:"onlyIconSize",paraId:9,tocIndex:7},{value:"-",paraId:9,tocIndex:7},{value:"@btn-square-only-icon-size-sm",paraId:9,tocIndex:7},{value:"onlyIconSizeSM",paraId:9,tocIndex:7},{value:"-",paraId:9,tocIndex:7},{value:"@btn-square-only-icon-size-lg",paraId:9,tocIndex:7},{value:"onlyIconSizeLG",paraId:9,tocIndex:7},{value:"-",paraId:9,tocIndex:7},{value:"@btn-group-border",paraId:9,tocIndex:7},{value:"groupBorderColor",paraId:9,tocIndex:7},{value:"-",paraId:9,tocIndex:7},{value:"@btn-link-hover-bg",paraId:9,tocIndex:7},{value:"linkHoverBg",paraId:9,tocIndex:7},{value:"-",paraId:9,tocIndex:7},{value:"@btn-text-hover-bg",paraId:9,tocIndex:7},{value:"textHoverBg",paraId:9,tocIndex:7},{value:"-",paraId:9,tocIndex:7},{value:"Less variables",paraId:10,tocIndex:8},{value:"Component Token",paraId:10,tocIndex:8},{value:"Note",paraId:10,tocIndex:8},{value:"@calendar-bg",paraId:10,tocIndex:8},{value:"-",paraId:10,tocIndex:8},{value:"Deprecated for style change",paraId:10,tocIndex:8},{value:"@calendar-input-bg",paraId:10,tocIndex:8},{value:"-",paraId:10,tocIndex:8},{value:"Deprecated for style change",paraId:10,tocIndex:8},{value:"@calendar-border-color",paraId:10,tocIndex:8},{value:"-",paraId:10,tocIndex:8},{value:"Deprecated for style change",paraId:10,tocIndex:8},{value:"@calendar-item-active-bg",paraId:10,tocIndex:8},{value:"itemActiveBg",paraId:10,tocIndex:8},{value:"-",paraId:10,tocIndex:8},{value:"@calendar-column-active-bg",paraId:10,tocIndex:8},{value:"-",paraId:10,tocIndex:8},{value:"Deprecated for style change",paraId:10,tocIndex:8},{value:"@calendar-full-bg",paraId:10,tocIndex:8},{value:"fullBg",paraId:10,tocIndex:8},{value:"-",paraId:10,tocIndex:8},{value:"@calendar-full-panel-bg",paraId:10,tocIndex:8},{value:"fullPanelBg",paraId:10,tocIndex:8},{value:"-",paraId:10,tocIndex:8},{value:"Less variables",paraId:11,tocIndex:9},{value:"Component Token",paraId:11,tocIndex:9},{value:"Note",paraId:11,tocIndex:9},{value:"@card-head-color",paraId:11,tocIndex:9},{value:"colorTextHeading",paraId:11,tocIndex:9},{value:"Global Token",paraId:11,tocIndex:9},{value:"@card-head-background",paraId:11,tocIndex:9},{value:"headerBg",paraId:11,tocIndex:9},{value:"-",paraId:11,tocIndex:9},{value:"@card-head-font-size",paraId:11,tocIndex:9},{value:"headerFontSize",paraId:11,tocIndex:9},{value:"-",paraId:11,tocIndex:9},{value:"@card-head-font-size-sm",paraId:11,tocIndex:9},{value:"headerFontSizeSM",paraId:11,tocIndex:9},{value:"-",paraId:11,tocIndex:9},{value:"@card-head-padding",paraId:11,tocIndex:9},{value:"-",paraId:11,tocIndex:9},{value:"Deprecated",paraId:11,tocIndex:9},{value:"@card-head-padding-sm",paraId:11,tocIndex:9},{value:"-",paraId:11,tocIndex:9},{value:"Deprecated",paraId:11,tocIndex:9},{value:"@card-head-height",paraId:11,tocIndex:9},{value:"headerHeight",paraId:11,tocIndex:9},{value:"-",paraId:11,tocIndex:9},{value:"@card-head-height-sm",paraId:11,tocIndex:9},{value:"headerHeightSM",paraId:11,tocIndex:9},{value:"-",paraId:11,tocIndex:9},{value:"@card-inner-head-padding",paraId:11,tocIndex:9},{value:"-",paraId:11,tocIndex:9},{value:"Deprecated",paraId:11,tocIndex:9},{value:"@card-padding-base",paraId:11,tocIndex:9},{value:"cardPaddingBase",paraId:11,tocIndex:9},{value:"-",paraId:11,tocIndex:9},{value:"@card-padding-base-sm",paraId:11,tocIndex:9},{value:"cardPaddingBaseSm",paraId:11,tocIndex:9},{value:"-",paraId:11,tocIndex:9},{value:"@card-actions-background",paraId:11,tocIndex:9},{value:"actionsBackground",paraId:11,tocIndex:9},{value:"-",paraId:11,tocIndex:9},{value:"@card-actions-li-margin",paraId:11,tocIndex:9},{value:"actionsLiMargin",paraId:11,tocIndex:9},{value:"-",paraId:11,tocIndex:9},{value:"@card-skeleton-bg",paraId:11,tocIndex:9},{value:"-",paraId:11,tocIndex:9},{value:"Deprecated in favor of internal Skeleton",paraId:11,tocIndex:9},{value:"@card-background",paraId:11,tocIndex:9},{value:"colorBgContainer",paraId:11,tocIndex:9},{value:"Global Token",paraId:11,tocIndex:9},{value:"@card-shadow",paraId:11,tocIndex:9},{value:"-",paraId:11,tocIndex:9},{value:"Could be modified by ",paraId:11,tocIndex:9},{value:"className",paraId:11,tocIndex:9},{value:" or ",paraId:11,tocIndex:9},{value:"style",paraId:11,tocIndex:9},{value:" directly",paraId:11,tocIndex:9},{value:"@card-radius",paraId:11,tocIndex:9},{value:"borderRadiusLG",paraId:11,tocIndex:9},{value:"Global Token",paraId:11,tocIndex:9},{value:"@card-head-tabs-margin-bottom",paraId:11,tocIndex:9},{value:"tabsMarginBottom",paraId:11,tocIndex:9},{value:"-",paraId:11,tocIndex:9},{value:"@card-head-extra-color",paraId:11,tocIndex:9},{value:"extraColor",paraId:11,tocIndex:9},{value:"-",paraId:11,tocIndex:9},{value:"Less variables",paraId:12,tocIndex:10},{value:"Component Token",paraId:12,tocIndex:10},{value:"Note",paraId:12,tocIndex:10},{value:"@carousel-dot-width",paraId:12,tocIndex:10},{value:"dotWidth",paraId:12,tocIndex:10},{value:"-",paraId:12,tocIndex:10},{value:"@carousel-dot-height",paraId:12,tocIndex:10},{value:"dotHeight",paraId:12,tocIndex:10},{value:"-",paraId:12,tocIndex:10},{value:"@carousel-dot-active-width",paraId:12,tocIndex:10},{value:"dotActiveWidth",paraId:12,tocIndex:10},{value:"-",paraId:12,tocIndex:10},{value:"Less variables",paraId:13,tocIndex:11},{value:"Component Token",paraId:13,tocIndex:11},{value:"Note",paraId:13,tocIndex:11},{value:"@cascader-bg",paraId:13,tocIndex:11},{value:"-",paraId:13,tocIndex:11},{value:"Deprecated",paraId:13,tocIndex:11},{value:"@cascader-item-selected-bg",paraId:13,tocIndex:11},{value:"optionSelectedBg",paraId:13,tocIndex:11},{value:"-",paraId:13,tocIndex:11},{value:"@cascader-menu-bg",paraId:13,tocIndex:11},{value:"-",paraId:13,tocIndex:11},{value:"Deprecated",paraId:13,tocIndex:11},{value:"@cascader-menu-border-color-split",paraId:13,tocIndex:11},{value:"colorSplit",paraId:13,tocIndex:11},{value:"Global Token",paraId:13,tocIndex:11},{value:"@cascader-dropdown-vertical-padding",paraId:13,tocIndex:11},{value:"optionPadding",paraId:13,tocIndex:11},{value:"-",paraId:13,tocIndex:11},{value:"@cascader-dropdown-edge-child-vertical-padding",paraId:13,tocIndex:11},{value:"menuPadding",paraId:13,tocIndex:11},{value:"-",paraId:13,tocIndex:11},{value:"@cascader-dropdown-font-size",paraId:13,tocIndex:11},{value:"-",paraId:13,tocIndex:11},{value:"Deprecated",paraId:13,tocIndex:11},{value:"@cascader-dropdown-line-height",paraId:13,tocIndex:11},{value:"lineHeight",paraId:13,tocIndex:11},{value:"Global Token",paraId:13,tocIndex:11},{value:"Less variables",paraId:14,tocIndex:12},{value:"Component Token",paraId:14,tocIndex:12},{value:"Note",paraId:14,tocIndex:12},{value:"@checkbox-size",paraId:14,tocIndex:12},{value:"controlInteractiveSize",paraId:14,tocIndex:12},{value:"GlobalToken",paraId:14,tocIndex:12},{value:"@checkbox-color",paraId:14,tocIndex:12},{value:"colorPrimary",paraId:14,tocIndex:12},{value:"-",paraId:14,tocIndex:12},{value:"@checkbox-check-color",paraId:14,tocIndex:12},{value:"colorWhite",paraId:14,tocIndex:12},{value:"-",paraId:14,tocIndex:12},{value:"@checkbox-check-bg",paraId:14,tocIndex:12},{value:"colorPrimary",paraId:14,tocIndex:12},{value:"GlobalToken",paraId:14,tocIndex:12},{value:"@checkbox-border-width",paraId:14,tocIndex:12},{value:"lineWidth",paraId:14,tocIndex:12},{value:"-",paraId:14,tocIndex:12},{value:"@checkbox-border-radius",paraId:14,tocIndex:12},{value:"borderRadiusSM",paraId:14,tocIndex:12},{value:"-",paraId:14,tocIndex:12},{value:"@checkbox-group-item-margin-right",paraId:14,tocIndex:12},{value:"-",paraId:14,tocIndex:12},{value:"Deprecated for style change",paraId:14,tocIndex:12},{value:"Less variables",paraId:15,tocIndex:13},{value:"Component Token",paraId:15,tocIndex:13},{value:"Note",paraId:15,tocIndex:13},{value:"@collapse-header-padding",paraId:15,tocIndex:13},{value:"headerPadding",paraId:15,tocIndex:13},{value:"-",paraId:15,tocIndex:13},{value:"@collapse-header-padding-extra",paraId:15,tocIndex:13},{value:"-",paraId:15,tocIndex:13},{value:"Depreacated",paraId:15,tocIndex:13},{value:"@collapse-header-bg",paraId:15,tocIndex:13},{value:"headerBg",paraId:15,tocIndex:13},{value:"-",paraId:15,tocIndex:13},{value:"@collapse-content-padding",paraId:15,tocIndex:13},{value:"contentPadding",paraId:15,tocIndex:13},{value:"-",paraId:15,tocIndex:13},{value:"@collapse-content-bg",paraId:15,tocIndex:13},{value:"contentBg",paraId:15,tocIndex:13},{value:"-",paraId:15,tocIndex:13},{value:"@collapse-header-arrow-left",paraId:15,tocIndex:13},{value:"-",paraId:15,tocIndex:13},{value:"Deprecated",paraId:15,tocIndex:13},{value:"Less variables",paraId:16,tocIndex:14},{value:"Component Token",paraId:16,tocIndex:14},{value:"Note",paraId:16,tocIndex:14},{value:"@picker-bg",paraId:16,tocIndex:14},{value:"colorBgContainer",paraId:16,tocIndex:14},{value:"Global Token",paraId:16,tocIndex:14},{value:"@picker-basic-cell-hover-color",paraId:16,tocIndex:14},{value:"cellHoverBg",paraId:16,tocIndex:14},{value:"-",paraId:16,tocIndex:14},{value:"@picker-basic-cell-active-with-range-color",paraId:16,tocIndex:14},{value:"cellActiveWithRangeBg",paraId:16,tocIndex:14},{value:"-",paraId:16,tocIndex:14},{value:"@picker-basic-cell-hover-with-range-color",paraId:16,tocIndex:14},{value:"cellHoverWithRangeBg",paraId:16,tocIndex:14},{value:"-",paraId:16,tocIndex:14},{value:"@picker-basic-cell-disabled-bg",paraId:16,tocIndex:14},{value:"cellBgDisabled",paraId:16,tocIndex:14},{value:"-",paraId:16,tocIndex:14},{value:"@picker-border-color",paraId:16,tocIndex:14},{value:"colorSplit",paraId:16,tocIndex:14},{value:"Global Token",paraId:16,tocIndex:14},{value:"@picker-date-hover-range-border-color",paraId:16,tocIndex:14},{value:"cellRangeBorderColor",paraId:16,tocIndex:14},{value:"-",paraId:16,tocIndex:14},{value:"@picker-date-hover-range-color",paraId:16,tocIndex:14},{value:"cellHoverWithRangeColor",paraId:16,tocIndex:14},{value:"-",paraId:16,tocIndex:14},{value:"@picker-time-panel-column-width",paraId:16,tocIndex:14},{value:"timeColumnWidth",paraId:16,tocIndex:14},{value:"-",paraId:16,tocIndex:14},{value:"@picker-time-panel-column-height",paraId:16,tocIndex:14},{value:"timeColumnHeight",paraId:16,tocIndex:14},{value:"-",paraId:16,tocIndex:14},{value:"@picker-time-panel-cell-height",paraId:16,tocIndex:14},{value:"timeCellHeight",paraId:16,tocIndex:14},{value:"-",paraId:16,tocIndex:14},{value:"@picker-panel-cell-height",paraId:16,tocIndex:14},{value:"cellHeight",paraId:16,tocIndex:14},{value:"-",paraId:16,tocIndex:14},{value:"@picker-panel-cell-width",paraId:16,tocIndex:14},{value:"cellWidth",paraId:16,tocIndex:14},{value:"-",paraId:16,tocIndex:14},{value:"@picker-text-height",paraId:16,tocIndex:14},{value:"textHeight",paraId:16,tocIndex:14},{value:"-",paraId:16,tocIndex:14},{value:"@picker-panel-without-time-cell-height",paraId:16,tocIndex:14},{value:"withoutTimeCellHeight",paraId:16,tocIndex:14},{value:"-",paraId:16,tocIndex:14},{value:"Less variables",paraId:17,tocIndex:15},{value:"Component Token",paraId:17,tocIndex:15},{value:"Note",paraId:17,tocIndex:15},{value:"@descriptions-bg",paraId:17,tocIndex:15},{value:"labelBg",paraId:17,tocIndex:15},{value:"-",paraId:17,tocIndex:15},{value:"@descriptions-title-margin-bottom",paraId:17,tocIndex:15},{value:"titleMarginBottom",paraId:17,tocIndex:15},{value:"-",paraId:17,tocIndex:15},{value:"@descriptions-default-padding",paraId:17,tocIndex:15},{value:"padding",paraId:17,tocIndex:15},{value:"\u3001",paraId:17,tocIndex:15},{value:"paddingLG",paraId:17,tocIndex:15},{value:"GlobalToken, used as ",paraId:17,tocIndex:15},{value:"${token.padding}px ${token.paddingLG}px",paraId:17,tocIndex:15},{value:"@descriptions-middle-padding",paraId:17,tocIndex:15},{value:"paddingSM",paraId:17,tocIndex:15},{value:"\u3001",paraId:17,tocIndex:15},{value:"paddingLG",paraId:17,tocIndex:15},{value:"GlobalToken, used as ",paraId:17,tocIndex:15},{value:"${token.paddingSM}px ${token.paddingLG}px",paraId:17,tocIndex:15},{value:"@descriptions-small-padding",paraId:17,tocIndex:15},{value:"paddingXS",paraId:17,tocIndex:15},{value:"\u3001",paraId:17,tocIndex:15},{value:"padding",paraId:17,tocIndex:15},{value:"GlobalToken, used as ",paraId:17,tocIndex:15},{value:"${token.paddingXS}px ${token.padding}px",paraId:17,tocIndex:15},{value:"@descriptions-item-padding-bottom",paraId:17,tocIndex:15},{value:"itemPaddingBottom",paraId:17,tocIndex:15},{value:"-",paraId:17,tocIndex:15},{value:"@descriptions-item-trailing-colon",paraId:17,tocIndex:15},{value:"-",paraId:17,tocIndex:15},{value:"Deprecated for style change",paraId:17,tocIndex:15},{value:"@descriptions-item-label-colon-margin-right",paraId:17,tocIndex:15},{value:"colonMarginRight",paraId:17,tocIndex:15},{value:"-",paraId:17,tocIndex:15},{value:"@descriptions-item-label-colon-margin-left",paraId:17,tocIndex:15},{value:"colonMarginLeft",paraId:17,tocIndex:15},{value:"-",paraId:17,tocIndex:15},{value:"@descriptions-extra-color",paraId:17,tocIndex:15},{value:"extraColor",paraId:17,tocIndex:15},{value:"-",paraId:17,tocIndex:15},{value:"Less variables",paraId:18,tocIndex:16},{value:"Component Token",paraId:18,tocIndex:16},{value:"Note",paraId:18,tocIndex:16},{value:"---",paraId:18,tocIndex:16},{value:"---",paraId:18,tocIndex:16},{value:"---",paraId:18,tocIndex:16},{value:"@divider-text-padding",paraId:18,tocIndex:16},{value:"textPaddingInline",paraId:18,tocIndex:16},{value:"-",paraId:18,tocIndex:16},{value:"@divider-orientation-margin",paraId:18,tocIndex:16},{value:"orientationMargin",paraId:18,tocIndex:16},{value:"-",paraId:18,tocIndex:16},{value:"@divider-color",paraId:18,tocIndex:16},{value:"colorSplit",paraId:18,tocIndex:16},{value:"Global Token",paraId:18,tocIndex:16},{value:"@divider-vertical-gutter",paraId:18,tocIndex:16},{value:"verticalMarginInline",paraId:18,tocIndex:16},{value:"-",paraId:18,tocIndex:16},{value:"Less variables",paraId:19,tocIndex:17},{value:"Component Token",paraId:19,tocIndex:17},{value:"Note",paraId:19,tocIndex:17},{value:"@drawer-bg",paraId:19,tocIndex:17},{value:"colorBgElevated",paraId:19,tocIndex:17},{value:"GlobalToken",paraId:19,tocIndex:17},{value:"@drawer-header-padding",paraId:19,tocIndex:17},{value:"padding",paraId:19,tocIndex:17},{value:"\u3001",paraId:19,tocIndex:17},{value:"paddingLG",paraId:19,tocIndex:17},{value:"GlobalToken, used as ",paraId:19,tocIndex:17},{value:"${padding}px ${paddingLG}px",paraId:19,tocIndex:17},{value:"@drawer-title-font-size",paraId:19,tocIndex:17},{value:"fontSizeLG",paraId:19,tocIndex:17},{value:"GlobalToken",paraId:19,tocIndex:17},{value:"@drawer-title-line-height",paraId:19,tocIndex:17},{value:"lineHeightLG",paraId:19,tocIndex:17},{value:"GlobalToken",paraId:19,tocIndex:17},{value:"@drawer-body-padding",paraId:19,tocIndex:17},{value:"paddingLG",paraId:19,tocIndex:17},{value:"GlobalToken",paraId:19,tocIndex:17},{value:"@drawer-footer-padding-vertical",paraId:19,tocIndex:17},{value:"footerPaddingBlock",paraId:19,tocIndex:17},{value:"footerPaddingBlock",paraId:19,tocIndex:17},{value:"  is a number without units, ",paraId:19,tocIndex:17},{value:"@drawer-footer-padding-vertical",paraId:19,tocIndex:17},{value:" with units",paraId:19,tocIndex:17},{value:"@drawer-footer-padding-horizontal",paraId:19,tocIndex:17},{value:"footerPaddingInline",paraId:19,tocIndex:17},{value:"footerPaddingInline",paraId:19,tocIndex:17},{value:"  is a number without units, ",paraId:19,tocIndex:17},{value:"@drawer-footer-padding-horizontal",paraId:19,tocIndex:17},{value:" with units",paraId:19,tocIndex:17},{value:"Less variables",paraId:20,tocIndex:18},{value:"Component Token",paraId:20,tocIndex:18},{value:"Note",paraId:20,tocIndex:18},{value:"@dropdown-selected-color",paraId:20,tocIndex:18},{value:"colorPrimary",paraId:20,tocIndex:18},{value:"GlobalToken",paraId:20,tocIndex:18},{value:"@dropdown-menu-submenu-disabled-bg",paraId:20,tocIndex:18},{value:"colorBgElevated",paraId:20,tocIndex:18},{value:"GlobalToken",paraId:20,tocIndex:18},{value:"@dropdown-selected-bg",paraId:20,tocIndex:18},{value:"controlItemBgActive",paraId:20,tocIndex:18},{value:"GlobalToken",paraId:20,tocIndex:18},{value:"Less variables",paraId:21,tocIndex:19},{value:"Component Token",paraId:21,tocIndex:19},{value:"Note",paraId:21,tocIndex:19},{value:"@empty-font-size",paraId:21,tocIndex:19},{value:"fontSize",paraId:21,tocIndex:19},{value:"GlobalToken",paraId:21,tocIndex:19},{value:"Less variables",paraId:22,tocIndex:20},{value:"Component Token",paraId:22,tocIndex:20},{value:"Note",paraId:22,tocIndex:20},{value:"@label-required-color",paraId:22,tocIndex:20},{value:"labelRequiredMarkColor",paraId:22,tocIndex:20},{value:"-",paraId:22,tocIndex:20},{value:"@label-color",paraId:22,tocIndex:20},{value:"labelColor",paraId:22,tocIndex:20},{value:"-",paraId:22,tocIndex:20},{value:"@form-warning-input-bg",paraId:22,tocIndex:20},{value:"-",paraId:22,tocIndex:20},{value:"Deprecated",paraId:22,tocIndex:20},{value:"@form-item-margin-bottom",paraId:22,tocIndex:20},{value:"itemMarginBottom",paraId:22,tocIndex:20},{value:"-",paraId:22,tocIndex:20},{value:"@form-item-trailing-colon",paraId:22,tocIndex:20},{value:"-",paraId:22,tocIndex:20},{value:"Deprecated",paraId:22,tocIndex:20},{value:"@form-vertical-label-padding",paraId:22,tocIndex:20},{value:"verticalLabelPadding",paraId:22,tocIndex:20},{value:"-",paraId:22,tocIndex:20},{value:"@form-vertical-label-margin",paraId:22,tocIndex:20},{value:"verticalLabelMargin",paraId:22,tocIndex:20},{value:"-",paraId:22,tocIndex:20},{value:"@form-item-label-font-size",paraId:22,tocIndex:20},{value:"labelFontSize",paraId:22,tocIndex:20},{value:"-",paraId:22,tocIndex:20},{value:"@form-item-label-height",paraId:22,tocIndex:20},{value:"labelHeight",paraId:22,tocIndex:20},{value:"-",paraId:22,tocIndex:20},{value:"@form-item-label-colon-margin-right",paraId:22,tocIndex:20},{value:"labelColonMarginInlineEnd",paraId:22,tocIndex:20},{value:"-",paraId:22,tocIndex:20},{value:"@form-item-label-colon-margin-left",paraId:22,tocIndex:20},{value:"labelColonMarginInlineStart",paraId:22,tocIndex:20},{value:"-",paraId:22,tocIndex:20},{value:"@form-error-input-bg",paraId:22,tocIndex:20},{value:"-",paraId:22,tocIndex:20},{value:"Deprecated",paraId:22,tocIndex:20},{value:"Less variables",paraId:23,tocIndex:21},{value:"Component Token",paraId:23,tocIndex:21},{value:"Note",paraId:23,tocIndex:21},{value:"@image-size-base",paraId:23,tocIndex:21},{value:"-",paraId:23,tocIndex:21},{value:"Deprecated for not used",paraId:23,tocIndex:21},{value:"@image-font-size-base",paraId:23,tocIndex:21},{value:"-",paraId:23,tocIndex:21},{value:"Deprecated for not used",paraId:23,tocIndex:21},{value:"@image-bg",paraId:23,tocIndex:21},{value:"colorFillTertiary",paraId:23,tocIndex:21},{value:"GlobalToken",paraId:23,tocIndex:21},{value:"@image-color",paraId:23,tocIndex:21},{value:"colorTextLightSolid",paraId:23,tocIndex:21},{value:"GlobalToken",paraId:23,tocIndex:21},{value:"@image-preview-operation-size",paraId:23,tocIndex:21},{value:"previewOperationSize",paraId:23,tocIndex:21},{value:"-",paraId:23,tocIndex:21},{value:"@image-preview-operation-color",paraId:23,tocIndex:21},{value:"previewOperationColor",paraId:23,tocIndex:21},{value:"-",paraId:23,tocIndex:21},{value:"@image-preview-operation-disabled-color",paraId:23,tocIndex:21},{value:"previewOperationColorDisabled",paraId:23,tocIndex:21},{value:"-",paraId:23,tocIndex:21},{value:"Less variables",paraId:24,tocIndex:22},{value:"Component Token",paraId:24,tocIndex:22},{value:"Note",paraId:24,tocIndex:22},{value:"@input-height-base",paraId:24,tocIndex:22},{value:"controlHeight",paraId:24,tocIndex:22},{value:"Global Token",paraId:24,tocIndex:22},{value:"@input-height-lg",paraId:24,tocIndex:22},{value:"controlHeightLG",paraId:24,tocIndex:22},{value:"Global Token",paraId:24,tocIndex:22},{value:"@input-height-sm",paraId:24,tocIndex:22},{value:"controlHeightSM",paraId:24,tocIndex:22},{value:"Global Token",paraId:24,tocIndex:22},{value:"@input-padding-horizontal",paraId:24,tocIndex:22},{value:"paddingInline",paraId:24,tocIndex:22},{value:"-",paraId:24,tocIndex:22},{value:"@input-padding-horizontal-base",paraId:24,tocIndex:22},{value:"paddingInline",paraId:24,tocIndex:22},{value:"-",paraId:24,tocIndex:22},{value:"@input-padding-horizontal-sm",paraId:24,tocIndex:22},{value:"paddingInlineSM",paraId:24,tocIndex:22},{value:"-",paraId:24,tocIndex:22},{value:"@input-padding-horizontal-lg",paraId:24,tocIndex:22},{value:"paddingInlineLG",paraId:24,tocIndex:22},{value:"-",paraId:24,tocIndex:22},{value:"@input-padding-vertical-base",paraId:24,tocIndex:22},{value:"paddinBlock",paraId:24,tocIndex:22},{value:"-",paraId:24,tocIndex:22},{value:"@input-padding-vertical-sm",paraId:24,tocIndex:22},{value:"paddingBlockSM",paraId:24,tocIndex:22},{value:"-",paraId:24,tocIndex:22},{value:"@input-padding-vertical-lg",paraId:24,tocIndex:22},{value:"paddingBlockLG",paraId:24,tocIndex:22},{value:"-",paraId:24,tocIndex:22},{value:"@input-placeholder-color",paraId:24,tocIndex:22},{value:"colorTextPlaceholder",paraId:24,tocIndex:22},{value:"Global Token",paraId:24,tocIndex:22},{value:"@input-color",paraId:24,tocIndex:22},{value:"colorText",paraId:24,tocIndex:22},{value:"Global Token",paraId:24,tocIndex:22},{value:"@input-icon-color",paraId:24,tocIndex:22},{value:"-",paraId:24,tocIndex:22},{value:"\u5DF2\u5E9F\u5F03",paraId:24,tocIndex:22},{value:"@input-border-color",paraId:24,tocIndex:22},{value:"colorBorder",paraId:24,tocIndex:22},{value:"Global Token",paraId:24,tocIndex:22},{value:"@input-bg",paraId:24,tocIndex:22},{value:"colorBgContainer",paraId:24,tocIndex:22},{value:"Global Token",paraId:24,tocIndex:22},{value:"@input-addon-bg",paraId:24,tocIndex:22},{value:"addonBg",paraId:24,tocIndex:22},{value:"-",paraId:24,tocIndex:22},{value:"@input-hover-border-color",paraId:24,tocIndex:22},{value:"hoverBorderColor",paraId:24,tocIndex:22},{value:"-",paraId:24,tocIndex:22},{value:"@input-disabled-bg",paraId:24,tocIndex:22},{value:"colorBgContainerDisabled",paraId:24,tocIndex:22},{value:"Global Token",paraId:24,tocIndex:22},{value:"@input-outline-offset",paraId:24,tocIndex:22},{value:"activeShadow",paraId:24,tocIndex:22},{value:"Control box-shadow when active",paraId:24,tocIndex:22},{value:"@input-icon-hover-color",paraId:24,tocIndex:22},{value:"colorIconHover",paraId:24,tocIndex:22},{value:"Global Token",paraId:24,tocIndex:22},{value:"@input-disabled-color",paraId:24,tocIndex:22},{value:"colorTextDisabled",paraId:24,tocIndex:22},{value:"Global Token",paraId:24,tocIndex:22},{value:"Less variables",paraId:25,tocIndex:23},{value:"Component Token",paraId:25,tocIndex:23},{value:"Note",paraId:25,tocIndex:23},{value:"@input-number-hover-border-color",paraId:25,tocIndex:23},{value:"hoverBorderColor",paraId:25,tocIndex:23},{value:"-",paraId:25,tocIndex:23},{value:"@input-number-handler-active-bg",paraId:25,tocIndex:23},{value:"handleActiveBg",paraId:25,tocIndex:23},{value:"-",paraId:25,tocIndex:23},{value:"@input-number-handler-hover-bg",paraId:25,tocIndex:23},{value:"handleHoverColor",paraId:25,tocIndex:23},{value:"Wrong usage in 4.x, which is actually text color",paraId:25,tocIndex:23},{value:"@input-number-handler-bg",paraId:25,tocIndex:23},{value:"handleBg",paraId:25,tocIndex:23},{value:"-",paraId:25,tocIndex:23},{value:"@input-number-handler-border-color",paraId:25,tocIndex:23},{value:"handleBorderColor",paraId:25,tocIndex:23},{value:"-",paraId:25,tocIndex:23},{value:"Less variables",paraId:26,tocIndex:24},{value:"Component Token",paraId:26,tocIndex:24},{value:"Note",paraId:26,tocIndex:24},{value:"@layout-body-background",paraId:26,tocIndex:24},{value:"bodyBg",paraId:26,tocIndex:24},{value:"-",paraId:26,tocIndex:24},{value:"@layout-header-background",paraId:26,tocIndex:24},{value:"headerBg",paraId:26,tocIndex:24},{value:"-",paraId:26,tocIndex:24},{value:"@layout-header-height",paraId:26,tocIndex:24},{value:"headerHeight",paraId:26,tocIndex:24},{value:"-",paraId:26,tocIndex:24},{value:"@layout-header-padding",paraId:26,tocIndex:24},{value:"headerPadding",paraId:26,tocIndex:24},{value:"-",paraId:26,tocIndex:24},{value:"@layout-header-color",paraId:26,tocIndex:24},{value:"headerColor",paraId:26,tocIndex:24},{value:"-",paraId:26,tocIndex:24},{value:"@layout-footer-padding",paraId:26,tocIndex:24},{value:"footerPadding",paraId:26,tocIndex:24},{value:"-",paraId:26,tocIndex:24},{value:"@layout-footer-background",paraId:26,tocIndex:24},{value:"footerBg",paraId:26,tocIndex:24},{value:"-",paraId:26,tocIndex:24},{value:"@layout-sider-background",paraId:26,tocIndex:24},{value:"siderBg",paraId:26,tocIndex:24},{value:"-",paraId:26,tocIndex:24},{value:"@layout-trigger-height",paraId:26,tocIndex:24},{value:"triggerHeight",paraId:26,tocIndex:24},{value:"-",paraId:26,tocIndex:24},{value:"@layout-trigger-background",paraId:26,tocIndex:24},{value:"triggerBg",paraId:26,tocIndex:24},{value:"-",paraId:26,tocIndex:24},{value:"@layout-trigger-color",paraId:26,tocIndex:24},{value:"triggerColor",paraId:26,tocIndex:24},{value:"-",paraId:26,tocIndex:24},{value:"@layout-zero-trigger-width",paraId:26,tocIndex:24},{value:"zeroTriggerWidth",paraId:26,tocIndex:24},{value:"-",paraId:26,tocIndex:24},{value:"@layout-zero-trigger-height",paraId:26,tocIndex:24},{value:"zeroTriggerHeight",paraId:26,tocIndex:24},{value:"-",paraId:26,tocIndex:24},{value:"@layout-sider-background-light",paraId:26,tocIndex:24},{value:"lightSiderBg",paraId:26,tocIndex:24},{value:"-",paraId:26,tocIndex:24},{value:"@layout-trigger-background-light",paraId:26,tocIndex:24},{value:"lightTriggerBg",paraId:26,tocIndex:24},{value:"-",paraId:26,tocIndex:24},{value:"@layout-trigger-color-light",paraId:26,tocIndex:24},{value:"lightTriggerColor",paraId:26,tocIndex:24},{value:"-",paraId:26,tocIndex:24},{value:"Less variables",paraId:27,tocIndex:25},{value:"Component Token",paraId:27,tocIndex:25},{value:"Note",paraId:27,tocIndex:25},{value:"@list-header-background",paraId:27,tocIndex:25},{value:"headerBg",paraId:27,tocIndex:25},{value:"-",paraId:27,tocIndex:25},{value:"@list-footer-background",paraId:27,tocIndex:25},{value:"footerBg",paraId:27,tocIndex:25},{value:"-",paraId:27,tocIndex:25},{value:"@list-empty-text-padding",paraId:27,tocIndex:25},{value:"emptyTextPadding",paraId:27,tocIndex:25},{value:"-",paraId:27,tocIndex:25},{value:"@list-item-padding",paraId:27,tocIndex:25},{value:"itemPadding",paraId:27,tocIndex:25},{value:"-",paraId:27,tocIndex:25},{value:"@list-item-padding-sm",paraId:27,tocIndex:25},{value:"itemPaddingSM",paraId:27,tocIndex:25},{value:"-",paraId:27,tocIndex:25},{value:"@list-item-padding-lg",paraId:27,tocIndex:25},{value:"itemPaddingLG",paraId:27,tocIndex:25},{value:"-",paraId:27,tocIndex:25},{value:"@list-item-meta-margin-bottom",paraId:27,tocIndex:25},{value:"metaMarginBottom",paraId:27,tocIndex:25},{value:"-",paraId:27,tocIndex:25},{value:"@list-item-meta-avatar-margin-right",paraId:27,tocIndex:25},{value:"avatarMarginRight",paraId:27,tocIndex:25},{value:"-",paraId:27,tocIndex:25},{value:"@list-item-meta-title-margin-bottom",paraId:27,tocIndex:25},{value:"titleMarginBottom",paraId:27,tocIndex:25},{value:"-",paraId:27,tocIndex:25},{value:"@list-customize-card-bg",paraId:27,tocIndex:25},{value:"-",paraId:27,tocIndex:25},{value:"Deprecated for style change",paraId:27,tocIndex:25},{value:"@list-item-meta-description-font-size",paraId:27,tocIndex:25},{value:"descriptionFontSize",paraId:27,tocIndex:25},{value:"-",paraId:27,tocIndex:25},{value:"Less variables",paraId:28,tocIndex:26},{value:"Component Token",paraId:28,tocIndex:26},{value:"Note",paraId:28,tocIndex:26},{value:"@mentions-dropdown-bg",paraId:28,tocIndex:26},{value:"colorBgElevated",paraId:28,tocIndex:26},{value:"GlobalToken",paraId:28,tocIndex:26},{value:"@mentions-dropdown-menu-item-hover-bg",paraId:28,tocIndex:26},{value:"-",paraId:28,tocIndex:26},{value:"Deprecated",paraId:28,tocIndex:26},{value:"Less variables",paraId:29,tocIndex:27},{value:"Component Token",paraId:29,tocIndex:27},{value:"Note",paraId:29,tocIndex:27},{value:"@menu-inline-toplevel-item-height",paraId:29,tocIndex:27},{value:"itemHeight",paraId:29,tocIndex:27},{value:"Same as ",paraId:29,tocIndex:27},{value:"@menu-item-height",paraId:29,tocIndex:27},{value:"@menu-item-height",paraId:29,tocIndex:27},{value:"itemHeight",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-item-group-height",paraId:29,tocIndex:27},{value:"groupTitleLineHeight",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-collapsed-width",paraId:29,tocIndex:27},{value:"collapsedWidth",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-bg",paraId:29,tocIndex:27},{value:"itemBg",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-popup-bg",paraId:29,tocIndex:27},{value:"popupBg",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-item-color",paraId:29,tocIndex:27},{value:"itemColor",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-inline-submenu-bg",paraId:29,tocIndex:27},{value:"subMenuItemBg",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-highlight-color",paraId:29,tocIndex:27},{value:"itemSelectedColor",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-highlight-danger-color",paraId:29,tocIndex:27},{value:"dangerItemSelectedColor",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-item-active-bg",paraId:29,tocIndex:27},{value:"itemActiveBg",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-item-active-danger-bg",paraId:29,tocIndex:27},{value:"dangerItemActiveBg",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-item-active-border-width",paraId:29,tocIndex:27},{value:"activeBarBorderWidth",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-item-group-title-color",paraId:29,tocIndex:27},{value:"groupTitleColor",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-item-vertical-margin",paraId:29,tocIndex:27},{value:"itemMarginBlock",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-item-font-size",paraId:29,tocIndex:27},{value:"fontSize",paraId:29,tocIndex:27},{value:"Global Token",paraId:29,tocIndex:27},{value:"@menu-item-boundary-margin",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"Deprecated in favor of new style, use ",paraId:29,tocIndex:27},{value:"itemMarginBlock",paraId:29,tocIndex:27},{value:" instead",paraId:29,tocIndex:27},{value:"@menu-item-padding-horizontal",paraId:29,tocIndex:27},{value:"itemPaddingInline",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-item-padding",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"Depreacated, use ",paraId:29,tocIndex:27},{value:"itemPaddingInline",paraId:29,tocIndex:27},{value:" and ",paraId:29,tocIndex:27},{value:"itemHeight",paraId:29,tocIndex:27},{value:" instead",paraId:29,tocIndex:27},{value:"@menu-horizontal-line-height",paraId:29,tocIndex:27},{value:"horizontalLineHeight",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-icon-margin-right",paraId:29,tocIndex:27},{value:"iconMarginInlineEnd",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-icon-size",paraId:29,tocIndex:27},{value:"iconSize",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-icon-size-lg",paraId:29,tocIndex:27},{value:"horizontalLineHeight",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-dark-color",paraId:29,tocIndex:27},{value:"darkItemColor",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-dark-danger-color",paraId:29,tocIndex:27},{value:"darkDangerItemColor",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-dark-bg",paraId:29,tocIndex:27},{value:"darkItemBg",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-dark-arrow-color",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"Deprecated, and same as text color",paraId:29,tocIndex:27},{value:"@menu-dark-inline-submenu-bg",paraId:29,tocIndex:27},{value:"darkSubMenuItemBg",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-dark-highlight-color",paraId:29,tocIndex:27},{value:"darkItemSelectedColor",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-dark-item-active-bg",paraId:29,tocIndex:27},{value:"darkItemSelectedBg",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-dark-item-active-danger-bg",paraId:29,tocIndex:27},{value:"darkDangerItemSelectedBg",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"@menu-dark-selected-item-icon-color",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"Deprecated, same as ",paraId:29,tocIndex:27},{value:"darkItemSelectedColor",paraId:29,tocIndex:27},{value:"@menu-dark-selected-item-text-color",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"Deprecated, same as ",paraId:29,tocIndex:27},{value:"darkItemSelectedColor",paraId:29,tocIndex:27},{value:"@menu-dark-item-hover-bg",paraId:29,tocIndex:27},{value:"darkItemHoverBg",paraId:29,tocIndex:27},{value:"-",paraId:29,tocIndex:27},{value:"Less variables",paraId:30,tocIndex:28},{value:"Component Token",paraId:30,tocIndex:28},{value:"Note",paraId:30,tocIndex:28},{value:"@zindex-message",paraId:30,tocIndex:28},{value:"zIndexPopup",paraId:30,tocIndex:28},{value:"-",paraId:30,tocIndex:28},{value:"@message-notice-content-padding",paraId:30,tocIndex:28},{value:"contentPadding",paraId:30,tocIndex:28},{value:"-",paraId:30,tocIndex:28},{value:"@message-notice-content-bg",paraId:30,tocIndex:28},{value:"contentBg",paraId:30,tocIndex:28},{value:"-",paraId:30,tocIndex:28},{value:"Less variables",paraId:31,tocIndex:29},{value:"Component Token",paraId:31,tocIndex:29},{value:"Note",paraId:31,tocIndex:29},{value:"@modal-header-padding-vertical",paraId:31,tocIndex:29},{value:"-",paraId:31,tocIndex:29},{value:"Deprecated for style change",paraId:31,tocIndex:29},{value:"@modal-header-padding-horizontal",paraId:31,tocIndex:29},{value:"-",paraId:31,tocIndex:29},{value:"Deprecated for style change",paraId:31,tocIndex:29},{value:"@modal-body-padding",paraId:31,tocIndex:29},{value:"-",paraId:31,tocIndex:29},{value:"Deprecated for style change",paraId:31,tocIndex:29},{value:"@modal-header-bg",paraId:31,tocIndex:29},{value:"headerBg",paraId:31,tocIndex:29},{value:"-",paraId:31,tocIndex:29},{value:"@modal-header-padding",paraId:31,tocIndex:29},{value:"-",paraId:31,tocIndex:29},{value:"Deprecated for style change",paraId:31,tocIndex:29},{value:"@modal-header-border-width",paraId:31,tocIndex:29},{value:"-",paraId:31,tocIndex:29},{value:"Deprecated for style change",paraId:31,tocIndex:29},{value:"@modal-header-border-style",paraId:31,tocIndex:29},{value:"-",paraId:31,tocIndex:29},{value:"Deprecated for style change",paraId:31,tocIndex:29},{value:"@modal-header-title-line-height",paraId:31,tocIndex:29},{value:"titleLineHeight",paraId:31,tocIndex:29},{value:"-",paraId:31,tocIndex:29},{value:"@modal-header-title-font-size",paraId:31,tocIndex:29},{value:"titleFontSize",paraId:31,tocIndex:29},{value:"-",paraId:31,tocIndex:29},{value:"@modal-header-border-color-split",paraId:31,tocIndex:29},{value:"-",paraId:31,tocIndex:29},{value:"Deprecated for style change",paraId:31,tocIndex:29},{value:"@modal-header-close-size",paraId:31,tocIndex:29},{value:"-",paraId:31,tocIndex:29},{value:"Deprecated for style change",paraId:31,tocIndex:29},{value:"@modal-content-bg",paraId:31,tocIndex:29},{value:"contentBg",paraId:31,tocIndex:29},{value:"-",paraId:31,tocIndex:29},{value:"@modal-heading-color",paraId:31,tocIndex:29},{value:"titleColor",paraId:31,tocIndex:29},{value:"-",paraId:31,tocIndex:29},{value:"@modal-close-color",paraId:31,tocIndex:29},{value:"colorIcon",paraId:31,tocIndex:29},{value:"GlobalToken",paraId:31,tocIndex:29},{value:"@modal-footer-bg",paraId:31,tocIndex:29},{value:"footerBg",paraId:31,tocIndex:29},{value:"-",paraId:31,tocIndex:29},{value:"@modal-footer-border-color-split",paraId:31,tocIndex:29},{value:"-",paraId:31,tocIndex:29},{value:"Deprecated for style change",paraId:31,tocIndex:29},{value:"@modal-footer-border-style",paraId:31,tocIndex:29},{value:"-",paraId:31,tocIndex:29},{value:"Deprecated for style change",paraId:31,tocIndex:29},{value:"@modal-footer-padding-vertical",paraId:31,tocIndex:29},{value:"-",paraId:31,tocIndex:29},{value:"Deprecated for style change",paraId:31,tocIndex:29},{value:"@modal-footer-padding-horizontal",paraId:31,tocIndex:29},{value:"-",paraId:31,tocIndex:29},{value:"Deprecated for style change",paraId:31,tocIndex:29},{value:"@modal-footer-border-width",paraId:31,tocIndex:29},{value:"-",paraId:31,tocIndex:29},{value:"Deprecated for style change",paraId:31,tocIndex:29},{value:"@modal-mask-bg",paraId:31,tocIndex:29},{value:"colorBgMask",paraId:31,tocIndex:29},{value:"GlobalToken",paraId:31,tocIndex:29},{value:"@modal-confirm-body-padding",paraId:31,tocIndex:29},{value:"-",paraId:31,tocIndex:29},{value:"Deprecated for style change",paraId:31,tocIndex:29},{value:"@modal-confirm-title-font-size",paraId:31,tocIndex:29},{value:"titleFontSize",paraId:31,tocIndex:29},{value:"-",paraId:31,tocIndex:29},{value:"@modal-border-radius",paraId:31,tocIndex:29},{value:"borderRadiusLG",paraId:31,tocIndex:29},{value:"GlobalToken",paraId:31,tocIndex:29},{value:"Less variables",paraId:32,tocIndex:30},{value:"Component Token",paraId:32,tocIndex:30},{value:"Note",paraId:32,tocIndex:30},{value:"@pagination-item-bg",paraId:32,tocIndex:30},{value:"itemBg",paraId:32,tocIndex:30},{value:"-",paraId:32,tocIndex:30},{value:"@pagination-item-size",paraId:32,tocIndex:30},{value:"itemSize",paraId:32,tocIndex:30},{value:"-",paraId:32,tocIndex:30},{value:"@pagination-item-size-sm",paraId:32,tocIndex:30},{value:"itemSizeSM",paraId:32,tocIndex:30},{value:"-",paraId:32,tocIndex:30},{value:"@pagination-font-family",paraId:32,tocIndex:30},{value:"fontFamily",paraId:32,tocIndex:30},{value:"GlobalToken",paraId:32,tocIndex:30},{value:"@pagination-font-weight-active",paraId:32,tocIndex:30},{value:"fontWeightStrong",paraId:32,tocIndex:30},{value:"GlobalToken",paraId:32,tocIndex:30},{value:"@pagination-item-bg-active",paraId:32,tocIndex:30},{value:"itemActiveBg",paraId:32,tocIndex:30},{value:"-",paraId:32,tocIndex:30},{value:"@pagination-item-link-bg",paraId:32,tocIndex:30},{value:"itemLinkBg",paraId:32,tocIndex:30},{value:"-",paraId:32,tocIndex:30},{value:"@pagination-item-disabled-color-active",paraId:32,tocIndex:30},{value:"itemDisabledColorActive",paraId:32,tocIndex:30},{value:"-",paraId:32,tocIndex:30},{value:"@pagination-item-disabled-bg-active",paraId:32,tocIndex:30},{value:"itemDisabledBgActive",paraId:32,tocIndex:30},{value:"-",paraId:32,tocIndex:30},{value:"@pagination-item-input-bg",paraId:32,tocIndex:30},{value:"itemInputBg",paraId:32,tocIndex:30},{value:"-",paraId:32,tocIndex:30},{value:"@pagination-mini-options-size-changer-top",paraId:32,tocIndex:30},{value:"miniOptionsSizeChangerTop",paraId:32,tocIndex:30},{value:"-",paraId:32,tocIndex:30},{value:"Less variables",paraId:33,tocIndex:31},{value:"Component Token",paraId:33,tocIndex:31},{value:"Note",paraId:33,tocIndex:31},{value:"@popover-bg",paraId:33,tocIndex:31},{value:"colorBgElevated",paraId:33,tocIndex:31},{value:"GlobalToken",paraId:33,tocIndex:31},{value:"@popover-color",paraId:33,tocIndex:31},{value:"colorText",paraId:33,tocIndex:31},{value:"GlobalToken",paraId:33,tocIndex:31},{value:"@popover-min-width",paraId:33,tocIndex:31},{value:"minWidth",paraId:33,tocIndex:31},{value:"-",paraId:33,tocIndex:31},{value:"@popover-min-height",paraId:33,tocIndex:31},{value:"-",paraId:33,tocIndex:31},{value:"Deprecated  for style change",paraId:33,tocIndex:31},{value:"@popover-arrow-width",paraId:33,tocIndex:31},{value:"sizePopupArrow",paraId:33,tocIndex:31},{value:"GlobalToken",paraId:33,tocIndex:31},{value:"@popover-arrow-color",paraId:33,tocIndex:31},{value:"-",paraId:33,tocIndex:31},{value:"Deprecated  for style change",paraId:33,tocIndex:31},{value:"@popover-arrow-outer-color",paraId:33,tocIndex:31},{value:"-",paraId:33,tocIndex:31},{value:"Deprecated  for style change",paraId:33,tocIndex:31},{value:"@popover-distance",paraId:33,tocIndex:31},{value:"marginXXS",paraId:33,tocIndex:31},{value:"Global Token",paraId:33,tocIndex:31},{value:"@popover-padding-horizontal",paraId:33,tocIndex:31},{value:"-",paraId:33,tocIndex:31},{value:"Deprecated for style change",paraId:33,tocIndex:31},{value:"Less variables",paraId:34,tocIndex:32},{value:"Component Token",paraId:34,tocIndex:32},{value:"Note",paraId:34,tocIndex:32},{value:"@progress-default-color",paraId:34,tocIndex:32},{value:"defaultColor",paraId:34,tocIndex:32},{value:"-",paraId:34,tocIndex:32},{value:"@progress-remaining-color",paraId:34,tocIndex:32},{value:"remainingColor",paraId:34,tocIndex:32},{value:"-",paraId:34,tocIndex:32},{value:"@progress-info-text-color",paraId:34,tocIndex:32},{value:"colorText",paraId:34,tocIndex:32},{value:"Global Token",paraId:34,tocIndex:32},{value:"@progress-text-color",paraId:34,tocIndex:32},{value:"circleTextColor",paraId:34,tocIndex:32},{value:"-",paraId:34,tocIndex:32},{value:"@progress-radius",paraId:34,tocIndex:32},{value:"lineBorderRadius",paraId:34,tocIndex:32},{value:"-",paraId:34,tocIndex:32},{value:"@progress-steps-item-bg",paraId:34,tocIndex:32},{value:"remainingColor",paraId:34,tocIndex:32},{value:"-",paraId:34,tocIndex:32},{value:"@progress-text-font-size",paraId:34,tocIndex:32},{value:"fontSizeSM",paraId:34,tocIndex:32},{value:"Global Token",paraId:34,tocIndex:32},{value:"@progress-circle-text-font-size",paraId:34,tocIndex:32},{value:"circleTextFontSize",paraId:34,tocIndex:32},{value:"-",paraId:34,tocIndex:32},{value:"Less variables",paraId:35,tocIndex:33},{value:"Component Token",paraId:35,tocIndex:33},{value:"Note",paraId:35,tocIndex:33},{value:"@radio-size",paraId:35,tocIndex:33},{value:"radioSize",paraId:35,tocIndex:33},{value:"-",paraId:35,tocIndex:33},{value:"@radio-top",paraId:35,tocIndex:33},{value:"-",paraId:35,tocIndex:33},{value:"Deprecated",paraId:35,tocIndex:33},{value:"@radio-border-width",paraId:35,tocIndex:33},{value:"lineWidth",paraId:35,tocIndex:33},{value:"Global Token",paraId:35,tocIndex:33},{value:"@radio-dot-size",paraId:35,tocIndex:33},{value:"dotSize",paraId:35,tocIndex:33},{value:"-",paraId:35,tocIndex:33},{value:"@radio-dot-color",paraId:35,tocIndex:33},{value:"-",paraId:35,tocIndex:33},{value:"Deprecated",paraId:35,tocIndex:33},{value:"@radio-dot-disabled-color",paraId:35,tocIndex:33},{value:"dotColorDisabled",paraId:35,tocIndex:33},{value:"-",paraId:35,tocIndex:33},{value:"@radio-solid-checked-color",paraId:35,tocIndex:33},{value:"buttonSolidCheckedColor",paraId:35,tocIndex:33},{value:"-",paraId:35,tocIndex:33},{value:"@radio-button-bg",paraId:35,tocIndex:33},{value:"buttonBg",paraId:35,tocIndex:33},{value:"-",paraId:35,tocIndex:33},{value:"@radio-button-checked-bg",paraId:35,tocIndex:33},{value:"buttonCheckedBg",paraId:35,tocIndex:33},{value:"-",paraId:35,tocIndex:33},{value:"@radio-button-color",paraId:35,tocIndex:33},{value:"buttonColor",paraId:35,tocIndex:33},{value:"-",paraId:35,tocIndex:33},{value:"@radio-button-hover-color",paraId:35,tocIndex:33},{value:"colorPrimaryHover",paraId:35,tocIndex:33},{value:"Global Token",paraId:35,tocIndex:33},{value:"@radio-button-active-color",paraId:35,tocIndex:33},{value:"colorPrimaryActive",paraId:35,tocIndex:33},{value:"Global Token",paraId:35,tocIndex:33},{value:"@radio-button-padding-horizontal",paraId:35,tocIndex:33},{value:"buttonPaddingInline",paraId:35,tocIndex:33},{value:"-",paraId:35,tocIndex:33},{value:"@radio-disabled-button-checked-bg",paraId:35,tocIndex:33},{value:"buttonCheckdBgDisabled",paraId:35,tocIndex:33},{value:"-",paraId:35,tocIndex:33},{value:"@radio-disabled-button-checked-color",paraId:35,tocIndex:33},{value:"buttonCheckdColorDisabled",paraId:35,tocIndex:33},{value:"-",paraId:35,tocIndex:33},{value:"@radio-wrapper-margin-right",paraId:35,tocIndex:33},{value:"wrapperMarginInlineEnd",paraId:35,tocIndex:33},{value:"-",paraId:35,tocIndex:33},{value:"Less variables",paraId:36,tocIndex:34},{value:"Component Token",paraId:36,tocIndex:34},{value:"Note",paraId:36,tocIndex:34},{value:"@rate-star-color",paraId:36,tocIndex:34},{value:"starColor",paraId:36,tocIndex:34},{value:"-",paraId:36,tocIndex:34},{value:"@rate-star-bg",paraId:36,tocIndex:34},{value:"starBg",paraId:36,tocIndex:34},{value:"-",paraId:36,tocIndex:34},{value:"@rate-star-size",paraId:36,tocIndex:34},{value:"starSize",paraId:36,tocIndex:34},{value:"-",paraId:36,tocIndex:34},{value:"@rate-star-hover-scale",paraId:36,tocIndex:34},{value:"starHoverScale",paraId:36,tocIndex:34},{value:"-",paraId:36,tocIndex:34},{value:"Less variables",paraId:37,tocIndex:35},{value:"Component Token",paraId:37,tocIndex:35},{value:"Note",paraId:37,tocIndex:35},{value:"@result-icon-font-size",paraId:37,tocIndex:35},{value:"iconFontSize",paraId:37,tocIndex:35},{value:"-",paraId:37,tocIndex:35},{value:"@result-title-font-size",paraId:37,tocIndex:35},{value:"titleFontSize",paraId:37,tocIndex:35},{value:"-",paraId:37,tocIndex:35},{value:"@result-subtitle-font-size",paraId:37,tocIndex:35},{value:"subtitleFontSize",paraId:37,tocIndex:35},{value:"-",paraId:37,tocIndex:35},{value:"@result-extra-margin",paraId:37,tocIndex:35},{value:"extraMargin",paraId:37,tocIndex:35},{value:"-",paraId:37,tocIndex:35},{value:"Less variables",paraId:38,tocIndex:36},{value:"Component Token",paraId:38,tocIndex:36},{value:"Note",paraId:38,tocIndex:36},{value:"@segmented-container-padding",paraId:38,tocIndex:36},{value:"padding",paraId:38,tocIndex:36},{value:"-",paraId:38,tocIndex:36},{value:"@segmented-label-color",paraId:38,tocIndex:36},{value:"itemColor",paraId:38,tocIndex:36},{value:"-",paraId:38,tocIndex:36},{value:"@segmented-hover-bg",paraId:38,tocIndex:36},{value:"itemHoverBg",paraId:38,tocIndex:36},{value:"-",paraId:38,tocIndex:36},{value:"@segmented-bg",paraId:38,tocIndex:36},{value:"-",paraId:38,tocIndex:36},{value:"Could be customized with ",paraId:38,tocIndex:36},{value:"className",paraId:38,tocIndex:36},{value:" or ",paraId:38,tocIndex:36},{value:"style",paraId:38,tocIndex:36},{value:"@segmented-label-hover-color",paraId:38,tocIndex:36},{value:"itemHoverColor",paraId:38,tocIndex:36},{value:"-",paraId:38,tocIndex:36},{value:"@segmented-selected-bg",paraId:38,tocIndex:36},{value:"itemSelectedBg",paraId:38,tocIndex:36},{value:"-",paraId:38,tocIndex:36},{value:"Less variables",paraId:39,tocIndex:37},{value:"Component Token",paraId:39,tocIndex:37},{value:"Note",paraId:39,tocIndex:37},{value:"@select-border-color",paraId:39,tocIndex:37},{value:"colorBorder",paraId:39,tocIndex:37},{value:"Global Token",paraId:39,tocIndex:37},{value:"@select-item-selected-color",paraId:39,tocIndex:37},{value:"optionSelectedColor",paraId:39,tocIndex:37},{value:"-",paraId:39,tocIndex:37},{value:"@select-item-selected-font-weight",paraId:39,tocIndex:37},{value:"optionSelectedFontWeight",paraId:39,tocIndex:37},{value:"-",paraId:39,tocIndex:37},{value:"@select-dropdown-bg",paraId:39,tocIndex:37},{value:"colorBgElevated",paraId:39,tocIndex:37},{value:"Global Token",paraId:39,tocIndex:37},{value:"@select-item-selected-bg",paraId:39,tocIndex:37},{value:"optionSelectedBg",paraId:39,tocIndex:37},{value:"-",paraId:39,tocIndex:37},{value:"@select-item-active-bg",paraId:39,tocIndex:37},{value:"optionActiveBg",paraId:39,tocIndex:37},{value:"-",paraId:39,tocIndex:37},{value:"@select-dropdown-vertical-padding",paraId:39,tocIndex:37},{value:"optionPadding",paraId:39,tocIndex:37},{value:"Control the whole padding",paraId:39,tocIndex:37},{value:"@select-dropdown-font-size",paraId:39,tocIndex:37},{value:"optionFontSize",paraId:39,tocIndex:37},{value:"-",paraId:39,tocIndex:37},{value:"@select-dropdown-line-height",paraId:39,tocIndex:37},{value:"optionLineHeight",paraId:39,tocIndex:37},{value:"-",paraId:39,tocIndex:37},{value:"@select-dropdown-height",paraId:39,tocIndex:37},{value:"optionHeight",paraId:39,tocIndex:37},{value:"-",paraId:39,tocIndex:37},{value:"@select-background",paraId:39,tocIndex:37},{value:"selectorBg",paraId:39,tocIndex:37},{value:"-",paraId:39,tocIndex:37},{value:"@select-clear-background",paraId:39,tocIndex:37},{value:"clearBg",paraId:39,tocIndex:37},{value:"-",paraId:39,tocIndex:37},{value:"@select-selection-item-bg",paraId:39,tocIndex:37},{value:"multipleItemBg",paraId:39,tocIndex:37},{value:"-",paraId:39,tocIndex:37},{value:"@select-selection-item-border-color",paraId:39,tocIndex:37},{value:"multipleItemBorderColor",paraId:39,tocIndex:37},{value:"-",paraId:39,tocIndex:37},{value:"@select-single-item-height-lg",paraId:39,tocIndex:37},{value:"singleItemHeightLG",paraId:39,tocIndex:37},{value:"-",paraId:39,tocIndex:37},{value:"@select-multiple-item-height",paraId:39,tocIndex:37},{value:"multipleItemHeight",paraId:39,tocIndex:37},{value:"-",paraId:39,tocIndex:37},{value:"@select-multiple-item-height-lg",paraId:39,tocIndex:37},{value:"multipleItemHeightLG",paraId:39,tocIndex:37},{value:"-",paraId:39,tocIndex:37},{value:"@select-multiple-item-spacing-half",paraId:39,tocIndex:37},{value:"-",paraId:39,tocIndex:37},{value:"Deprecated",paraId:39,tocIndex:37},{value:"@select-multiple-disabled-background",paraId:39,tocIndex:37},{value:"multipleSelectorBgDisabled",paraId:39,tocIndex:37},{value:"-",paraId:39,tocIndex:37},{value:"@select-multiple-item-disabled-color",paraId:39,tocIndex:37},{value:"multipleItemColorDisabled",paraId:39,tocIndex:37},{value:"-",paraId:39,tocIndex:37},{value:"@select-multiple-item-disabled-border-color",paraId:39,tocIndex:37},{value:"multipleItemBorderColorDisabled",paraId:39,tocIndex:37},{value:"-",paraId:39,tocIndex:37},{value:"Less variables",paraId:40,tocIndex:38},{value:"Component Token",paraId:40,tocIndex:38},{value:"Note",paraId:40,tocIndex:38},{value:"@skeleton-block-radius",paraId:40,tocIndex:38},{value:"blockRadius",paraId:40,tocIndex:38},{value:"-",paraId:40,tocIndex:38},{value:"@skeleton-title-height",paraId:40,tocIndex:38},{value:"titleHeight",paraId:40,tocIndex:38},{value:"-",paraId:40,tocIndex:38},{value:"@skeleton-color",paraId:40,tocIndex:38},{value:"gradientFromColor",paraId:40,tocIndex:38},{value:"-",paraId:40,tocIndex:38},{value:"@skeleton-to-color",paraId:40,tocIndex:38},{value:"gradientToColor",paraId:40,tocIndex:38},{value:"-",paraId:40,tocIndex:38},{value:"@skeleton-paragraph-margin-top",paraId:40,tocIndex:38},{value:"paragraphMarginTop",paraId:40,tocIndex:38},{value:"-",paraId:40,tocIndex:38},{value:"@skeleton-paragraph-li-height",paraId:40,tocIndex:38},{value:"paragraphLiHeight",paraId:40,tocIndex:38},{value:"-",paraId:40,tocIndex:38},{value:"@skeleton-paragraph-li-margin-top",paraId:40,tocIndex:38},{value:"-",paraId:40,tocIndex:38},{value:"Deprecated for style change",paraId:40,tocIndex:38},{value:"Less variables",paraId:41,tocIndex:39},{value:"Component Token",paraId:41,tocIndex:39},{value:"Note",paraId:41,tocIndex:39},{value:"@slider-margin",paraId:41,tocIndex:39},{value:"-",paraId:41,tocIndex:39},{value:"Could be customized with ",paraId:41,tocIndex:39},{value:"className",paraId:41,tocIndex:39},{value:" or ",paraId:41,tocIndex:39},{value:"style",paraId:41,tocIndex:39},{value:"@slider-rail-background-color",paraId:41,tocIndex:39},{value:"railBg",paraId:41,tocIndex:39},{value:"-",paraId:41,tocIndex:39},{value:"@slider-rail-background-color-hover",paraId:41,tocIndex:39},{value:"railHoverBg",paraId:41,tocIndex:39},{value:"-",paraId:41,tocIndex:39},{value:"@slider-track-background-color",paraId:41,tocIndex:39},{value:"trackBg",paraId:41,tocIndex:39},{value:"-",paraId:41,tocIndex:39},{value:"@slider-track-background-color-hover",paraId:41,tocIndex:39},{value:"trackHoverBg",paraId:41,tocIndex:39},{value:"-",paraId:41,tocIndex:39},{value:"@slider-handle-border-width",paraId:41,tocIndex:39},{value:"handleLineWidth",paraId:41,tocIndex:39},{value:"-",paraId:41,tocIndex:39},{value:"@slider-handle-background-color",paraId:41,tocIndex:39},{value:"-",paraId:41,tocIndex:39},{value:"Deprecated",paraId:41,tocIndex:39},{value:"@slider-handle-color",paraId:41,tocIndex:39},{value:"handleColor",paraId:41,tocIndex:39},{value:"-",paraId:41,tocIndex:39},{value:"@slider-handle-color-hover",paraId:41,tocIndex:39},{value:"handleActiveColor",paraId:41,tocIndex:39},{value:"-",paraId:41,tocIndex:39},{value:"@slider-handle-color-focus",paraId:41,tocIndex:39},{value:"handleActiveColor",paraId:41,tocIndex:39},{value:"-",paraId:41,tocIndex:39},{value:"@slider-handle-color-focus-shadow",paraId:41,tocIndex:39},{value:"- Deprecated",paraId:41,tocIndex:39},{value:"@slider-handle-color-tooltip-open",paraId:41,tocIndex:39},{value:"handleActiveColor",paraId:41,tocIndex:39},{value:"-",paraId:41,tocIndex:39},{value:"@slider-handle-size",paraId:41,tocIndex:39},{value:"handleSize",paraId:41,tocIndex:39},{value:"-",paraId:41,tocIndex:39},{value:"@slider-handle-margin-top",paraId:41,tocIndex:39},{value:"-",paraId:41,tocIndex:39},{value:"Deprecated",paraId:41,tocIndex:39},{value:"@slider-handle-margin-left",paraId:41,tocIndex:39},{value:"-",paraId:41,tocIndex:39},{value:"Deprecated",paraId:41,tocIndex:39},{value:"@slider-handle-shadow",paraId:41,tocIndex:39},{value:"-",paraId:41,tocIndex:39},{value:"Deprecated",paraId:41,tocIndex:39},{value:"@slider-dot-border-color",paraId:41,tocIndex:39},{value:"dotBorderColor",paraId:41,tocIndex:39},{value:"-",paraId:41,tocIndex:39},{value:"@slider-dot-border-color-active",paraId:41,tocIndex:39},{value:"dotActiveBorderColor",paraId:41,tocIndex:39},{value:"-",paraId:41,tocIndex:39},{value:"@slider-disabled-color",paraId:41,tocIndex:39},{value:"trackBgDisabled",paraId:41,tocIndex:39},{value:"-",paraId:41,tocIndex:39},{value:"@slider-disabled-background-color",paraId:41,tocIndex:39},{value:"-",paraId:41,tocIndex:39},{value:"Deprecated",paraId:41,tocIndex:39},{value:"Less variables",paraId:42,tocIndex:40},{value:"Component Token",paraId:42,tocIndex:40},{value:"Note",paraId:42,tocIndex:40},{value:"@spin-dot-size-sm",paraId:42,tocIndex:40},{value:"dotSizeSM",paraId:42,tocIndex:40},{value:"-",paraId:42,tocIndex:40},{value:"@spin-dot-size",paraId:42,tocIndex:40},{value:"dotSize",paraId:42,tocIndex:40},{value:"-",paraId:42,tocIndex:40},{value:"@spin-dot-size-lg",paraId:42,tocIndex:40},{value:"dotSizeLG",paraId:42,tocIndex:40},{value:"-",paraId:42,tocIndex:40},{value:"Less variables",paraId:43,tocIndex:41},{value:"Component Token",paraId:43,tocIndex:41},{value:"Note",paraId:43,tocIndex:41},{value:"@statistic-title-font-size",paraId:43,tocIndex:41},{value:"titleFontSize",paraId:43,tocIndex:41},{value:"-",paraId:43,tocIndex:41},{value:"@statistic-content-font-size",paraId:43,tocIndex:41},{value:"contentFontSize",paraId:43,tocIndex:41},{value:"-",paraId:43,tocIndex:41},{value:"@statistic-font-family",paraId:43,tocIndex:41},{value:"fontFamily",paraId:43,tocIndex:41},{value:"GlobalToken",paraId:43,tocIndex:41},{value:"Less variables",paraId:44,tocIndex:42},{value:"Component Token",paraId:44,tocIndex:42},{value:"Note",paraId:44,tocIndex:42},{value:"@process-tail-color",paraId:44,tocIndex:42},{value:"colorSplit",paraId:44,tocIndex:42},{value:"GlobalToken",paraId:44,tocIndex:42},{value:"@steps-nav-arrow-color",paraId:44,tocIndex:42},{value:"navArrowColor",paraId:44,tocIndex:42},{value:"-",paraId:44,tocIndex:42},{value:"@steps-background",paraId:44,tocIndex:42},{value:"colorBgContainer",paraId:44,tocIndex:42},{value:"-",paraId:44,tocIndex:42},{value:"@steps-icon-size",paraId:44,tocIndex:42},{value:"iconSize",paraId:44,tocIndex:42},{value:"-",paraId:44,tocIndex:42},{value:"@steps-icon-custom-size",paraId:44,tocIndex:42},{value:"customIconSize",paraId:44,tocIndex:42},{value:"-",paraId:44,tocIndex:42},{value:"@steps-icon-custom-top",paraId:44,tocIndex:42},{value:"customIconTop",paraId:44,tocIndex:42},{value:"-",paraId:44,tocIndex:42},{value:"@steps-icon-custom-font-size",paraId:44,tocIndex:42},{value:"customIconFontSize",paraId:44,tocIndex:42},{value:"-",paraId:44,tocIndex:42},{value:"@steps-icon-top",paraId:44,tocIndex:42},{value:"iconTop",paraId:44,tocIndex:42},{value:"-",paraId:44,tocIndex:42},{value:"@steps-icon-font-size",paraId:44,tocIndex:42},{value:"iconFontSize",paraId:44,tocIndex:42},{value:"-",paraId:44,tocIndex:42},{value:"@steps-icon-margin",paraId:44,tocIndex:42},{value:"-",paraId:44,tocIndex:42},{value:"Deprecated",paraId:44,tocIndex:42},{value:"@steps-title-line-height",paraId:44,tocIndex:42},{value:"titleLineHeight",paraId:44,tocIndex:42},{value:"-",paraId:44,tocIndex:42},{value:"@steps-small-icon-size",paraId:44,tocIndex:42},{value:"iconSizeSM",paraId:44,tocIndex:42},{value:"-",paraId:44,tocIndex:42},{value:"@steps-small-icon-margin",paraId:44,tocIndex:42},{value:"-",paraId:44,tocIndex:42},{value:"Deprecated",paraId:44,tocIndex:42},{value:"@steps-dot-size",paraId:44,tocIndex:42},{value:"dotSize",paraId:44,tocIndex:42},{value:"-",paraId:44,tocIndex:42},{value:"@steps-dot-top",paraId:44,tocIndex:42},{value:"-",paraId:44,tocIndex:42},{value:"Deprecated",paraId:44,tocIndex:42},{value:"@steps-current-dot-size",paraId:44,tocIndex:42},{value:"dotCurrentSize",paraId:44,tocIndex:42},{value:"-",paraId:44,tocIndex:42},{value:"@steps-description-max-width",paraId:44,tocIndex:42},{value:"descriptionMaxWidth",paraId:44,tocIndex:42},{value:"-",paraId:44,tocIndex:42},{value:"@steps-nav-content-max-width",paraId:44,tocIndex:42},{value:"stepsNavContentMaxWidth",paraId:44,tocIndex:42},{value:"-",paraId:44,tocIndex:42},{value:"@steps-vertical-icon-width",paraId:44,tocIndex:42},{value:"iconSize",paraId:44,tocIndex:42},{value:"-",paraId:44,tocIndex:42},{value:"@steps-vertical-tail-width",paraId:44,tocIndex:42},{value:"-",paraId:44,tocIndex:42},{value:"Deprecated",paraId:44,tocIndex:42},{value:"@steps-vertical-tail-width-sm",paraId:44,tocIndex:42},{value:"-",paraId:44,tocIndex:42},{value:"Deprecated",paraId:44,tocIndex:42},{value:"Less variables",paraId:45,tocIndex:43},{value:"Component Token",paraId:45,tocIndex:43},{value:"Note",paraId:45,tocIndex:43},{value:"@switch-height",paraId:45,tocIndex:43},{value:"trackHeight",paraId:45,tocIndex:43},{value:"-",paraId:45,tocIndex:43},{value:"@switch-sm-height",paraId:45,tocIndex:43},{value:"trackHeightSM",paraId:45,tocIndex:43},{value:"-",paraId:45,tocIndex:43},{value:"@switch-min-width",paraId:45,tocIndex:43},{value:"trackMinWidth",paraId:45,tocIndex:43},{value:"-",paraId:45,tocIndex:43},{value:"@switch-sm-min-width",paraId:45,tocIndex:43},{value:"trackMinWidthSM",paraId:45,tocIndex:43},{value:"-",paraId:45,tocIndex:43},{value:"@switch-disabled-opacity",paraId:45,tocIndex:43},{value:"opacityLoading",paraId:45,tocIndex:43},{value:"Global Token",paraId:45,tocIndex:43},{value:"@switch-color",paraId:45,tocIndex:43},{value:"colorPrimary",paraId:45,tocIndex:43},{value:"Global Token",paraId:45,tocIndex:43},{value:"@switch-bg",paraId:45,tocIndex:43},{value:"handleBg",paraId:45,tocIndex:43},{value:"-",paraId:45,tocIndex:43},{value:"@switch-shadow-color",paraId:45,tocIndex:43},{value:"handleShadow",paraId:45,tocIndex:43},{value:"Control ",paraId:45,tocIndex:43},{value:"box-shadow",paraId:45,tocIndex:43},{value:", not only shadow color",paraId:45,tocIndex:43},{value:"@switch-padding",paraId:45,tocIndex:43},{value:"trackPadding",paraId:45,tocIndex:43},{value:"-",paraId:45,tocIndex:43},{value:"@switch-inner-margin-min",paraId:45,tocIndex:43},{value:"innerMinMargin",paraId:45,tocIndex:43},{value:"-",paraId:45,tocIndex:43},{value:"@switch-inner-margin-max",paraId:45,tocIndex:43},{value:"innerMaxMargin",paraId:45,tocIndex:43},{value:"-",paraId:45,tocIndex:43},{value:"@switch-sm-inner-margin-min",paraId:45,tocIndex:43},{value:"innerMinMarginSM",paraId:45,tocIndex:43},{value:"-",paraId:45,tocIndex:43},{value:"@switch-sm-inner-margin-max",paraId:45,tocIndex:43},{value:"innerMaxMarginSM",paraId:45,tocIndex:43},{value:"-",paraId:45,tocIndex:43},{value:"Less variables",paraId:46,tocIndex:44},{value:"Component Token",paraId:46,tocIndex:44},{value:"Note",paraId:46,tocIndex:44},{value:"@table-bg",paraId:46,tocIndex:44},{value:"colorBgContainer",paraId:46,tocIndex:44},{value:"Global Token",paraId:46,tocIndex:44},{value:"@table-header-bg",paraId:46,tocIndex:44},{value:"headerBg",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-header-color",paraId:46,tocIndex:44},{value:"headerColor",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-header-sort-bg",paraId:46,tocIndex:44},{value:"headerSortActiveBg",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-body-sort-bg",paraId:46,tocIndex:44},{value:"bodySortActiveBg",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-row-hover-bg",paraId:46,tocIndex:44},{value:"rowHoverBg",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-selected-row-color",paraId:46,tocIndex:44},{value:"colorText",paraId:46,tocIndex:44},{value:"Global Token",paraId:46,tocIndex:44},{value:"@table-selected-row-bg",paraId:46,tocIndex:44},{value:"rowSelectedBg",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-body-selected-sort-bg",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"Deprecated, same as ",paraId:46,tocIndex:44},{value:"rowSelectedBg",paraId:46,tocIndex:44},{value:"@table-selected-row-hover-bg",paraId:46,tocIndex:44},{value:"rowSelectedHoverBg",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-expanded-row-bg",paraId:46,tocIndex:44},{value:"rowExpandedBg",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-padding-vertical",paraId:46,tocIndex:44},{value:"cellPaddingBlock",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-padding-horizontal",paraId:46,tocIndex:44},{value:"cellPaddingInline",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-padding-vertical-md",paraId:46,tocIndex:44},{value:"cellPaddingBlockMD",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-padding-horizontal-md",paraId:46,tocIndex:44},{value:"cellPaddingInlineMD",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-padding-vertical-sm",paraId:46,tocIndex:44},{value:"cellPaddingBlockSM",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-padding-horizontal-sm",paraId:46,tocIndex:44},{value:"cellPaddingInlineSM",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-border-color",paraId:46,tocIndex:44},{value:"borderColor",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-border-radius-base",paraId:46,tocIndex:44},{value:"headerBorderRadius",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-footer-bg",paraId:46,tocIndex:44},{value:"footerBg",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-footer-color",paraId:46,tocIndex:44},{value:"footerColor",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-header-bg-sm",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"Deprecated, same as ",paraId:46,tocIndex:44},{value:"headerBg",paraId:46,tocIndex:44},{value:"@table-font-size",paraId:46,tocIndex:44},{value:"cellFontSize",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-font-size-md",paraId:46,tocIndex:44},{value:"cellFontSizeMD",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-font-size-sm",paraId:46,tocIndex:44},{value:"cellFontSizeSM",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-header-cell-split-color",paraId:46,tocIndex:44},{value:"headerSplitColor",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-header-sort-active-bg",paraId:46,tocIndex:44},{value:"headerSortHoverBg",paraId:46,tocIndex:44},{value:"Misused in v4, and used as hover bg actually",paraId:46,tocIndex:44},{value:"@table-fixed-header-sort-active-bg",paraId:46,tocIndex:44},{value:"fixedHeaderSortActiveBg",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-header-filter-active-bg",paraId:46,tocIndex:44},{value:"headerFilterHoverBg",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-filter-btns-bg",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"Deprecated, same as ",paraId:46,tocIndex:44},{value:"filterDropdownBg",paraId:46,tocIndex:44},{value:"@table-filter-dropdown-bg",paraId:46,tocIndex:44},{value:"filterDropdownBg",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-expand-icon-bg",paraId:46,tocIndex:44},{value:"expandIconBg",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-selection-column-width",paraId:46,tocIndex:44},{value:"selectionColumnWidth",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-sticky-scroll-bar-bg",paraId:46,tocIndex:44},{value:"stickyScrollBarBg",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"@table-sticky-scroll-bar-radius",paraId:46,tocIndex:44},{value:"stickyScrollBarBorderRadius",paraId:46,tocIndex:44},{value:"-",paraId:46,tocIndex:44},{value:"Less variables",paraId:47,tocIndex:45},{value:"Component Token",paraId:47,tocIndex:45},{value:"Note",paraId:47,tocIndex:45},{value:"@tabs-card-head-background",paraId:47,tocIndex:45},{value:"cardBg",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-card-height",paraId:47,tocIndex:45},{value:"cardHeight",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-card-active-color",paraId:47,tocIndex:45},{value:"itemSelectedColor",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-card-horizontal-padding",paraId:47,tocIndex:45},{value:"cardPadding",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-card-horizontal-padding-sm",paraId:47,tocIndex:45},{value:"cardPaddingSM",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-card-horizontal-padding-lg",paraId:47,tocIndex:45},{value:"cardPaddingLG",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-title-font-size",paraId:47,tocIndex:45},{value:"titleFontSize",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-title-font-size-lg",paraId:47,tocIndex:45},{value:"titleFontSizeLG",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-title-font-size-sm",paraId:47,tocIndex:45},{value:"titleFontSizeSM",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-ink-bar-color",paraId:47,tocIndex:45},{value:"inkBarColor",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-bar-margin",paraId:47,tocIndex:45},{value:"horizontalMargin",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-horizontal-gutter",paraId:47,tocIndex:45},{value:"horizontalItemGutter",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-horizontal-margin",paraId:47,tocIndex:45},{value:"horizontalItemMargin",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-horizontal-margin-rtl",paraId:47,tocIndex:45},{value:"horizontalItemMarginRTL",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-horizontal-padding",paraId:47,tocIndex:45},{value:"horizontalItemPadding",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-horizontal-padding-lg",paraId:47,tocIndex:45},{value:"horizontalItemPaddingLG",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-horizontal-padding-sm",paraId:47,tocIndex:45},{value:"horizontalItemPaddingSM",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-vertical-padding",paraId:47,tocIndex:45},{value:"verticalItemPadding",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-vertical-margin",paraId:47,tocIndex:45},{value:"verticalItemMargin",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-scrolling-size",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"Deprecated",paraId:47,tocIndex:45},{value:"@tabs-highlight-color",paraId:47,tocIndex:45},{value:"itemSelectedColor",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-hover-color",paraId:47,tocIndex:45},{value:"itemHoverColor",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-active-color",paraId:47,tocIndex:45},{value:"itemActiveColor",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-card-gutter",paraId:47,tocIndex:45},{value:"cardGutter",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"@tabs-card-tab-active-border-top",paraId:47,tocIndex:45},{value:"-",paraId:47,tocIndex:45},{value:"Deprecated",paraId:47,tocIndex:45},{value:"Less variables",paraId:48,tocIndex:46},{value:"Component Token",paraId:48,tocIndex:46},{value:"Note",paraId:48,tocIndex:46},{value:"@tag-border-radius",paraId:48,tocIndex:46},{value:"borderRadiusSM",paraId:48,tocIndex:46},{value:"Global Token",paraId:48,tocIndex:46},{value:"@tag-default-bg",paraId:48,tocIndex:46},{value:"defaultBg",paraId:48,tocIndex:46},{value:"-",paraId:48,tocIndex:46},{value:"@tag-default-color",paraId:48,tocIndex:46},{value:"defaultColor",paraId:48,tocIndex:46},{value:"-",paraId:48,tocIndex:46},{value:"@tag-font-size",paraId:48,tocIndex:46},{value:"fontSizeSM",paraId:48,tocIndex:46},{value:"Global Token",paraId:48,tocIndex:46},{value:"@tag-line-height",paraId:48,tocIndex:46},{value:"lineHeightSM",paraId:48,tocIndex:46},{value:"Global Token",paraId:48,tocIndex:46},{value:"Less variables",paraId:49,tocIndex:47},{value:"Component Token",paraId:49,tocIndex:47},{value:"Note",paraId:49,tocIndex:47},{value:"@timeline-width",paraId:49,tocIndex:47},{value:"tailWidth",paraId:49,tocIndex:47},{value:"tailWidth",paraId:49,tocIndex:47},{value:"  is a number without units, ",paraId:49,tocIndex:47},{value:"@timeline-width",paraId:49,tocIndex:47},{value:" with units",paraId:49,tocIndex:47},{value:"@timeline-color",paraId:49,tocIndex:47},{value:"tailColor",paraId:49,tocIndex:47},{value:"-",paraId:49,tocIndex:47},{value:"@timeline-dot-border-width",paraId:49,tocIndex:47},{value:"dotBorderWidth",paraId:49,tocIndex:47},{value:"-",paraId:49,tocIndex:47},{value:"@timeline-dot-color",paraId:49,tocIndex:47},{value:"-",paraId:49,tocIndex:47},{value:"Deprecated",paraId:49,tocIndex:47},{value:"@timeline-dot-bg",paraId:49,tocIndex:47},{value:"dotBg",paraId:49,tocIndex:47},{value:"-",paraId:49,tocIndex:47},{value:"@timeline-item-padding-bottom",paraId:49,tocIndex:47},{value:"itemPaddingBottom",paraId:49,tocIndex:47},{value:"-",paraId:49,tocIndex:47},{value:"Less variables",paraId:50,tocIndex:48},{value:"Component Token",paraId:50,tocIndex:48},{value:"Note",paraId:50,tocIndex:48},{value:"@tooltip-max-width",paraId:50,tocIndex:48},{value:"-",paraId:50,tocIndex:48},{value:"Can be directly modified by ",paraId:50,tocIndex:48},{value:"className",paraId:50,tocIndex:48},{value:" or ",paraId:50,tocIndex:48},{value:"style",paraId:50,tocIndex:48},{value:"@tooltip-color",paraId:50,tocIndex:48},{value:"colorTextLightSolid",paraId:50,tocIndex:48},{value:"Global Token",paraId:50,tocIndex:48},{value:"@tooltip-bg",paraId:50,tocIndex:48},{value:"colorBgSpotlight",paraId:50,tocIndex:48},{value:"Global Token",paraId:50,tocIndex:48},{value:"@tooltip-arrow-width",paraId:50,tocIndex:48},{value:"sizePopupArrow",paraId:50,tocIndex:48},{value:"Global Token",paraId:50,tocIndex:48},{value:"@tooltip-distance",paraId:50,tocIndex:48},{value:"marginXXS",paraId:50,tocIndex:48},{value:"Global Token",paraId:50,tocIndex:48},{value:"@tooltip-arrow-color",paraId:50,tocIndex:48},{value:"-",paraId:50,tocIndex:48},{value:"same as ",paraId:50,tocIndex:48},{value:"@tooltip-bg",paraId:50,tocIndex:48},{value:", Deprecated",paraId:50,tocIndex:48},{value:"@tooltip-border-radius",paraId:50,tocIndex:48},{value:"borderRadius",paraId:50,tocIndex:48},{value:"Global Token",paraId:50,tocIndex:48},{value:"Less variables",paraId:51,tocIndex:49},{value:"Component Token",paraId:51,tocIndex:49},{value:"Note",paraId:51,tocIndex:49},{value:"@transfer-header-height",paraId:51,tocIndex:49},{value:"headerHeight",paraId:51,tocIndex:49},{value:"-",paraId:51,tocIndex:49},{value:"@transfer-item-height",paraId:51,tocIndex:49},{value:"itemHeight",paraId:51,tocIndex:49},{value:"-",paraId:51,tocIndex:49},{value:"@transfer-disabled-bg",paraId:51,tocIndex:49},{value:"colorBgContainerDisabled",paraId:51,tocIndex:49},{value:"Global Token",paraId:51,tocIndex:49},{value:"@transfer-list-height",paraId:51,tocIndex:49},{value:"listHeight",paraId:51,tocIndex:49},{value:"-",paraId:51,tocIndex:49},{value:"@transfer-item-hover-bg",paraId:51,tocIndex:49},{value:"controlItemBgHover",paraId:51,tocIndex:49},{value:"Global Token",paraId:51,tocIndex:49},{value:"@transfer-item-selected-hover-bg",paraId:51,tocIndex:49},{value:"controlItemBgActiveHover",paraId:51,tocIndex:49},{value:"Global Token",paraId:51,tocIndex:49},{value:"@transfer-item-padding-vertical",paraId:51,tocIndex:49},{value:"itemPaddingBlock",paraId:51,tocIndex:49},{value:"-",paraId:51,tocIndex:49},{value:"@transfer-list-search-icon-top",paraId:51,tocIndex:49},{value:"-",paraId:51,tocIndex:49},{value:"Deprecated",paraId:51,tocIndex:49},{value:"Less variables",paraId:52,tocIndex:50},{value:"Component Token",paraId:52,tocIndex:50},{value:"Note",paraId:52,tocIndex:50},{value:"@tree-bg",paraId:52,tocIndex:50},{value:"colorBgContainer",paraId:52,tocIndex:50},{value:"Global Token",paraId:52,tocIndex:50},{value:"@tree-title-height",paraId:52,tocIndex:50},{value:"titleHeight",paraId:52,tocIndex:50},{value:"-",paraId:52,tocIndex:50},{value:"@tree-child-padding",paraId:52,tocIndex:50},{value:"-",paraId:52,tocIndex:50},{value:"Deprecated",paraId:52,tocIndex:50},{value:"@tree-directory-selected-color",paraId:52,tocIndex:50},{value:"directoryNodeSelectedColor",paraId:52,tocIndex:50},{value:"-",paraId:52,tocIndex:50},{value:"@tree-directory-selected-bg",paraId:52,tocIndex:50},{value:"directoryNodeSelectedBg",paraId:52,tocIndex:50},{value:"-",paraId:52,tocIndex:50},{value:"@tree-node-hover-bg",paraId:52,tocIndex:50},{value:"nodeHoverBg",paraId:52,tocIndex:50},{value:"-",paraId:52,tocIndex:50},{value:"@tree-node-selected-bg",paraId:52,tocIndex:50},{value:"nodeSelectedBg",paraId:52,tocIndex:50},{value:"-",paraId:52,tocIndex:50},{value:"Less variables",paraId:53,tocIndex:51},{value:"Component Token",paraId:53,tocIndex:51},{value:"Note",paraId:53,tocIndex:51},{value:"@typography-title-font-weight",paraId:53,tocIndex:51},{value:"fontWeightStrong",paraId:53,tocIndex:51},{value:"Global Token",paraId:53,tocIndex:51},{value:"@typography-title-margin-top",paraId:53,tocIndex:51},{value:"titleMarginTop",paraId:53,tocIndex:51},{value:"-",paraId:53,tocIndex:51},{value:"@typography-title-margin-bottom",paraId:53,tocIndex:51},{value:"titleMarginBottom",paraId:53,tocIndex:51},{value:"-",paraId:53,tocIndex:51},{value:"Less variables",paraId:54,tocIndex:52},{value:"Component Token",paraId:54,tocIndex:52},{value:"Note",paraId:54,tocIndex:52},{value:"@upload-actions-color",paraId:54,tocIndex:52},{value:"actionsColor",paraId:54,tocIndex:52},{value:"-",paraId:54,tocIndex:52}]},771303:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"This document will help you upgrade from antd ",paraId:0},{value:"4.x",paraId:0},{value:" version to antd ",paraId:0},{value:"5.x",paraId:0},{value:" version. If you are using ",paraId:0},{value:"3.x",paraId:0},{value:" or older version, please refer to the previous ",paraId:0},{value:"upgrade document",paraId:0},{value:" to 4.x.",paraId:0},{value:"Please upgrade to the latest version of 4.x first, and remove / modify related APIs according to the console warning message.",paraId:1,tocIndex:0},{value:"Basic rounded corner adjustment, changed from ",paraId:2,tocIndex:2},{value:"2px",paraId:2,tocIndex:2},{value:" to four layers of radius, which are ",paraId:2,tocIndex:2},{value:"2px",paraId:2,tocIndex:2},{value:" ",paraId:2,tocIndex:2},{value:"4px",paraId:2,tocIndex:2},{value:" ",paraId:2,tocIndex:2},{value:"6px",paraId:2,tocIndex:2},{value:" and ",paraId:2,tocIndex:2},{value:"8px",paraId:2,tocIndex:2},{value:". For example, radius of default Button is modified from ",paraId:2,tocIndex:2},{value:"2px",paraId:2,tocIndex:2},{value:" to ",paraId:2,tocIndex:2},{value:"6px",paraId:2,tocIndex:2},{value:".",paraId:2,tocIndex:2},{value:"Primary color adjustment, changed from ",paraId:2,tocIndex:2},{value:"#1890ff",paraId:2,tocIndex:2},{value:" to ",paraId:2,tocIndex:2},{value:"#1677ff",paraId:2,tocIndex:2},{value:".",paraId:2,tocIndex:2},{value:"Global shadow optimization, adjusted from three layers of shadows to two layers, which are used in common components (Card .e.g) and popup components (Dropdown .e.g).",paraId:2,tocIndex:2},{value:"Overall reduction in wireframe usage.",paraId:2,tocIndex:2},{value:"Remove less, adopt CSS-in-JS, for better support of dynamic themes. The bottom layer uses ",paraId:3,tocIndex:3},{value:"@ant-design/cssinjs",paraId:3,tocIndex:3},{value:" as a solution.",paraId:3,tocIndex:3},{value:"All less files are removed, and less variables are no longer exported.",paraId:4,tocIndex:3},{value:"Css files are no longer included in package. Since CSS-in-JS supports importing on demand, the original ",paraId:4,tocIndex:3},{value:"antd/dist/antd.css",paraId:4,tocIndex:3},{value:" has also been abandoned. If you need to reset some basic styles, please import ",paraId:4,tocIndex:3},{value:"antd/dist/reset.css",paraId:4,tocIndex:3},{value:".",paraId:4,tocIndex:3},{value:"If you need to reset the style of the component, but you don't want to introduce ",paraId:4,tocIndex:3},{value:"antd/dist/reset.css",paraId:4,tocIndex:3},{value:" to pollute the global style, You can try using the ",paraId:4,tocIndex:3},{value:"App",paraId:5,tocIndex:3},{value:" in the outermost layer to solve the problem that native elements do not have antd specification style.",paraId:4,tocIndex:3},{value:"Remove css variables and dynamic theme built on top of them.",paraId:6,tocIndex:3},{value:"LocaleProvider has been deprecated in 4.x (use ",paraId:7,tocIndex:3},{value:"<ConfigProvider locale />",paraId:7,tocIndex:3},{value:" instead), we removed the related folder ",paraId:7,tocIndex:3},{value:"antd/es/locale-provider",paraId:7,tocIndex:3},{value:" and ",paraId:7,tocIndex:3},{value:"antd/lib/locale-provider",paraId:7,tocIndex:3},{value:" in 5.x.",paraId:7,tocIndex:3},{value:"Replace built-in Moment.js with Dayjs. For more: ",paraId:8,tocIndex:3},{value:"Use custom date library",paraId:9,tocIndex:3},{value:".",paraId:8,tocIndex:3},{value:"babel-plugin-import",paraId:10,tocIndex:3},{value:" is no longer supported. CSS-in-JS itself has the ability to import on demand, and plugin support is no longer required. Umi users can remove related configurations.",paraId:10,tocIndex:3},{value:`// config/config.ts
export default {
  antd: {
-   import: true,
  },
};
`,paraId:11,tocIndex:3},{value:"DO NOT support IE browser anymore.",paraId:12,tocIndex:4},{value:"The classname API of the component popup box is unified to ",paraId:13,tocIndex:5},{value:"popupClassName",paraId:13,tocIndex:5},{value:", and ",paraId:13,tocIndex:5},{value:"dropdownClassName",paraId:13,tocIndex:5},{value:" and other similar APIs will be replaced.",paraId:13,tocIndex:5},{value:"AutoComplete",paraId:14,tocIndex:5},{value:"Cascader",paraId:14,tocIndex:5},{value:"Select",paraId:14,tocIndex:5},{value:"TreeSelect",paraId:14,tocIndex:5},{value:"TimePicker",paraId:14,tocIndex:5},{value:"DatePicker",paraId:14,tocIndex:5},{value:"Mentions",paraId:14,tocIndex:5},{value:`  import { Select } from 'antd';

  const App: React.FC = () => (
    <Select
-     dropdownClassName="my-select-popup"
+     popupClassName="my-select-popup"
    />
  );

  export default App;
`,paraId:15,tocIndex:5},{value:"The controlled visible API of the component popup is unified to ",paraId:16,tocIndex:5},{value:"open",paraId:16,tocIndex:5},{value:", and ",paraId:16,tocIndex:5},{value:"visible",paraId:16,tocIndex:5},{value:" and other similar APIs will be replaced.",paraId:16,tocIndex:5},{value:"Drawer ",paraId:17,tocIndex:5},{value:"visible",paraId:17,tocIndex:5},{value:" changed to ",paraId:17,tocIndex:5},{value:"open",paraId:17,tocIndex:5},{value:".",paraId:17,tocIndex:5},{value:"Modal ",paraId:17,tocIndex:5},{value:"visible",paraId:17,tocIndex:5},{value:" changed to ",paraId:17,tocIndex:5},{value:"open",paraId:17,tocIndex:5},{value:".",paraId:17,tocIndex:5},{value:"Dropdown ",paraId:17,tocIndex:5},{value:"visible",paraId:17,tocIndex:5},{value:" changed to ",paraId:17,tocIndex:5},{value:"open",paraId:17,tocIndex:5},{value:".",paraId:17,tocIndex:5},{value:"Tooltip ",paraId:17,tocIndex:5},{value:"visible",paraId:17,tocIndex:5},{value:" changed to ",paraId:17,tocIndex:5},{value:"open",paraId:17,tocIndex:5},{value:".",paraId:17,tocIndex:5},{value:"Tag ",paraId:17,tocIndex:5},{value:"visible",paraId:17,tocIndex:5},{value:" is removed.",paraId:17,tocIndex:5},{value:"Slider ",paraId:17,tocIndex:5},{value:"tooltip",paraId:17,tocIndex:5},{value:" related API converged to ",paraId:17,tocIndex:5},{value:"tooltip",paraId:17,tocIndex:5},{value:" property.",paraId:17,tocIndex:5},{value:"Table ",paraId:17,tocIndex:5},{value:"filterDropdownVisible",paraId:17,tocIndex:5},{value:" changed to ",paraId:17,tocIndex:5},{value:"filterDropdownOpen",paraId:17,tocIndex:5},{value:".",paraId:17,tocIndex:5},{value:`  import { Modal, Tag, Table, Slider } from 'antd';

  const App: React.FC = () => {
    const [visible, setVisible] = useState(true);

    return (
      <>
-       <Modal visible={visible}>content</Modal>
+       <Modal open={visible}>content</Modal>

-       <Tag visible={visible}>tag</Tag>
+       {visible && <Tag>tag</Tag>}

        <Table
          data={[]}
          columns={[
            {
              title: 'Name',
              dataIndex: 'name',
-             filterDropdownVisible: visible,
+             filterDropdownOpen: visible,
            }
          ]}
        />

-       <Slider tooltipVisible={visible} />
+       <Slider tooltip={{ open: visible }} />
      </>
    );
  }

  export default App;
`,paraId:18,tocIndex:5},{value:"getPopupContainer",paraId:19,tocIndex:5},{value:": All ",paraId:19,tocIndex:5},{value:"getPopupContainer",paraId:19,tocIndex:5},{value:" are guaranteed to return a unique div. This method will be called repeatedly under React 18 concurrent mode.",paraId:19,tocIndex:5},{value:"Upload List structure changes. ",paraId:20,tocIndex:5},{value:"#34528",paraId:20,tocIndex:5},{value:"Notification",paraId:21,tocIndex:5},{value:"Static methods are no longer allowed to dynamically set ",paraId:22,tocIndex:5},{value:"prefixCls",paraId:22,tocIndex:5},{value:" ",paraId:22,tocIndex:5},{value:"maxCount",paraId:22,tocIndex:5},{value:" ",paraId:22,tocIndex:5},{value:"top",paraId:22,tocIndex:5},{value:" ",paraId:22,tocIndex:5},{value:"bottom",paraId:22,tocIndex:5},{value:" ",paraId:22,tocIndex:5},{value:"getContainer",paraId:22,tocIndex:5},{value:" in ",paraId:22,tocIndex:5},{value:"open",paraId:22,tocIndex:5},{value:", Notification static methods will now have only one instance. If you need a different configuration, use ",paraId:22,tocIndex:5},{value:"useNotification",paraId:22,tocIndex:5},{value:".",paraId:22,tocIndex:5},{value:"close",paraId:22,tocIndex:5},{value:" was renamed to ",paraId:22,tocIndex:5},{value:"destroy",paraId:22,tocIndex:5},{value:" to be consistent with message.",paraId:22,tocIndex:5},{value:"Drawer ",paraId:23,tocIndex:5},{value:"style",paraId:23,tocIndex:5},{value:" & ",paraId:23,tocIndex:5},{value:"className",paraId:23,tocIndex:5},{value:" are migrated to Drawer panel node, the original properties are replaced by ",paraId:23,tocIndex:5},{value:"rootClassName",paraId:23,tocIndex:5},{value:" and ",paraId:23,tocIndex:5},{value:"rootStyle",paraId:23,tocIndex:5},{value:".",paraId:23,tocIndex:5},{value:"The deprecated ",paraId:24,tocIndex:5},{value:"message.warn",paraId:24,tocIndex:5},{value:" in 4.x is now completely removed, please use ",paraId:24,tocIndex:5},{value:"message.warning",paraId:24,tocIndex:5},{value:" instead.",paraId:24,tocIndex:5},{value:"Remove ",paraId:25,tocIndex:6},{value:"locale-provider",paraId:25,tocIndex:6},{value:" Directory. ",paraId:25,tocIndex:6},{value:"LocaleProvider",paraId:25,tocIndex:6},{value:" was removed in v4, please use ",paraId:25,tocIndex:6},{value:"ConfigProvider",paraId:25,tocIndex:6},{value:" instead.",paraId:25,tocIndex:6},{value:"Move Comment component into ",paraId:26,tocIndex:6},{value:"@ant-design/compatible",paraId:26,tocIndex:6},{value:".",paraId:26,tocIndex:6},{value:"Move PageHeader component into ",paraId:27,tocIndex:6},{value:"@ant-design/pro-components",paraId:27,tocIndex:6},{value:".",paraId:27,tocIndex:6},{value:`- import { PageHeader, Comment } from 'antd';
+ import { Comment } from '@ant-design/compatible';
+ import { PageHeader } from '@ant-design/pro-layout';

  const App: React.FC = () => (
    <>
      <PageHeader />
      <Comment />
    </>
  );

  export default App;
`,paraId:28,tocIndex:6},{value:"BackTop is deprecated in ",paraId:29,tocIndex:6},{value:"5.0.0",paraId:29,tocIndex:6},{value:", and is merged into FloatButton.",paraId:29,tocIndex:6},{value:`- import { BackTop } from 'antd';
+ import { FloatButton } from 'antd';

  const App: React.FC = () => (
    <div>
-     <BackTop />
+     <FloatButton.BackTop />
    </div>
  );

  export default App;
`,paraId:30,tocIndex:6},{value:"Use git to save your code and install latest version:",paraId:31,tocIndex:7},{value:`npm install --save antd@5.x
`,paraId:32,tocIndex:7},{value:"If you want to use v4 deprecated component like ",paraId:33,tocIndex:7},{value:"Comment",paraId:33,tocIndex:7},{value:" or ",paraId:33,tocIndex:7},{value:"PageHeader",paraId:33,tocIndex:7},{value:". You can install ",paraId:33,tocIndex:7},{value:"@ant-design/compatible",paraId:33,tocIndex:7},{value:" and ",paraId:33,tocIndex:7},{value:"@ant-design/pro-layout",paraId:33,tocIndex:7},{value:" for compatible:",paraId:33,tocIndex:7},{value:`npm install --save @ant-design/compatible@v5-compatible-v4
npm install --save @ant-design/pro-layout
`,paraId:34,tocIndex:7},{value:"You can manually check the code one by one against the above list for modification. In addition, we also provide a codemod cli tool ",paraId:35,tocIndex:7},{value:"@ant-design/codemod-v5",paraId:35,tocIndex:7},{value:" To help you quickly upgrade to v5.",paraId:35,tocIndex:7},{value:"Before running codemod cli, please submit your local code changes.",paraId:36,tocIndex:7},{value:`# Run directly through npx
npx -p @ant-design/codemod-v5 antd5-codemod src

# Or run directly through pnpm
pnpm --package=@ant-design/codemod-v5 dlx antd5-codemod src
`,paraId:37,tocIndex:7},{value:`
  `,paraId:38},{value:`
  `,paraId:38},{value:"Note that codemod cannot cover all scenarios, and it is recommended to check for incompatible changes one by one.",paraId:39,tocIndex:7},{value:"If you using antd less variables, you can use compatible package to covert it into v4 less variables and use less-loader to inject them:",paraId:40,tocIndex:8},{value:`const { theme } = require('antd/lib');
const { convertLegacyToken, defaultTheme } = require('@ant-design/compatible/lib');

const { defaultAlgorithm, defaultSeed } = theme;

const mapV5Token = defaultAlgorithm(defaultSeed);
const v5Vars = convertLegacyToken(mapV5Token);
const mapV4Token = theme.getDesignToken(defaultTheme);
const v4Vars = convertLegacyToken(mapV4Token);

// Webpack Config
module.exports = {
  // ... other config
  loader: 'less-loader',
  options: {
    lessOptions: {
      modifyVars: v5Vars, // or v4Vars
    },
  },
};
`,paraId:41,tocIndex:8},{value:"And then remove antd less reference in your less file:",paraId:42,tocIndex:8},{value:`// Your less file
--  @import (reference) '~antd/es/style/themes/index';
or
--  @import '~antd/es/style/some-other-less-file-ref';
`,paraId:43,tocIndex:8},{value:"Remove ",paraId:44,tocIndex:9},{value:"babel-plugin-import",paraId:44,tocIndex:9},{value:" from package.json and modify ",paraId:44,tocIndex:9},{value:".babelrc",paraId:44,tocIndex:9},{value:":",paraId:44,tocIndex:9},{value:`"plugins": [
- ["import", { "libraryName": "antd", "libraryDirectory": "lib"}, "antd"],
]
`,paraId:45,tocIndex:9},{value:"Umi user can disable by config\uFF1A",paraId:46,tocIndex:9},{value:`// config/config.ts or .umirc
export default {
  antd: {
-   import: true,
+   import: false,
  },
};
`,paraId:47,tocIndex:9},{value:"Replace moment.js locale with day.js locale:",paraId:48,tocIndex:10},{value:`-   import moment from 'moment';
+   import dayjs from 'dayjs';
-   import 'moment/locale/zh-cn';
+   import 'dayjs/locale/zh-cn';

-   moment.locale('zh-cn');
+   dayjs.locale('zh-cn');
`,paraId:49,tocIndex:10},{value:"If you do not want to replace with day.js, you can use ",paraId:50,tocIndex:10},{value:"@ant-design/moment-webpack-plugin",paraId:50,tocIndex:10},{value:" to keep moment.js:",paraId:50,tocIndex:10},{value:`npm install --save-dev @ant-design/moment-webpack-plugin
`,paraId:51,tocIndex:10},{value:`// webpack-config.js
import AntdMomentWebpackPlugin from '@ant-design/moment-webpack-plugin';

module.exports = {
  // ...
  plugins: [new AntdMomentWebpackPlugin()],
};
`,paraId:52,tocIndex:10},{value:"If you don't want the style to change after upgrade, we have provided a v4 theme in ",paraId:53,tocIndex:11},{value:"@ant-design/compatible",paraId:53,tocIndex:11},{value:" that can restore v4 style.",paraId:53,tocIndex:11},{value:`
\`\`\`sandpack
const sandpackConfig = {
  dependencies: {
    '@ant-design/compatible': 'v5-compatible-v4',
  },
};

import {
  defaultTheme,   // Default theme
  darkTheme,      // Dark theme
} from '@ant-design/compatible';
import { ConfigProvider, Button, Radio, Space } from 'antd';

export default () => (
  <ConfigProvider theme={defaultTheme}>
    <Space direction="vertical">
      <Button type="primary">Button</Button>
      <Radio.Group>
        <Radio value={1}>A</Radio>
        <Radio value={2}>B</Radio>
        <Radio value={3}>C</Radio>
        <Radio value={4}>D</Radio>
      </Radio.Group>
    </Space>
  </ConfigProvider>
);
`,paraId:54,tocIndex:11},{value:"Ant Design v5 using ",paraId:55,tocIndex:12},{value:":where",paraId:55,tocIndex:12},{value:" css selector to reduce CSS-in-JS hash priority. You can use ",paraId:55,tocIndex:12},{value:"@ant-design/cssinjs",paraId:55,tocIndex:12},{value:" ",paraId:55,tocIndex:12},{value:"StyleProvider",paraId:55,tocIndex:12},{value:" to cancel this function. Please ref ",paraId:55,tocIndex:12},{value:"Compatible adjustment",paraId:56,tocIndex:12},{value:".",paraId:55,tocIndex:12},{value:"We do not recommend multiple versions coexist, it will make the application more complex (such as style override, ConfigProvider not reused, etc.). It's better to use micro-applications such as ",paraId:57,tocIndex:13},{value:"qiankun",paraId:57,tocIndex:13},{value:" for page level development.",paraId:57,tocIndex:13},{value:`$ npm install --save antd-v5@npm:antd@5
# or
$ yarn add antd-v5@npm:antd@5
# or
$ pnpm add antd-v5@npm:antd@5
`,paraId:58,tocIndex:14},{value:"The package.json will be:",paraId:59,tocIndex:14},{value:`{
  "antd": "4.x",
  "antd-v5": "npm:antd@5"
}
`,paraId:60,tocIndex:14},{value:"Now, antd in your project is still v4, and antd-v5 is v5.",paraId:61,tocIndex:14},{value:`import React from 'react';
import { Button as Button4 } from 'antd'; // v4
import { Button as Button5 } from 'antd-v5'; // v5

export default () => (
  <>
    <Button4 />
    <Button5 />
  </>
);
`,paraId:62,tocIndex:14},{value:"Then config ",paraId:63,tocIndex:14},{value:"prefixCls",paraId:63,tocIndex:14},{value:" of ConfigProvider to avoid style conflict:",paraId:63,tocIndex:14},{value:`import React from 'react';
import { ConfigProvider as ConfigProvider5 } from 'antd-v5';

export default () => (
  <ConfigProvider5 prefixCls="ant5">
    <MyApp />
  </ConfigProvider5>
);
`,paraId:64,tocIndex:14},{value:"If you encounter problems during the upgrade, please go to ",paraId:65,tocIndex:15},{value:"GitHub issues",paraId:65,tocIndex:15},{value:" for feedback. We will respond and improve this document as soon as possible.",paraId:65,tocIndex:15}]},393499:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"antd",paraId:0},{value:" is built to implement ",paraId:0},{value:"a set of high-quality React UI components",paraId:1},{value:" which follow Ant Design specification. It is impossible to include all useful components in one package, so we also recommend that using other great third-party libraries in React community.",paraId:0},{value:"Category",paraId:2},{value:"Recommended Components",paraId:2},{value:"Visualization and charts",paraId:2},{value:"Ant Design Charts",paraId:2},{value:" ",paraId:2},{value:"AntV Data Visualization",paraId:2},{value:" ",paraId:2},{value:"reactflow",paraId:2},{value:"React Hooks Library",paraId:2},{value:"ahooks",paraId:2},{value:"React Form Library",paraId:2},{value:"ProForm",paraId:2},{value:" ",paraId:2},{value:"Formily",paraId:2},{value:" ",paraId:2},{value:"react-hook-form",paraId:2},{value:" ",paraId:2},{value:"formik",paraId:2},{value:"Router",paraId:2},{value:"react-router",paraId:2},{value:"Layout",paraId:2},{value:"react-grid-layout",paraId:2},{value:" ",paraId:2},{value:"react-grid-system",paraId:2},{value:" ",paraId:2},{value:"rc-dock",paraId:2},{value:"Drag and drop",paraId:2},{value:"dnd-kit",paraId:2},{value:" ",paraId:2},{value:"react-beautiful-dnd",paraId:2},{value:" ",paraId:2},{value:"react-dnd",paraId:2},{value:"Code Editor",paraId:2},{value:"react-codemirror2",paraId:2},{value:" ",paraId:2},{value:"react-monaco-editor",paraId:2},{value:"Rich Text Editor",paraId:2},{value:"react-quill",paraId:2},{value:"JSON Viewer",paraId:2},{value:"react-json-view",paraId:2},{value:"Color Picker",paraId:2},{value:"react-colorful",paraId:2},{value:" ",paraId:2},{value:"react-color",paraId:2},{value:"Media Query",paraId:2},{value:"react-responsive",paraId:2},{value:"Copy to clipboard",paraId:2},{value:"react-copy-to-clipboard",paraId:2},{value:"Document head manager",paraId:2},{value:"react-helmet-async",paraId:2},{value:"Icons",paraId:2},{value:"react-fontawesome",paraId:2},{value:" ",paraId:2},{value:"react-icons",paraId:2},{value:"QR Code",paraId:2},{value:"qrcode.react",paraId:2},{value:"Top Progress Bar",paraId:2},{value:"react-nprogress",paraId:2},{value:"i18n",paraId:2},{value:"FormatJS",paraId:2},{value:" ",paraId:2},{value:"react-i18next",paraId:2},{value:"Code highlight",paraId:2},{value:"react-syntax-highlighter",paraId:2},{value:"Markdown renderer",paraId:2},{value:"react-markdown",paraId:2},{value:"Infinite Scroll",paraId:2},{value:"rc-virtual-list",paraId:2},{value:" ",paraId:2},{value:"react-infinite-scroll-component",paraId:2},{value:"Map",paraId:2},{value:"google-map-react",paraId:2},{value:" ",paraId:2},{value:"@uiw/react-amap",paraId:2},{value:"Video",paraId:2},{value:"react-player",paraId:2},{value:" ",paraId:2},{value:"video-react",paraId:2},{value:" ",paraId:2},{value:"video.js",paraId:2},{value:"Context Menu",paraId:2},{value:"react-contexify",paraId:2},{value:"Emoji",paraId:2},{value:"emoji-mart",paraId:2},{value:" ",paraId:2},{value:"react-resizable-panels",paraId:2},{value:"Split View",paraId:2},{value:"react-split-pane",paraId:2},{value:"Image Crop",paraId:2},{value:"antd-img-crop",paraId:2},{value:" ",paraId:2},{value:"react-image-crop",paraId:2},{value:"Keywords highlight",paraId:2},{value:"react-highlight-words",paraId:2},{value:"Text Loop",paraId:2},{value:"react-text-loop-next",paraId:2},{value:" ",paraId:2},{value:"react-fast-marquee",paraId:2},{value:"Animation",paraId:2},{value:"framer-motion",paraId:2},{value:" ",paraId:2},{value:"Ant Motion",paraId:2},{value:" ",paraId:2},{value:"react-spring",paraId:2},{value:"Page Footer",paraId:2},{value:"rc-footer",paraId:2},{value:"Number/Currency",paraId:2},{value:"react-countup",paraId:2},{value:" ",paraId:2},{value:"react-number-format",paraId:2},{value:" ",paraId:2},{value:"react-currency-input-field",paraId:2},{value:"Application Frameworks",paraId:2},{value:"umi",paraId:2},{value:" ",paraId:2},{value:"remix",paraId:2},{value:" ",paraId:2},{value:"refine",paraId:2},{value:"Flow-based UI",paraId:2},{value:"pro-flow",paraId:2},{value:" ",paraId:2},{value:"react-flow",paraId:2},{value:" ",paraId:2},{value:"x6",paraId:2},{value:"Phone Input",paraId:2},{value:"react-phone-number-input",paraId:2},{value:" ",paraId:2},{value:"antd-phone-input",paraId:2},{value:"AI Chat",paraId:2},{value:"pro-chat",paraId:2},{value:"There are some products to recommend for developer/designer/product manager.",paraId:3,tocIndex:0},{value:"Category",paraId:4,tocIndex:0},{value:"Recommended Products",paraId:4,tocIndex:0},{value:"Documentation",paraId:4,tocIndex:0},{value:"\u{1F426} Yuque",paraId:4,tocIndex:0},{value:"Icon",paraId:4,tocIndex:0},{value:"Iconfont",paraId:4,tocIndex:0},{value:"Sketch plugin",paraId:4,tocIndex:0},{value:"Kitchen",paraId:4,tocIndex:0},{value:"Online Playground",paraId:4,tocIndex:0},{value:"codesandbox",paraId:4,tocIndex:0},{value:" ",paraId:4,tocIndex:0},{value:"codepen",paraId:4,tocIndex:0},{value:"Image Compressor",paraId:4,tocIndex:0},{value:"tinypng",paraId:4,tocIndex:0}]},411870:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"There are two options for server-side rendering styles, each with advantages and disadvantages:",paraId:0},{value:"Inline mode",paraId:1},{value:": there is no need to request additional style files during rendering. The advantage is to reduce additional network requests. The disadvantage is that the HTML volume will increase and the speed of the first screen rendering will be affected. Relevant discussion: ",paraId:1},{value:"#39891",paraId:1},{value:"Whole export",paraId:1},{value:": The antd component is pre-baked and styled as a css file to be introduced in the page. The advantage is that when opening any page, the same set of css files will be reused just like the traditional css scheme to hit the cache. The disadvantage is that if there are multiple themes in the page, additional baking is required",paraId:1},{value:"Use ",paraId:2,tocIndex:0},{value:"@ant-design/cssinjs",paraId:2,tocIndex:0},{value:" to extract style:",paraId:2,tocIndex:0},{value:`import React from 'react';
import { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';
import type Entity from '@ant-design/cssinjs/es/Cache';
import { renderToString } from 'react-dom/server';

const App = () => {
  // SSR Render
  const cache = React.useMemo<Entity>(() => createCache(), []);
  const html = renderToString(
    <StyleProvider cache={cache}>
      <MyApp />
    </StyleProvider>,
  );

  // Grab style from cache
  const styleText = extractStyle(cache);

  // Mix with style
  return \`
    <!DOCTYPE html>
    <html>
      <head>
        \${styleText}
      </head>
      <body>
        <div id="root">\${html}</div>
      </body>
    </html>
  \`;
};

export default App;
`,paraId:3,tocIndex:0},{value:"If you want to detach a style file into a css file, try the following schemes:",paraId:4,tocIndex:1},{value:"Installation dependency",paraId:5,tocIndex:1},{value:`npm install ts-node tslib cross-env --save-dev
`,paraId:6,tocIndex:1},{value:"Add ",paraId:7,tocIndex:1},{value:"tsconfig.node.json",paraId:7,tocIndex:1},{value:`{
  "compilerOptions": {
    "strictNullChecks": true,
    "module": "NodeNext",
    "jsx": "react",
    "esModuleInterop": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"]
}
`,paraId:8,tocIndex:1},{value:"Add ",paraId:9,tocIndex:1},{value:"scripts/genAntdCss.tsx",paraId:9,tocIndex:1},{value:`// scripts/genAntdCss.tsx
import fs from 'fs';
import { extractStyle } from '@ant-design/static-style-extract';

const outputPath = './public/antd.min.css';

const css = extractStyle();

fs.writeFileSync(outputPath, css);
`,paraId:10,tocIndex:1},{value:"If you want to use mixed themes or custom themes, you can use the following script:",paraId:11,tocIndex:1},{value:`import fs from 'fs';
import React from 'react';
import { extractStyle } from '@ant-design/static-style-extract';
import { ConfigProvider } from 'antd';

const outputPath = './public/antd.min.css';

const testGreenColor = '#008000';
const testRedColor = '#ff0000';

const css = extractStyle((node) => (
  <>
    <ConfigProvider
      theme={{
        token: {
          colorBgBase: testGreenColor,
        },
      }}
    >
      {node}
    </ConfigProvider>
    <ConfigProvider
      theme={{
        token: {
          colorPrimary: testGreenColor,
        },
      }}
    >
      <ConfigProvider
        theme={{
          token: {
            colorBgBase: testRedColor,
          },
        }}
      >
        {node}
      </ConfigProvider>
    </ConfigProvider>
  </>
));

fs.writeFileSync(outputPath, css);
`,paraId:12,tocIndex:1},{value:"You can choose to execute this script before starting the development command or before compiling. Running this script will generate a full antd.min.css file directly in the specified directory of the current project (e.g. public).",paraId:13,tocIndex:1},{value:"Take Next.js for example\uFF08",paraId:14,tocIndex:1},{value:"example",paraId:14,tocIndex:1},{value:"\uFF09\uFF1A",paraId:14,tocIndex:1},{value:`// package.json
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "predev": "ts-node --project ./tsconfig.node.json ./scripts/genAntdCss.tsx",
    "prebuild": "cross-env NODE_ENV=production ts-node --project ./tsconfig.node.json ./scripts/genAntdCss.tsx"
  }
}
`,paraId:15,tocIndex:1},{value:"Then, you just need to import this file into the ",paraId:16,tocIndex:1},{value:"pages/_app.tsx",paraId:16,tocIndex:1},{value:" file:",paraId:16,tocIndex:1},{value:`import { StyleProvider } from '@ant-design/cssinjs';
import type { AppProps } from 'next/app';

import '../public/antd.min.css'; // add this line
import '../styles/globals.css';

export default function App({ Component, pageProps }: AppProps) {
  return (
    <StyleProvider hashPriority="high">
      <Component {...pageProps} />
    </StyleProvider>
  );
}
`,paraId:17,tocIndex:1},{value:"If you're using a custom theme for your project, try baking in the following ways:",paraId:18,tocIndex:2},{value:`import { extractStyle } from '@ant-design/static-style-extract';
import { ConfigProvider } from 'antd';

const cssText = extractStyle((node) => (
  <ConfigProvider
    theme={{
      token: {
        colorPrimary: 'red',
      },
    }}
  >
    {node}
  </ConfigProvider>
));
`,paraId:19,tocIndex:2},{value:"If you're using a mixed theme for your project, try baking in the following ways:",paraId:20,tocIndex:3},{value:`import { extractStyle } from '@ant-design/static-style-extract';
import { ConfigProvider } from 'antd';

const cssText = extractStyle((node) => (
  <>
    <ConfigProvider
      theme={{
        token: {
          colorBgBase: 'green ',
        },
      }}
    >
      {node}
    </ConfigProvider>
    <ConfigProvider
      theme={{
        token: {
          colorPrimary: 'blue',
        },
      }}
    >
      <ConfigProvider
        theme={{
          token: {
            colorBgBase: 'red ',
          },
        }}
      >
        {node}
      </ConfigProvider>
    </ConfigProvider>
  </>
));
`,paraId:21,tocIndex:3},{value:"More about static-style-extract, see ",paraId:22,tocIndex:3},{value:"static-style-extract",paraId:22,tocIndex:3},{value:".",paraId:22,tocIndex:3},{value:`// scripts/genAntdCss.tsx
import { createHash } from 'crypto';
import fs from 'fs';
import path from 'path';
import { extractStyle } from '@ant-design/cssinjs';
import type Entity from '@ant-design/cssinjs/lib/Cache';

export type DoExtraStyleOptions = {
  cache: Entity;
  dir?: string;
  baseFileName?: string;
};
export function doExtraStyle({
  cache,
  dir = 'antd-output',
  baseFileName = 'antd.min',
}: DoExtraStyleOptions) {
  const baseDir = path.resolve(__dirname, '../../static/css');

  const outputCssPath = path.join(baseDir, dir);

  if (!fs.existsSync(outputCssPath)) {
    fs.mkdirSync(outputCssPath, { recursive: true });
  }

  const css = extractStyle(cache, true);
  if (!css) return '';

  const md5 = createHash('md5');
  const hash = md5.update(css).digest('hex');
  const fileName = \`\${baseFileName}.\${hash.substring(0, 8)}.css\`;
  const fullpath = path.join(outputCssPath, fileName);

  const res = \`_next/static/css/\${dir}/\${fileName}\`;

  if (fs.existsSync(fullpath)) return res;

  fs.writeFileSync(fullpath, css);

  return res;
}
`,paraId:23,tocIndex:4},{value:"Export on demand using the above tools in ",paraId:24,tocIndex:4},{value:"_document.tsx",paraId:24,tocIndex:4},{value:`// _document.tsx
import { createCache, StyleProvider } from '@ant-design/cssinjs';
import type { DocumentContext } from 'next/document';
import Document, { Head, Html, Main, NextScript } from 'next/document';

import { doExtraStyle } from '../scripts/genAntdCss';

export default class MyDocument extends Document {
  static async getInitialProps(ctx: DocumentContext) {
    const cache = createCache();
    let fileName = '';
    const originalRenderPage = ctx.renderPage;
    ctx.renderPage = () =>
      originalRenderPage({
        enhanceApp: (App) => (props) => (
          <StyleProvider cache={cache}>
            <App {...props} />
          </StyleProvider>
        ),
      });

    const initialProps = await Document.getInitialProps(ctx);
    // 1.1 extract style which had been used
    fileName = doExtraStyle({
      cache,
    });
    return {
      ...initialProps,
      styles: (
        <>
          {initialProps.styles}
          {/* 1.2 inject css */}
          {fileName && <link rel="stylesheet" href={\`/\${fileName}\`} />}
        </>
      ),
    };
  }

  render() {
    return (
      <Html lang="en">
        <Head />
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}
`,paraId:25,tocIndex:4},{value:"See the demo\uFF1A",paraId:26,tocIndex:4},{value:"Export the css files on demand demo",paraId:26,tocIndex:4}]},412987:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"By default, Ant Design uses ",paraId:0},{value:"Day.js",paraId:0},{value:" to handle time and date. Day.js is an immutable date-time library alternative to Moment.js with the same API.",paraId:0},{value:"You might want to use another date library (",paraId:1},{value:"Ant design currently supports ",paraId:1},{value:"moment",paraId:1},{value:", ",paraId:1},{value:"date-fns",paraId:1},{value:", and ",paraId:1},{value:"luxon",paraId:1},{value:"). We provide two ways to customize:",paraId:1},{value:"The first way is to use ",paraId:2,tocIndex:0},{value:"generatePicker",paraId:2,tocIndex:0},{value:" (or ",paraId:2,tocIndex:0},{value:"generateCalendar",paraId:2,tocIndex:0},{value:") to help create Picker components.",paraId:2,tocIndex:0},{value:"First, we initialize an antd demo with ",paraId:3,tocIndex:0},{value:"create-react-app",paraId:3,tocIndex:0},{value:". You can refer to ",paraId:3,tocIndex:0},{value:"Usage with create-react-app",paraId:4,tocIndex:0},{value:", or you can start directly here ",paraId:3,tocIndex:0},{value:"init antd",paraId:3,tocIndex:0},{value:"Create ",paraId:5,tocIndex:1},{value:"src/components/DatePicker.tsx",paraId:5,tocIndex:1},{value:".",paraId:5,tocIndex:1},{value:"For example:",paraId:6,tocIndex:1},{value:`import { DatePicker } from 'antd';
import type { Moment } from 'moment';
import momentGenerateConfig from 'rc-picker/lib/generate/moment';

const MyDatePicker = DatePicker.generatePicker<Moment>(momentGenerateConfig);

export default MyDatePicker;
`,paraId:7,tocIndex:1},{value:"Create ",paraId:8,tocIndex:2},{value:"src/components/TimePicker.tsx",paraId:8,tocIndex:2},{value:".",paraId:8,tocIndex:2},{value:"For example:",paraId:9,tocIndex:2},{value:`import * as React from 'react';
import type { PickerTimeProps } from 'antd/es/date-picker/generatePicker';
import type { Moment } from 'moment';

import DatePicker from './DatePicker';

export interface TimePickerProps extends Omit<PickerTimeProps<Moment>, 'picker'> {}

const TimePicker = React.forwardRef<any, TimePickerProps>((props, ref) => (
  <DatePicker {...props} picker="time" mode={undefined} ref={ref} />
));

TimePicker.displayName = 'TimePicker';

export default TimePicker;
`,paraId:10,tocIndex:2},{value:"Create ",paraId:11,tocIndex:3},{value:"src/components/Calendar.tsx",paraId:11,tocIndex:3},{value:".",paraId:11,tocIndex:3},{value:"For example:",paraId:12,tocIndex:3},{value:`import { Calendar } from 'antd';
import type { Moment } from 'moment';
import momentGenerateConfig from 'rc-picker/es/generate/moment';

const MyCalendar = Calendar.generateCalendar<Moment>(momentGenerateConfig);

export default MyCalendar;
`,paraId:13,tocIndex:3},{value:"Create ",paraId:14,tocIndex:4},{value:"src/components/index.tsx",paraId:14,tocIndex:4},{value:".",paraId:14,tocIndex:4},{value:"For example:",paraId:15,tocIndex:4},{value:`export { default as Calendar } from './Calendar';
export { default as DatePicker } from './DatePicker';
export { default as TimePicker } from './TimePicker';
`,paraId:16,tocIndex:4},{value:"Modify ",paraId:17,tocIndex:5},{value:"src/App.tsx",paraId:17,tocIndex:5},{value:",import ",paraId:17,tocIndex:5},{value:"moment",paraId:17,tocIndex:5},{value:" and custom component.",paraId:17,tocIndex:5},{value:`- import { DatePicker, Calendar } from 'antd';
- import format from 'dayjs';

+ import { DatePicker, TimePicker, Calendar } from './components';
+ import format from 'moment';
`,paraId:18,tocIndex:5},{value:"We also provide another implementation, which we provide with ",paraId:19,tocIndex:6},{value:"@ant-design/moment-webpack-plugin",paraId:19,tocIndex:6},{value:", replacing ",paraId:19,tocIndex:6},{value:"Day.js",paraId:19,tocIndex:6},{value:" with ",paraId:19,tocIndex:6},{value:"moment",paraId:19,tocIndex:6},{value:" directly without changing a line of existing code. More info can be found at ",paraId:19,tocIndex:6},{value:"@ant-design/moment-webpack-plugin",paraId:19,tocIndex:6},{value:".",paraId:19,tocIndex:6},{value:`// webpack-config.js
const AntdMomentWebpackPlugin = require('@ant-design/moment-webpack-plugin');

module.exports = {
  // ...
  plugins: [new AntdMomentWebpackPlugin()],
};
`,paraId:20,tocIndex:6},{value:"date-fns",paraId:21,tocIndex:7},{value:" currently supports custom component methods similar to ",paraId:21,tocIndex:7},{value:"dayjs",paraId:21,tocIndex:7},{value:". The difference is that the parameter types used are different. Support is provided in antd 4.5.0 and above.",paraId:21,tocIndex:7},{value:"For Example:",paraId:22,tocIndex:7},{value:"Create ",paraId:23,tocIndex:8},{value:"src/components/DatePicker.tsx",paraId:23,tocIndex:8},{value:".",paraId:23,tocIndex:8},{value:"Code as follows:",paraId:24,tocIndex:8},{value:`import { DatePicker } from 'antd';
import dateFnsGenerateConfig from 'rc-picker/lib/generate/dateFns';

const MyDatePicker = DatePicker.generatePicker<Date>(dateFnsGenerateConfig);

export default MyDatePicker;
`,paraId:25,tocIndex:8},{value:"Since ",paraId:26,tocIndex:9},{value:"antd 5.4.0",paraId:26,tocIndex:9},{value:", ",paraId:26,tocIndex:9},{value:"luxon",paraId:26,tocIndex:9},{value:" can be used instead of ",paraId:26,tocIndex:9},{value:"dayjs",paraId:26,tocIndex:9},{value:" and supports the same functionality, but it does introduce some differences in behavior that we will explain below.",paraId:26,tocIndex:9},{value:"Create a ",paraId:27,tocIndex:10},{value:"src/components/DatePicker.tsx",paraId:27,tocIndex:10},{value:" file, and implement the luxon based picker as follows:",paraId:27,tocIndex:10},{value:`import { DatePicker } from 'antd';
import type { DateTime } from 'luxon';
import luxonGenerateConfig from 'rc-picker/lib/generate/luxon';

const MyDatePicker = DatePicker.generatePicker<DateTime>(luxonGenerateConfig);

export default MyDatePicker;
`,paraId:28,tocIndex:10},{value:"luxon users should be familiar with the fact that it does not come with a custom implementation for localization. Instead, it relies on the browser's native ",paraId:29,tocIndex:11},{value:"Intl API",paraId:29,tocIndex:11},{value:".",paraId:29,tocIndex:11},{value:"This introduces some formatting differences with the other date libraries. As of today, the main differences are:",paraId:30,tocIndex:11},{value:"First day of the week is always Monday regardless of locale.",paraId:31,tocIndex:11},{value:"Week of year number is sometimes different (ISO week rules are used to determine it).",paraId:31,tocIndex:11},{value:"Short week days format will sometimes be different for custom locales (it might have 3 characters instead of 2).",paraId:31,tocIndex:11},{value:'Selected week label format will be slightly different (e.g. "2021-01" instead of "2021-1st").',paraId:31,tocIndex:11},{value:"It is possible to customize these default luxon behaviors by adjusting the luxon config:",paraId:32,tocIndex:11},{value:`import { DatePicker } from 'antd';
import type { DateTime } from 'luxon';
import luxonGenerateConfig from 'rc-picker/lib/generate/luxon';

const customLuxonConfig = {
  ...luxonGenerateConfig,
  getWeekFirstDay(locale) {
    // Your custom implementation goes here
  },
};

const MyDatePicker = DatePicker.generatePicker<DateTime>(customLuxonConfig);

export default MyDatePicker;
`,paraId:33,tocIndex:11},{value:"Note that by doing such customization, the resulting DatePicker behavior might be altered in unexpected ways, so make sure you are testing for edge cases.",paraId:34,tocIndex:11}]},881721:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"create-react-app",paraId:0},{value:" is one of the best React application development tools, This article will try to use ",paraId:0},{value:"create-react-app",paraId:0},{value:" to create a ",paraId:0},{value:"TypeScript",paraId:0},{value:" project, and introduce antd.",paraId:0},{value:"We build ",paraId:1},{value:"antd",paraId:1},{value:" based on latest stable version of TypeScript (",paraId:1},{value:">=5.0.0",paraId:1},{value:"), please make sure your project dependency matches it.",paraId:1},{value:"Before all start, you may need install ",paraId:2,tocIndex:0},{value:"yarn",paraId:2,tocIndex:0},{value:" or ",paraId:2,tocIndex:0},{value:"pnpm",paraId:2,tocIndex:0},{value:".",paraId:2,tocIndex:0},{value:"The tool will create and initialize environment and dependencies automatically, please try config your proxy setting or use another npm registry if any network errors happen during it.",paraId:3},{value:"Then we go inside project and start it.",paraId:4},{value:`$ cd antd-demo
$ npm run start
`,paraId:5},{value:"Open the browser at ",paraId:6},{value:"http://localhost:3000/",paraId:6},{value:". It renders a header saying ",paraId:6},{value:"Welcome to React",paraId:6},{value:" on the page.",paraId:6},{value:"Below is the default directory structure.",paraId:7,tocIndex:1},{value:`\u251C\u2500\u2500 README.md
\u251C\u2500\u2500 package.json
\u251C\u2500\u2500 public
\u2502\xA0\xA0 \u251C\u2500\u2500 favicon.ico
\u2502\xA0\xA0 \u2514\u2500\u2500 index.html
\u251C\u2500\u2500 src
\u2502\xA0\xA0 \u251C\u2500\u2500 App.css
\u2502\xA0\xA0 \u251C\u2500\u2500 App.js
\u2502\xA0\xA0 \u251C\u2500\u2500 App.test.js
\u2502\xA0\xA0 \u251C\u2500\u2500 index.css
\u2502\xA0\xA0 \u251C\u2500\u2500 index.js
\u2502\xA0\xA0 \u2514\u2500\u2500 logo.svg
\u2514\u2500\u2500 yarn.lock
`,paraId:8,tocIndex:1},{value:"Now we install ",paraId:9,tocIndex:1},{value:"antd",paraId:9,tocIndex:1},{value:" from yarn or npm or pnpm.",paraId:9,tocIndex:1},{value:"Modify ",paraId:10},{value:"src/App.js",paraId:10},{value:", import Button component from ",paraId:10},{value:"antd",paraId:10},{value:".",paraId:10},{value:`import { Button } from 'antd';
import React from 'react';

const App: React.FC = () => (
  <div className="App">
    <Button type="primary">Button</Button>
  </div>
);

export default App;
`,paraId:11},{value:"OK, you should now see a blue primary button displayed on the page. Next you can choose any components of ",paraId:12},{value:"antd",paraId:12},{value:" to develop your application. Visit other workflows of ",paraId:12},{value:"create-react-app",paraId:12},{value:" at its ",paraId:12},{value:"User Guide",paraId:12},{value:".",paraId:12},{value:"Ref to the ",paraId:13,tocIndex:2},{value:"Customize Theme documentation",paraId:14,tocIndex:2},{value:". Modify theme with ConfigProvider:",paraId:13,tocIndex:2},{value:`import { ConfigProvider } from 'antd';
import React from 'react';

const App: React.FC = () => (
  <ConfigProvider theme={{ token: { colorPrimary: '#00b96b' } }}>
    <MyApp />
  </ConfigProvider>
);

export default App;
`,paraId:15,tocIndex:2},{value:"antd",paraId:16,tocIndex:2},{value:" is written in TypeScript with complete definitions, try out and enjoy the property suggestion and typing check.",paraId:16,tocIndex:2},{value:"Don't install ",paraId:17,tocIndex:2},{value:"@types/antd",paraId:17,tocIndex:2},{value:".",paraId:17,tocIndex:2},{value:"We are successfully running antd components now, go build your own application!",paraId:18,tocIndex:2}]},782874:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Next.js",paraId:0},{value:" is currently the most popular React server-side isomorphic framework in the world. This article will try to use ",paraId:0},{value:"antd",paraId:0},{value:" components in projects created by Next.js.",paraId:0},{value:"Before all start, you may need install ",paraId:1,tocIndex:0},{value:"yarn",paraId:1,tocIndex:0},{value:" or ",paraId:1,tocIndex:0},{value:"pnpm",paraId:1,tocIndex:0},{value:".",paraId:1,tocIndex:0},{value:"The tool will create and initialize environment and dependencies automatically, please try config your proxy setting, or use another npm registry if any network errors happen during it.",paraId:2},{value:"After the initialization is complete, we enter the project and start.",paraId:3},{value:`$ cd antd-demo
$ npm run dev
`,paraId:4},{value:"Open the browser at ",paraId:5},{value:"http://localhost:3000/",paraId:5},{value:". if you see the NEXT logo, it is considered a success.",paraId:5},{value:"Now we install ",paraId:6,tocIndex:1},{value:"antd",paraId:6,tocIndex:1},{value:" from yarn or npm or pnpm.",paraId:6,tocIndex:1},{value:"Modify ",paraId:7},{value:"src/app/page.tsx",paraId:7},{value:", import Button component from ",paraId:7},{value:"antd",paraId:7},{value:".",paraId:7},{value:`import React from 'react';
import { Button } from 'antd';

const Home = () => (
  <div className="App">
    <Button type="primary">Button</Button>
  </div>
);

export default Home;
`,paraId:8},{value:"OK, you should now see a blue primary button displayed on the page. Next you can choose any components of ",paraId:9},{value:"antd",paraId:9},{value:" to develop your application. Visit other workflows of ",paraId:9},{value:"Next.js",paraId:9},{value:" at its ",paraId:9},{value:"User Guide",paraId:9},{value:".",paraId:9},{value:"You could find that components of antd do not have styles in the first screen. Next, you need to choose different SSR style processing methods according to the mode of Next.js.",paraId:10},{value:"Updated",paraId:11},{value:"If you are using the App Router in Next.js and using antd as your component library, to make the antd component library work better in your Next.js application and provide a better user experience, you can try using the following method to extract and inject antd's first-screen styles into HTML to avoid page flicker.",paraId:12,tocIndex:2},{value:"Install ",paraId:13,tocIndex:2},{value:"@ant-design/nextjs-registry",paraId:13,tocIndex:2},{value:"Use it in ",paraId:14},{value:"app/layout.tsx",paraId:14},{value:`import React from 'react';
import { AntdRegistry } from '@ant-design/nextjs-registry';

const RootLayout = ({ children }: React.PropsWithChildren) => (
  <html lang="en">
    <body>
      <AntdRegistry>{children}</AntdRegistry>
    </body>
  </html>
);

export default RootLayout;
`,paraId:15},{value:"Next.js App Router currently not support using sub-components via ",paraId:16},{value:".",paraId:16},{value:" like ",paraId:16},{value:"<Select.Option />",paraId:16},{value:" and ",paraId:16},{value:"<Typography.Text />",paraId:16},{value:". Importing them from path would solve this problem.",paraId:16},{value:"For more detailed information, please refer to ",paraId:17},{value:"with-nextjs-app-router-inline-style",paraId:17},{value:"\u3002",paraId:17},{value:"If you are using the Pages Router in Next.js and using antd as your component library, to make the antd component library work better in your Next.js application and provide a better user experience, you can try using the following method to extract and inject antd's first-screen styles into HTML to avoid page flicker.",paraId:18,tocIndex:3},{value:"Install ",paraId:19,tocIndex:3},{value:"@ant-design/cssinjs",paraId:19,tocIndex:3},{value:"Notes for developers",paraId:20,tocIndex:3},{value:"Please note that when you install ",paraId:21,tocIndex:3},{value:"@ant-design/cssinjs",paraId:21,tocIndex:3},{value:", you must ensure that the version is consistent with the version of ",paraId:21,tocIndex:3},{value:"@ant-design/cssinjs",paraId:21,tocIndex:3},{value:" in local ",paraId:21,tocIndex:3},{value:"node_modules",paraId:21,tocIndex:3},{value:" of ",paraId:21,tocIndex:3},{value:"antd",paraId:21,tocIndex:3},{value:", otherwise, multiple React instances will appear, resulting in ctx being unable to be read correctly. (Tips: you can use ",paraId:21,tocIndex:3},{value:"npm ls @ant-design/cssinjs",paraId:21,tocIndex:3},{value:" command to view the local version)",paraId:21,tocIndex:3},{value:"Rewrite ",paraId:22},{value:"pages/_document.tsx",paraId:22},{value:`import React from 'react';
import { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';
import Document, { Head, Html, Main, NextScript } from 'next/document';
import type { DocumentContext } from 'next/document';

const MyDocument = () => (
  <Html lang="en">
    <Head />
    <body>
      <Main />
      <NextScript />
    </body>
  </Html>
);

MyDocument.getInitialProps = async (ctx: DocumentContext) => {
  const cache = createCache();
  const originalRenderPage = ctx.renderPage;
  ctx.renderPage = () =>
    originalRenderPage({
      enhanceApp: (App) => (props) => (
        <StyleProvider cache={cache}>
          <App {...props} />
        </StyleProvider>
      ),
    });

  const initialProps = await Document.getInitialProps(ctx);
  const style = extractStyle(cache, true);
  return {
    ...initialProps,
    styles: (
      <>
        {initialProps.styles}
        <style dangerouslySetInnerHTML={{ __html: style }} />
      </>
    ),
  };
};

export default MyDocument;
`,paraId:23},{value:"Supports custom themes",paraId:24},{value:`// theme/themeConfig.ts
import type { ThemeConfig } from 'antd';

const theme: ThemeConfig = {
  token: {
    fontSize: 16,
    colorPrimary: '#52c41a',
  },
};

export default theme;
`,paraId:25},{value:"Rewrite ",paraId:26},{value:"pages/_app.tsx",paraId:26},{value:`import React from 'react';
import { ConfigProvider } from 'antd';
import type { AppProps } from 'next/app';

import theme from './theme/themeConfig';

const App = ({ Component, pageProps }: AppProps) => (
  <ConfigProvider theme={theme}>
    <Component {...pageProps} />
  </ConfigProvider>
);

export default App;
`,paraId:27},{value:"Use antd in page component",paraId:28},{value:`import React from 'react';
import { Button } from 'antd';

const Home = () => (
  <div className="App">
    <Button type="primary">Button</Button>
  </div>
);

export default Home;
`,paraId:29},{value:"For more detailed information, please refer to ",paraId:30},{value:"with-nextjs-inline-style",paraId:30},{value:".",paraId:30}]},871851:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In real project development, besides UI libraries like Ant Design, you may also need build tools, routing solutions, CSS solutions, data flow solutions, request libraries and request solutions, i18n solutions, permission solutions, Icons solutions, etc. We have launched ",paraId:0},{value:"Umi",paraId:0},{value:", an enterprise application framework based on React, based on the scenarios of business scenarios, which we recommend you to use in your projects.",paraId:0},{value:"Umi is a scalable enterprise front-end application framework and the underlying front-end framework of Ant Group, which has served 10,000+ applications directly or indirectly.",paraId:1},{value:"This article will guide you through creating a simple application from scratch using Umi, Ant Design and ",paraId:2},{value:"Ant Design Pro",paraId:2},{value:".",paraId:2},{value:"The recommended way to create a Umi scaffold is using ",paraId:3,tocIndex:0},{value:"pnpm",paraId:3,tocIndex:0},{value:" to execute the following command.",paraId:3,tocIndex:0},{value:`$ mkdir myapp && cd myapp
$ pnpm create umi
`,paraId:4,tocIndex:0},{value:"If you use npm, you can run ",paraId:5,tocIndex:0},{value:"npm create umi",paraId:5,tocIndex:0},{value:" for the same effect; if you use yarn, run ",paraId:5,tocIndex:0},{value:"yarn create umi",paraId:5,tocIndex:0},{value:"; if you use bun, which means you are a very hipster, you can run ",paraId:5,tocIndex:0},{value:"bunx create-umi",paraId:5,tocIndex:0},{value:" (note that there is a ",paraId:5,tocIndex:0},{value:"-",paraId:5,tocIndex:0},{value:" between create and umi).",paraId:5,tocIndex:0},{value:'Select "Simple App" here, because we want to start from "scratch".',paraId:6,tocIndex:0},{value:`? Pick Umi App Template \u203A - Use arrow-keys. Return to submit.
\u276F   Simple App
    Ant Design Pro
    Vue Simple App
`,paraId:7,tocIndex:0},{value:'Here we recommend "pnpm". pnpm is better in speed and handling ghost dependencies.',paraId:8,tocIndex:0},{value:`? Pick Npm Client \u203A - Use arrow-keys. Return to submit.
    npm
    cnpm
    tnpm
    yarn
\u276F   pnpm
`,paraId:9,tocIndex:0},{value:'For those in China, we recommend choosing "taobao", otherwise choose "npm".',paraId:10,tocIndex:0},{value:`? Pick Npm Registry \u203A - Use arrow-keys. Return to submit.
\u276F   npm
    taobao
`,paraId:11,tocIndex:0},{value:"The tool then automatically installs the dependencies and executes the initialization script for the umi.",paraId:12,tocIndex:0},{value:"Before starting the project, let's install some more dependencies that will be used in this tutorial.",paraId:13,tocIndex:0},{value:`$ pnpm i @umijs/plugins -D
$ pnpm i antd axios @ant-design/pro-layout -S
`,paraId:14,tocIndex:0},{value:"@umijs/plugins",paraId:15,tocIndex:0},{value:" is the official plugin set of Umi, containing a large number of plugins such as valtio, react-query, styled-components, locale, access, qiankun, etc. ",paraId:15,tocIndex:0},{value:"antd",paraId:15,tocIndex:0},{value:" needs no introduction. ",paraId:15,tocIndex:0},{value:"axios",paraId:15,tocIndex:0},{value:" is the request library; ",paraId:15,tocIndex:0},{value:"@ant-design/pro-layout",paraId:15,tocIndex:0},{value:" is the component used to generate the layouts.",paraId:15,tocIndex:0},{value:"When finished, execute the following command to start the project.",paraId:16,tocIndex:0},{value:`$ npm run dev
umi dev
info  - Umi v4.0.46
        \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557
        \u2551 App listening at:                                  \u2551
        \u2551  >   Local: http://localhost:8000                  \u2551
ready - \u2551  > Network: http://*********:8000                  \u2551
        \u2551                                                    \u2551
        \u2551 Now you can open browser with the above addresses\u2191 \u2551
        \u255A\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255D
`,paraId:17,tocIndex:0},{value:"Follow the prompts and click the url in the command line, which will automatically open the browser. If it goes well, you will see the following screen.",paraId:18,tocIndex:0},{value:"We're going to write an application to display a list of products. The first step is to create the routes, which can be thought of as the different pages that make up the application. Umi users don't usually need to care about the implementation behind Umi, but in case you're wondering, Umi's routes are based on react-router@6.3 (Note: not the latest 6.4, which contains loader and action functionality that is not required for Umi).",paraId:19,tocIndex:1},{value:"We can create routes with cli.",paraId:20,tocIndex:1},{value:`$ npx umi g page products
Write: src/pages/products.tsx
Write: src/pages/products.less
`,paraId:21,tocIndex:1},{value:"Then modify the configuration file ",paraId:22,tocIndex:1},{value:".umirc.ts",paraId:22,tocIndex:1},{value:" with the new route declaration.",paraId:22,tocIndex:1},{value:`import { defineConfig } from "umi";

export default defineConfig({
  routes: [
    { path: "/", component: "index" },
    { path: "/docs", component: "docs" },
+    { path: "/products", component: "products" },
  ],
  npmClient: "pnpm",
});
`,paraId:23,tocIndex:1},{value:"Since the boilerplate uses configured routing, as the name implies, the routes are configured line by line by people, which is tedious but more flexible, this way you need to add the routes field to the configuration, see ",paraId:24,tocIndex:1},{value:"Umi Documentation on Routing",paraId:24,tocIndex:1},{value:". In addition, Umi also supports protocol-based routing, meaning that the file system is the route, so there is no need to configure routes to take effect.",paraId:24,tocIndex:1},{value:"Then we edit the ",paraId:25,tocIndex:1},{value:"src/layouts/index.tsx",paraId:25,tocIndex:1},{value:" file and add the navigation to the ",paraId:25,tocIndex:1},{value:"/products",paraId:25,tocIndex:1},{value:" path in the global layout route.",paraId:25,tocIndex:1},{value:`<li>
  <Link to="/docs">Docs</Link>
</li>
+ <li>
+   <Link to="/products">Products</Link>
+ </li>
`,paraId:26,tocIndex:1},{value:"Open ",paraId:27,tocIndex:1},{value:"http://localhost:8000/products",paraId:27,tocIndex:1},{value:" and if it goes well, you will see the following page.",paraId:27,tocIndex:1},{value:"As your application grows, you'll need to share UI elements across multiple pages (or use them multiple times on a single page), and in Umi you can abstract this out into components. Let's write a ProductList component so that we can display the product list in different places.",paraId:28,tocIndex:2},{value:"Create a new ",paraId:29,tocIndex:2},{value:"src/components/ProductList.tsx",paraId:29,tocIndex:2},{value:" file with the following code.",paraId:29,tocIndex:2},{value:`import React from 'react';
import { Button, Popconfirm, Table } from 'antd';

const ProductList: React.FC<{ products: { name: string }[]; onDelete: (id: string) => void }> = ({
  onDelete,
  products,
}) => {
  const columns = [
    {
      title: 'Name',
      dataIndex: 'name',
    },
    {
      title: 'Actions',
      render(text, record) {
        return (
          <Popconfirm title="Delete?" onConfirm={() => onDelete(record.id)}>
            <Button>Delete</Button>
          </Popconfirm>
        );
      },
    },
  ];
  return <Table rowKey="id" dataSource={products} columns={columns} />;
};

export default ProductList;
`,paraId:30,tocIndex:2},{value:"Assuming we have agreed on an API interface with the backend developers, we can now use Mock data to locally mock up the data that the API should return, so that front-end and back-end development can proceed simultaneously without the front-end work being blocked because the back-end API is still being developed. Umi provides an out-of-the-box ",paraId:31,tocIndex:3},{value:"Mock function",paraId:31,tocIndex:3},{value:" that allows you to set up Mock data in a convenient and easy way.",paraId:31,tocIndex:3},{value:"Create a ",paraId:32,tocIndex:3},{value:"mock",paraId:32,tocIndex:3},{value:" directory and add a new ",paraId:32,tocIndex:3},{value:"products.ts",paraId:32,tocIndex:3},{value:" file to this directory with the following code.",paraId:32,tocIndex:3},{value:`import { defineMock } from 'umi';

type Product = {
  id: string;
  name: string;
};

let products: Product[] = [
  { id: '1', name: 'Umi' },
  { id: '2', name: 'Ant Design' },
  { id: '3', name: 'Ant Design Pro' },
  { id: '4', name: 'Dva' },
];

export default defineMock({
  'GET /api/products': (_, res) => {
    res.send({
      status: 'ok',
      data: products,
    });
  },
  'DELETE /api/products/:id': (req, res) => {
    products = products.filter((item) => item.id !== req.params.id);
    res.send({ status: 'ok' });
  },
});
`,paraId:33,tocIndex:3},{value:"Then visit ",paraId:34,tocIndex:3},{value:"http://localhost:8000/api/products",paraId:34,tocIndex:3},{value:" and you will see the api response.",paraId:34,tocIndex:3},{value:"With the UI components and Mock data done, it's time to bring them together. The request solution is needed here, and our choice here is react-query (if you want to say @tanstack/react-query, yes, they are the same library, and @tanstack/react-query is a renamed package of react-query). So before you start, you need to change the configuration to enable the ",paraId:35,tocIndex:4},{value:"react-query plugin for Umi",paraId:35,tocIndex:4},{value:" with one click.",paraId:35,tocIndex:4},{value:"First edit ",paraId:36,tocIndex:4},{value:".umirc.ts",paraId:36,tocIndex:4},{value:".",paraId:36,tocIndex:4},{value:`import { defineConfig } from "umi";

export default defineConfig({
+  plugins: ['@umijs/plugins/dist/react-query'],
+  reactQuery: {},
  routes: [
    { path: "/", component: "index" },
    { path: "/docs", component: "docs" },
    { path: "/products", component: "products" },
  ],
  npmClient: 'pnpm',
});
`,paraId:37,tocIndex:4},{value:"Edit ",paraId:38,tocIndex:4},{value:"src/pages/products.tsx",paraId:38,tocIndex:4},{value:" with the following code.",paraId:38,tocIndex:4},{value:`import axios from 'axios';
import React from 'react';
import { useMutation, useQuery, useQueryClient } from 'umi';
import ProductList from '@/components/ProductList';
import styles from './products.less';

export default function Page() {
  const queryClient = useQueryClient();
  const productsQuery = useQuery(['products'], {
    queryFn() {
      return axios.get('/api/products').then((res) => res.data);
    },
  });
  const productsDeleteMutation = useMutation({
    mutationFn(id: string) {
      return axios.delete(\`/api/products/\${id}\`);
    },
    onSettled: () => {
      queryClient.invalidateQueries({ queryKey: ['products'] });
    },
  });
  if (productsQuery.isLoading) return null;
  return (
    <div>
      <h1 className={styles.title}>Page products</h1>
      <ProductList
        products={productsQuery.data.data}
        onDelete={(id) => {
          productsDeleteMutation.mutate(id);
        }}
      />
    </div>
  );
}
`,paraId:39,tocIndex:4},{value:"Here, we pull the data from ",paraId:40,tocIndex:4},{value:"/api/products",paraId:40,tocIndex:4},{value:" with ",paraId:40,tocIndex:4},{value:"useQuery()",paraId:40,tocIndex:4},{value:" and submit a DELETE request to ",paraId:40,tocIndex:4},{value:"/api/products/${id}",paraId:40,tocIndex:4},{value:" in the ",paraId:40,tocIndex:4},{value:"onDelete",paraId:40,tocIndex:4},{value:" event with ",paraId:40,tocIndex:4},{value:"useMutation()",paraId:40,tocIndex:4},{value:" to perform the delete operation. For more details on the use of react-query, please refer to ",paraId:40,tocIndex:4},{value:"Umi Plugin for React Query",paraId:40,tocIndex:4},{value:" and ",paraId:40,tocIndex:4},{value:"React Query Official Website",paraId:40,tocIndex:4},{value:".",paraId:40,tocIndex:4},{value:"After saving, you should see the following screen.",paraId:41,tocIndex:4},{value:"A standard backend project generally need a layout, this layout is very often highly similar, ",paraId:42,tocIndex:5},{value:"ProLayout",paraId:42,tocIndex:5},{value:" encapsulates the common menu, breadcrumbs, page headers and other functions, provides a non-dependent framework and an out-of-the-box advanced layout component. And support ",paraId:42,tocIndex:5},{value:"side",paraId:42,tocIndex:5},{value:", ",paraId:42,tocIndex:5},{value:"mix",paraId:42,tocIndex:5},{value:", ",paraId:42,tocIndex:5},{value:"top",paraId:42,tocIndex:5},{value:" three modes, but also built-in menu selection, menu generation breadcrumbs, automatically set the logic of the page title.",paraId:42,tocIndex:5},{value:"Modify the configuration for each route to add a name field for ProLayout to do menu rendering use.",paraId:43,tocIndex:5},{value:`import { defineConfig } from "umi";

export default defineConfig({
  routes: [
-    { path: "/", component: "index" },
+    { path: "/", component: "index", name: "home" },
-    { path: "/docs", component: "docs" },
+    { path: "/docs", component: "docs", name: "docs" },
-    { path: "/products", component: "products" },
+    { path: "/products", component: "products", name: "products" },
  ],
  plugins: ["@umijs/plugins/dist/react-query"],
  reactQuery: {},
  npmClient: "pnpm",
});
`,paraId:44,tocIndex:5},{value:"Edit ",paraId:45,tocIndex:5},{value:"src/layouts/index.tsx",paraId:45,tocIndex:5},{value:" with the following code.",paraId:45,tocIndex:5},{value:`import { ProLayout } from '@ant-design/pro-layout';
import { Link, Outlet, useAppData, useLocation } from 'umi';

export default function Layout() {
  const { clientRoutes } = useAppData();
  const location = useLocation();
  return (
    <ProLayout
      route={clientRoutes[0]}
      location={location}
      title="Umi x Ant Design"
      menuItemRender={(menuItemProps, defaultDom) => {
        if (menuItemProps.isUrl || menuItemProps.children) {
          return defaultDom;
        }
        if (menuItemProps.path && location.pathname !== menuItemProps.path) {
          return (
            <Link to={menuItemProps.path} target={menuItemProps.target}>
              {defaultDom}
            </Link>
          );
        }
        return defaultDom;
      }}
    >
      <Outlet />
    </ProLayout>
  );
}
`,paraId:46,tocIndex:5},{value:"Here we first use umi's ",paraId:47,tocIndex:5},{value:"useAppData",paraId:47,tocIndex:5},{value:" to get the global client route ",paraId:47,tocIndex:5},{value:"clientRoutes",paraId:47,tocIndex:5},{value:", which is a nested routing object, and we pass ",paraId:47,tocIndex:5},{value:"clientRoutes[0]",paraId:47,tocIndex:5},{value:" to ProLayout; then we use ",paraId:47,tocIndex:5},{value:"useLocation()",paraId:47,tocIndex:5},{value:" to get the location information, which is also passed to ProLayout to decide which menu should be highlighted; we also want to do a route jump when we click on the menu, so we need to customize ProLayout's menuItemRender method.",paraId:47,tocIndex:5},{value:"You may have found ",paraId:48,tocIndex:5},{value:"src/layouts/index.less",paraId:48,tocIndex:5},{value:" has no place to refer to him, in order to keep the project file tidy, you can choose to delete him.",paraId:48,tocIndex:5},{value:"The browser will automatically refresh at this point, and if it goes well, you'll see the following screen.",paraId:49,tocIndex:5},{value:"After completing the development and verifying it in the development environment, it is time to deploy it to our users by executing the following command.",paraId:50,tocIndex:6},{value:`$ npm run build
info  - Umi v4.0.46
\u2714 Webpack
  Compiled successfully in 5.31s
info  - File sizes after gzip:
  122.45 kB  dist/umi.js
  575 B      dist/src__pages__products.async.js
  312 B      dist/src__pages__index.async.js
  291 B      dist/layouts__index.async.js
  100 B      dist/layouts__index.chunk.css
  55 B       dist/src__pages__products.chunk.css
event - Build index.html
`,paraId:51,tocIndex:6},{value:"The build command will package all resources, including JavaScript, CSS, Web Fonts, images, Html, etc. You can find these files in the ",paraId:52,tocIndex:6},{value:"dist/",paraId:52,tocIndex:6},{value:" directory.",paraId:52,tocIndex:6},{value:"We have completed a simple application and you may still have many questions, such as",paraId:53,tocIndex:7},{value:"How to handle errors uniformly?",paraId:54,tocIndex:7},{value:"How to handle more routing, such as dynamic routing, nested routing, permission routing, etc.?",paraId:54,tocIndex:7},{value:"How to use a data flow scheme?",paraId:54,tocIndex:7},{value:"How to modify webpack configuration or switch to vite build mode?",paraId:54,tocIndex:7},{value:"etc.",paraId:54,tocIndex:7},{value:"You can.",paraId:55,tocIndex:7},{value:"Visit ",paraId:56,tocIndex:7},{value:"Umi official website",paraId:56,tocIndex:7},{value:"Learn about ",paraId:56,tocIndex:7},{value:"Umi's Routing",paraId:56,tocIndex:7},{value:"Learn about ",paraId:56,tocIndex:7},{value:"Umi Max",paraId:56,tocIndex:7},{value:", which is more integrated than Umi",paraId:56,tocIndex:7},{value:"Learn about the out-of-the-box middle and backend scaffolding ",paraId:56,tocIndex:7},{value:"Ant Design Pro",paraId:56,tocIndex:7},{value:"Learn about advanced layouts ",paraId:56,tocIndex:7},{value:"ProLayout",paraId:56,tocIndex:7},{value:"Learn about advanced tables ",paraId:56,tocIndex:7},{value:"ProTable",paraId:56,tocIndex:7}]},332692:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Vite",paraId:0},{value:" is one of the best React application development tools. We are going to use ",paraId:0},{value:"antd",paraId:0},{value:" within it and modify the vite config for some customized needs.",paraId:0},{value:"Before all start, you may need install ",paraId:1,tocIndex:0},{value:"yarn",paraId:1,tocIndex:0},{value:" or ",paraId:1,tocIndex:0},{value:"pnpm",paraId:1,tocIndex:0},{value:".",paraId:1,tocIndex:0},{value:"The tool will create and initialize environment and dependencies automatically, please try config your proxy setting, or use another npm registry if any network errors happen during it.",paraId:2},{value:"Then we go inside ",paraId:3},{value:"antd-demo",paraId:3},{value:" install dependencies and start it.",paraId:3},{value:`$ cd antd-demo
$ npm install
$ npm run dev
`,paraId:4},{value:"Open the browser at ",paraId:5},{value:"http://localhost:5173/",paraId:5},{value:". It renders a header saying ",paraId:5},{value:"Vite + React",paraId:5},{value:" on the page.",paraId:5},{value:"Below is the default directory structure.",paraId:6,tocIndex:1},{value:`\u251C\u2500\u2500 public
\u2502\xA0\xA0 \u2514\u2500\u2500 vite.svg
\u251C\u2500\u2500 src
\u2502\xA0\xA0 \u2514\u2500\u2500 assets
\u2502       \u2514\u2500\u2500 react.svg
\u2502\xA0\xA0 \u251C\u2500\u2500 App.css
\u2502\xA0\xA0 \u251C\u2500\u2500 App.js
\u2502\xA0\xA0 \u251C\u2500\u2500 index.css
\u2502\xA0\xA0 \u251C\u2500\u2500 main.js
\u2502\xA0\xA0 \u2514\u2500\u2500 logo.svg
\u251C\u2500\u2500 index.html
\u251C\u2500\u2500 package.json
\u2514\u2500\u2500 vite.config.ts
`,paraId:7,tocIndex:1},{value:"Now we install ",paraId:8,tocIndex:1},{value:"antd",paraId:8,tocIndex:1},{value:" from yarn or npm or pnpm.",paraId:8,tocIndex:1},{value:"Modify ",paraId:9},{value:"src/App.js",paraId:9},{value:", import Button component from ",paraId:9},{value:"antd",paraId:9},{value:".",paraId:9},{value:`import React from 'react';
import { Button } from 'antd';

const App = () => (
  <div className="App">
    <Button type="primary">Button</Button>
  </div>
);

export default App;
`,paraId:10},{value:"OK, you should now see a blue primary button displayed on the page. Next you can choose any components of ",paraId:11},{value:"antd",paraId:11},{value:" to develop your application. Visit other workflows of ",paraId:11},{value:"Vite",paraId:11},{value:" at its ",paraId:11},{value:"User Guide",paraId:11},{value:".",paraId:11},{value:"We are successfully running antd components now, go build your own application!",paraId:12}]},420996:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Please find below some of the design resources and tools about Ant Design that we consider valuable. More of this is still being collected. You can leave feedback about Sketch Symbols ",paraId:0,tocIndex:0},{value:"here",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:`
- Sketch Symbols
  - https://gw.alipayobjects.com/zos/basement_prod/048ee28f-2c80-4d15-9aa3-4f5ddac50465.svg
  - Sketch Symbols for Desktop
  - https://github.com/ant-design/ant-design/releases/download/resource/Ant.Design.Components.5.0.Beta.sketch
  - Official
- Mobile Components
  - https://gw.alipayobjects.com/zos/basement_prod/c0c3852c-d245-4330-886b-cb02ef49eb6d.svg
  - Sketch Symbols File for Mobile
  - https://gw.alipayobjects.com/os/bmw-prod/d6266aef-25b7-4892-b275-ce214121831c.sketch
  - Official
- Ant Design Pro
  - https://gw.alipayobjects.com/zos/basement_prod/5edc7f4d-3302-4710-963b-7b6c77ea8d06.svg
  - Common Templates and Pages
  - https://gw.alipayobjects.com/os/bmw-prod/22208f9d-f8c5-4d7c-b87a-fec290e96527.sketch
  - Official
- Kitchen
  - https://gw.alipayobjects.com/zos/basement_prod/d475d063-2754-4442-b9db-5d164e06acc9.svg
  - A Sketch plugin collection
  - http://kitchen.alipay.com
  - Official
- Ant Design Landing
  - https://gw.alipayobjects.com/zos/basement_prod/b443f4be-5116-49b7-873f-a7c8502b8f0e.svg
  - Landing Templates
  - https://landing.ant.design/docs/download-cn
  - Official
- Ant Design Prototype (xiaopiu)
  - https://gw.alipayobjects.com/zos/basement_prod/77e6a9ae-24a9-4be6-be42-f7fa8ee0eecf.svg
  - Online library and prototype
  - https://www.xiaopiu.com/topic/ant-design
- UI Kit for Figma
  - https://gw.alipayobjects.com/zos/basement_prod/7b9ed3f2-6f05-4ddb-bac3-d55feb71e0ac.svg
  - Library of components for Desktop
  - https://www.antforfigma.com
- UI Kit for Adobe XD
  - https://uploads-ssl.webflow.com/5ecbd337fe499992c9ed75ba/5f2a7a30f3e817085cec5ac9_ant-xd-svg.svg
  - Library of components for Desktop
  - https://www.antforxd.com
- Figma Open Source Library
  - https://gw.alipayobjects.com/zos/basement_prod/7b9ed3f2-6f05-4ddb-bac3-d55feb71e0ac.svg
  - Free open source Figma library with complete accurate to code components
  - https://www.figma.com/community/file/831698976089873405
- Ruyi Design Assistant
  - https://github.com/ant-design/ant-design/assets/507615/45201521-37d0-4360-b81e-a1260dedad7a
  - Figma Plugin,Design using Antd code component library and deliver component code that is friendly to developers
  - https://www.figma.com/community/plugin/1192146318523533547
- Ant Design Chart
  - https://gw.alipayobjects.com/zos/basement_prod/a9dc586a-fe0a-4c7d-ab4f-f5ed779b963d.svg
  - Sketch Symbols for Chart
  - https://gw.alipayobjects.com/os/bmw-prod/704968a5-2641-484e-9f65-c2735b2c0287.sketch
  - Official
- MockingBot
  - https://cdn.modao.cc/logo_mockingbot.svg
  - Rich component resources
  - https://modao.cc/square/ant-design
- JiShi Design
  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*dxzdQYWlmjMAAAAAAAAAAAAAARQnAQ
  - Use fully components and templates on JiShi Design
  - https://js.design/antd
- Ant for Plasmic
  - https://user-images.githubusercontent.com/7129/149994038-76214796-cd6a-4e80-b0a4-117e8edac050.png
  - Drag/drop live Ant components and manipulate props in this React visual builder
  - https://www.plasmic.app/ant-design
- MasterGo
  - https://mastergo-local-default.oss-cn-beijing.aliyuncs.com/ant-design-mastergo.svg
  - Use fully components and templates on MasterGo
  - https://mastergo.com/community/?utm_source=antdesign&utm_medium=link&utm_campaign=resource&cata_name=AntDesign
- AntBlocks UI for Figma
  - https://uploads-ssl.webflow.com/64dc925e7cb893427a5c9cdc/64e4610f7818dcc7501057ad_antblocks-ui-card-img.svg
  - High-quality, responsive, and customizable React components built on Ant Design
  - https://www.antblocksui.com/#figma
`,paraId:1},{value:"Do you want to know the story behind the Ant Design design system? How can I better apply Ant Design? You can check out our well selected articles below. Also welcome to follow ",paraId:2,tocIndex:1},{value:"Ant Design Official Column",paraId:2,tocIndex:1},{value:". There are often the latest sharing and discussions on related topics under the Ant Design design system, such as Ant Design, AntV visualization, Kitchen design Plug-ins, B-side product design, SaaS product design, natural interaction, growth design, intelligent design, design engineering, etc.",paraId:2,tocIndex:1},{value:"Please find below the books that inspired us, saved our time and helped us to overcome difficulties when designing components and patterns. If you want to know more about UI design, we recommend you these awesome design systems: ",paraId:3,tocIndex:2},{value:"Fiori Design",paraId:3,tocIndex:2},{value:", ",paraId:3,tocIndex:2},{value:"Human Interface Guidelines",paraId:3,tocIndex:2},{value:", ",paraId:3,tocIndex:2},{value:"Lightning Design System",paraId:3,tocIndex:2},{value:", ",paraId:3,tocIndex:2},{value:"Material Design",paraId:3,tocIndex:2},{value:".",paraId:3,tocIndex:2},{value:`
- About Face 4 #C7EBD6
  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*GA-CRIRqKjgAAAAAAAAAAABkARQnAQ
  - The Interactive Design Guide for Digital Products and System
  - https://www.wiley.com/en-sg/About+Face%3A+The+Essentials+of+Interaction+Design%2C+4th+Edition-p-9781118766576
- Designing Web Interfaces #009C94
  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*KK2xSJu0M80AAAAAAAAAAABkARQnAQ
  - Best Practice, Patterns and Principles for Web Interface
  - http://shop.oreilly.com/product/9780596516253.do
- Designing Interfaces #9489CF
  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*slN2QpTvIs0AAAAAAAAAAABkARQnAQ
  - Interface Design Guidelines
  - https://www.amazon.com/Designing-Interfaces-Patterns-Effective-Interaction/dp/1449379702/ref=pd_sbs_14_t_1/131-2623973-6077764?_encoding=UTF8&pd_rd_i=1449379702&pd_rd_r=ebe12a8d-435f-474b-a593-72aadf26c45a&pd_rd_w=18rob&pd_rd_wg=bhRFl&pf_rd_p=5cfcfe89-300f-47d2-b1ad-a4e27203a02a&pf_rd_r=8V8CD0EE336ZZEG15DEN&psc=1&refRID=8V8CD0EE336ZZEG15DEN
- Non-Designer's Design Book, The, 4th Edition #FAF0CD
  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*1HbNSIju7pEAAAAAAAAAAABkARQnAQ
  - Basic Principles of Good Design
  - http://www.peachpit.com/store/non-designers-design-book-9780133966152
- The Design of Everyday Things #F8F3D1
  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*4woBSLvOjfMAAAAAAAAAAABkARQnAQ
  - About the People-oriented Design Philosophy
  - https://jnd.org/the-design-of-everyday-things-revised-and-expanded-edition/
- Emotional Design #E8EEB4
  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*6ZQJQoKRORsAAAAAAAAAAABkARQnAQ
  - Explain the Role of Emotional Factors in Design
  - https://www.amazon.com/Emotional-Design-Love-Everyday-Things/dp/0465051367
- Web Form Design #C2DAED
  - https://gw.alipayobjects.com/mdn/rms_08e378/afts/img/A*VhhwRo7axKQAAAAAAAAAAABkARQnAQ
  - The Essence of Form Design
  - https://rosenfeldmedia.com/books/web-form-design/
`,paraId:4}]},647109:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"As is described in the Law of Continuity of Gestalt psychology, in the perceptual process, people usually tend to understand the object in the way that it is firstly perceived, to let the straight lines be straight and let the curve lines be curve. In the design of interface, aligning the elements meets users' perception, also delivers the information to users in a smoother way.",paraId:0},{value:"Gestalt psychology or gestaltism (German\uFF1AGestalttheorie)",paraId:1},{value:": Gestalttheorie is an important genre of psychology. It rose in the beginning of the 20 century in Germany. The central principle of gestalt psychology is that the mind forms a global whole with self-organizing tendencies.\u300CThe whole is other than the sum of the parts.\u300D--Quote from Wikipedia",paraId:1},{value:"If the paragraphs or the length of the words are too short or too loose, then a unified visual starting point is needed.",paraId:2},{value:"Colon alignment(right-align) can encircle the content into a certain range. Users can infer where the chart is through the regular arranged colon so that the speed of filling in the chart can be speeded up.",paraId:3},{value:"To compare the numbers faster, we suggest that all numbers should keep the same digit numbers after decimal point; meanwhile all numbers should be right-aligned.",paraId:4}]},17748:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Guide users to achieve the desired actions.",paraId:0,tocIndex:0},{value:"Prevent user to make mistakes.",paraId:0,tocIndex:0},{value:`
  `,paraId:1},{value:"Default buttons are used for non-primary actions. If not sure which button type to choose from, the default button is always a safe bet.",paraId:2,tocIndex:3},{value:'Emphasize on "complete" or "recommend" action. There is at most one primary button per a button group.',paraId:3,tocIndex:4},{value:"Low emphasis and light-weight button type, such as actions in a table.",paraId:4,tocIndex:5},{value:"Icon provides a visual clue.",paraId:5,tocIndex:6},{value:"It could fit more buttons in a small space.",paraId:6,tocIndex:6},{value:"Buttons with icon only need to provide Tooltip to indicate the meaning of the button.",paraId:6,tocIndex:6},{value:"Provides supplementary meaning to the button.",paraId:7,tocIndex:7},{value:"Common button types could be used to showcase to different ",paraId:8},{value:"emphasis",paraId:8},{value:".",paraId:8},{value:"Guide users to add content in an area.",paraId:9},{value:"Warns users that there are risks involved in the action.",paraId:10},{value:"Used in the dark or colored background.",paraId:11,tocIndex:13},{value:'Usually appeared alone and intend to used as a command. For example, it is used in the landing page or welcome banner. It could be as wide as its parent container. It is recommended to have just 1 "Call to Action" button in 1 screen.',paraId:12},{value:`Place buttons in the users' reading pattern for the ease of discovery, such as the "F-Shaped Reading Pattern" and "Z-Shaped Reading Pattern".`,paraId:13},{value:"Header: subject's heading, summary and navigation",paraId:14},{value:"Body: detailed content",paraId:14},{value:"Footer: supplementary information or toolbar",paraId:14},{value:"Place buttons in different areas could have different meanings.",paraId:15},{value:"Body section has collapsed or hidden content, such as it could not show the entire content in one screen;",paraId:16},{value:'Body section has complex content. For example, it has multiple subgroups and each subgroup has its own actions. Now it is needed to separate "Complete" action from body section to avoid confusion.',paraId:16},{value:"In short, footer's purpose is to have a separation from body.",paraId:17},{value:"Recommend to start from the reading flow, collapsed content should always be on the right.",paraId:18},{value:"How to Decide Button Ordering",paraId:19},{value:"Conversation Flow: place buttons in the order similar to a conversation between computers and users. ",paraId:20},{value:"Ask users the needed actions or your desired actions, then present the risks involved.",paraId:20},{value:"Navigation Flow: for example, if a button represents going back, should be placed on the left implying it is going to the previous step.",paraId:20},{value:"When multiple buttons form a group, align buttons in one line with spaces in between.",paraId:21},{value:"When there are too many buttons on the screen, we could group relevant buttons together and use similar design for that group. If one of the buttons is primary action, we could still use emphasis.",paraId:22,tocIndex:22},{value:"Collapse buttons in the order of importance",paraId:23},{value:"Flat display of all the buttons:",paraId:24},{value:" could separate different groups using space; or use divider to group similar buttons.",paraId:24},{value:"Labels should clearly indicate to users what would happen when buttons got clicked.",paraId:25},{value:"Should use verb (except dropdown buttons)",paraId:26},{value:"Should be relevant to the context and be concise.",paraId:26},{value:'Ant Design use "OK / Cancel" as default label, but you could still use below methods to customize the label text:',paraId:27},{value:"Describe the action result.",paraId:28},{value:"Publish, Login, Register.",paraId:29},{value:"If primary action means negative, stress the consequences.",paraId:30},{value:"Are you sure to delete it? Delete / Cancel",paraId:31}]},394294:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Starting in April 2015, more and more products of Ant Financial follow Ant Design specification, covering multiple business lines and more than 80 applications. Designed for enterprise-class complex UIs, used by both professional and non-professional designers, Ant Design has a low learning curve that helps you get started fast and achieve rapid results.",paraId:0},{value:"Currently, there are many products and sites using Ant Design. If your solutions are using Ant Design, please ",paraId:1},{value:"leave us a message",paraId:1},{value:".",paraId:1},{value:"Cloud-oriented financial services, used by financial institutions that benefit from customized business cloud computing services. It assists financial institutions to upgrade to a new financial restructuring, promotion of capacity platforms, data and technology.",paraId:2,tocIndex:1},{value:"Visit",paraId:3,tocIndex:1},{value:"OceanBase Cloud is a distributed relational database in a real sense, and OceanBase Cloud Platform is the OceanBase cloud-based database service that can help users quickly create and use OceanBase service.",paraId:4,tocIndex:2},{value:"Visit",paraId:5,tocIndex:2},{value:`Based on Ant Design's design values, Ant Design Pro is an enterprise-class frontend/design solution that continues to build up and refine typical template/business components/ancillary design resources based on design specifications and foundation components, Further enhance the experience of "users" and "designers" in the design and development of enterprise-class product design.`,paraId:6,tocIndex:3},{value:"Visit",paraId:7,tocIndex:3},{value:"Alibaba Cloud StreamCompute is a streaming analysis platform running on Alibaba Cloud platform. It provides users with tools for real-time analysis of streaming data in the cloud.",paraId:8,tocIndex:4},{value:"Visit",paraId:9,tocIndex:4}]},873217:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Ant Design interprets the color system into two levels: a system-level color system and a product-level color system.",paraId:0},{value:"The system-level color system mainly defines the basic color palette, neutral color palette and data visualization color palette in the design of Ant Financial. The product-level color system is in the specific design process, based on the color of the system to further define the tone of the product in accordance with the requirements and function of the color.",paraId:1},{value:"Ant Design's design team preferred to design with the HSB color model, which makes it easier for designers to have a clear psychological expectation of color when adjusting colors, as well as facilitate communication in teams.",paraId:2,tocIndex:0},{value:'Ant Design system-level color system also comes from the "natural" design language. Designers abstract the natural scenes through the capture, combined with the technical gene of Ant Financial, forming a unique 12 colors. Further through a large number of observations, to capture the different colors of natural light under the law of change, with the art of drawing ideas, the 12 colors were derived. The definition of neutral color palette is balanced with readability, aesthetics and usability.',paraId:3,tocIndex:1},{value:"Ant Design's base color palette totals 120 colors, including 12 primary colors and their derivative colors. These colors can basically include the need for color in background applications design.",paraId:4,tocIndex:2},{value:"Ant Design's color palette also has the ability to further extend. After careful elaboration by designers and programmers, we have come up with a set of color generation tools that combine the natural variation of colors. When there is a need for further color design, designers simply define the primary colors according to certain rules and will get a complete range of derived colors automatically.",paraId:5},{value:`Data visualization color palette is based on the basic color palette and neutral color palette, and based on the principle that AntV's "effective, clear, accurate and beautiful". `,paraId:6,tocIndex:4},{value:"View Palette",paraId:6,tocIndex:4},{value:"If the above palettes do not meet your needs, you can choose a main color below, and Ant Design's color generation algorithm will generate a palette for you.",paraId:7,tocIndex:5},{value:"We provide JavaScript usage for developers.",paraId:8,tocIndex:6},{value:`npm install @ant-design/colors
`,paraId:9,tocIndex:6},{value:`import { blue } from '@ant-design/colors';

console.log(blue); // ['#E6F4FF', '#BAE0FF', '#91CAFF', '#69B1FF', '#4096FF', '#1677FF', '#0958D9', '#003EB3', '#002C8C', '#001D66']
console.log(blue.primary); // '#1677FF'
`,paraId:10,tocIndex:6},{value:"More APIs: ",paraId:11,tocIndex:6},{value:"@ant-design/colors",paraId:11,tocIndex:6},{value:"The brand color is one of the most intuitive visual elements used that is used to embody product characteristics and communicate ideas. When selecting colors, it is important to understand how the brand color is used in the user interface. In the basic color palette to choose the main color, we recommend choosing the color plate from the shallow depth of the sixth color as the main color. Ant Design's brand color comes from blue of the base color palette, it's Hex value is ",paraId:12},{value:"#1677ff",paraId:12},{value:", application scenarios include: key action point, the operation status, important information highlighting, graphics and other scenes.",paraId:12},{value:"Functional color represents a clear message as well as status, such as success, error, failure, reminder, link and so on. Functional color selection need to comply with the user's basic understanding of color. We suggest that the functional colors should be kept as consistent as possible under a set of product systems. Do not have too much customization to interfere with the user's cognitive experience. Ant Design's functional color palette is shown on the right:",paraId:13},{value:`
  `,paraId:14},{value:"Neutral color is mainly used in a large part of the text interface, in addition to the background, borders, dividing lines, and other scenes are also very common. Neutral color definition needs to consider the difference between dark background and light background, while incorporating the WCAG 2.0 standard. The neutral color of Ant Design is based on transparency, as shown on the right:",paraId:15},{value:"In the design of background applications of Ant Financial, our attitude towards color is restrained. Color is used more based on information delivery, operational guidance and interactive feedback purposes. Above these principles that do not undermine operational efficiency and affect the clear communication of information, a rational choice of color is key. Of course, with illustrations and display page can be properly broken this idea.",paraId:16,tocIndex:11}]},44097:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Contrast is one of the effective ways to add visual interest to your page, and to create an organizational hierarchy among different elements that aid user in finding the information quickly.",paraId:0},{value:"Note: The important rule for contrast to be effective, it must be strong. Don't be wimp.",paraId:1},{value:"In order to help user make a quick operation (something like the form, modal), a more important operation or an operation with higher frequency would be emphasized.",paraId:2},{value:"Notes: ways of emphasizing are not just to intensify the key item. It could also weaken the other items.",paraId:3},{value:"When there's something needs users to make decision prudently, the system should remain neutral. It shouldn't make the decision for users or lead them to make judgement.",paraId:4},{value:"Taking advantage of changing the typesetting, the typeface and the size, we highlight the different levels and differentiate the ensemble and the part, which would make the page be more flexible and rhythmic.",paraId:5},{value:"Taking advantage of changing colors and adding assistant shapes, we realize the comparison of state relation, which could help users differentiate various information better",paraId:6},{value:"The forms we usually see include \u300Cstatic contrast\u300D and \u300Cdynamic contrast\u300D.",paraId:7}]},773166:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In the interface, we need to resonate with users through dialogue. Accurate and clear words are easy to understand, and a suitable tone can build a sense of trust easily. Therefore, in the interface design, copywriting should be taken seriously. There are some points to note when using and writing copy:",paraId:0},{value:"Consider from the user's point of view",paraId:1},{value:"Express consistently",paraId:1},{value:"Place\xA0important information in prominent positions",paraId:1},{value:"Professional, accurate and complete",paraId:1},{value:"Concise, friendly and positive",paraId:1},{value:"In the interface, copywriting is the basis of our communication with users. Therefore, the expression of words should be carefully deliberate and designed. With clear, accurate, and concise copywriting, the user experience can be more user-friendly.",paraId:2,tocIndex:0},{value:"When expressing content, the focus should be on users -- what they can do with your product? Not what you and your product are doing for them. The foothold of content representation is very important. Since it is user-centred design, copywriting should be user-centred as much as possible.",paraId:3},{value:'Note: Use "we" to communicate with users when they are reporting questions, suggestions or complaints to the systems, such as "We will consider your complaint.".',paraId:4},{value:"Omit useless words and do not repeat facts known to users. In most situations, there is no need for the interface to describe all the details. Try to provide short and accessible content.",paraId:5},{value:`Use simple, direct and easy-to-understand words. Indirect, ambiguous, obscure, and overly "refined" copywrite will increase user's cognitive load.`,paraId:6},{value:"Use consistent words that describe the same thing;",paraId:7},{value:"Use consistent grammar, language and word orders of the context;",paraId:7},{value:"Use consistent operation names and page titles.",paraId:7},{value:"Let users see the most important content at first glance.",paraId:8},{value:'Note: When considering security issues, private information can be adjusted to "visible after click".',paraId:9},{value:"When we want the user to take an action, we should focus on what the user can get and how he/she feels. Telling users the purpose or importance of the action can make them more willing to perform it.",paraId:10},{value:"Error reporting is a common feature in the UI, and it is an important part of user experience. When the user inputs\xA0 the wrong content, your error message should be consistent with the user's cognition, and expressed in an easy-to-understand way.",paraId:11},{value:"Use general basic words normatively. Spell correctly, express completely. Professional terms should be accurate, according to industry standards; the expression of time must be clear.",paraId:12},{value:"Language defines content, while emotions and atmosphere are expressed more in tone. The same content can be expressed in different tones to different users. Take an example, to professional operators and new users,\xA0we should use different copywrite.",paraId:13,tocIndex:8},{value:`Don't refer to the user by using "my" and "your" in the same phrase.`,paraId:14},{value:`Note: To avoid confusing the users, don't mix first person("I", "me", or "my") and second person("you", "your") in the same sentence.`,paraId:15},{value:"Give users support and encouragement, not commands or pressure. If you want to keep your users, don't blame them when things go wrong. Focus on solving problems, not blaming.",paraId:16},{value:"Don't use too absolute expression that will make the user uncomfortable.",paraId:17},{value:"When using the full name of the product, capitalize the first letter of each word. Write the abbreviations of product names in capital, such as ESC, SLB, etc.",paraId:18},{value:"People are much more used to reading words in lowercase letters, those are what our brains find easiest to scan and instantly absorb. Please avoid capitalizing whole words or phrases.",paraId:19},{value:"Use the\xA0correct case.",paraId:20},{value:"Use sentence capital case in headlines, titles, labels, menu items, buttons,\xA0etc.",paraId:21},{value:"Users perceive numbers faster. Numbers transmit information more effectively than words.",paraId:22},{value:"To help users scan the text more efficiently, unnecessary periods can be omitted. No need to use punctuation when the following elements appear alone:",paraId:23,tocIndex:15},{value:"Label",paraId:24,tocIndex:15},{value:"Title",paraId:24,tocIndex:15},{value:"Tips under the input box",paraId:24,tocIndex:15},{value:"Text in tooltip component",paraId:24,tocIndex:15},{value:"Sentences in the table",paraId:24,tocIndex:15},{value:"The following elements need to be punctuated when they appear separately:",paraId:25},{value:"Multiple sentences or paragraphs",paraId:26},{value:"Any sentence before a link",paraId:26},{value:"The exclamation mark will make the tone appear too excited, and it will easily make the atmosphere too tense.",paraId:27},{value:'Note: When expressing greetings or congratulations to the user, use "!" is reasonable, such as" Welcome back to the community! ".',paraId:28}]},231623:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Dark mode is a theme where all UI elements are darkened.",paraId:0},{value:"Dark mode is recommended when you are in a dark environment as it prevents eye strain.",paraId:1,tocIndex:0},{value:`Dark mode is great for highlighting important content
`,paraId:1,tocIndex:0},{value:"It works similarly to turning off the lights in a movie theater.",paraId:2,tocIndex:0},{value:"Comfort of content",paraId:3,tocIndex:1},{value:"Avoid using highly contrasting colors or content in dark mode. Continuous use will bring fatigue.",paraId:4,tocIndex:1},{value:"Consistency of Information",paraId:5,tocIndex:1},{value:"The information content in the dark mode needs to be consistent with the light mode, and the initialization hierarchical relationship should not be broken.",paraId:6,tocIndex:1},{value:"In the application of colors, we are based on 12 sets of basic swatches and combine longer rule processing to make colors better blend under different environmental colors.",paraId:7,tocIndex:2},{value:"Additionally, we also provide a set of tools for generating color palettes in dark colors. You need to select your primary color and the background color of the page. We will generate a dark mode color palette for you.",paraId:8,tocIndex:4}]},915773:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The suitable way to display data helps users quickly locate and browse data, and work together more efficiently. There are the following points to note when designing:",paraId:0},{value:"Organize the order of presentations according to the importance level of the information, the frequency of operation, and the degree of association.",paraId:1},{value:"Pay attention to the guidance in extreme situations. For example, the data information is too long, and the initial state when content is empty.",paraId:1},{value:`
  `,paraId:2},{value:"The table is recognized as one of the clearest and most efficient forms of presentation data. It is often used in conjunction with other interface elements such as sorting, searching, filtering, and paging, and is suitable for information collection and display, data analysis and induction, and manipulation of structured data. It's structure is simple, it's separation and induction are clear, the information is easier to compare, and the user's receiving efficiency and understanding of the information is greatly improved.",paraId:3},{value:"Note:",paraId:4},{value:"The time, status, and action bar in the table need to keep the words intact without occupying multiple lines.",paraId:5},{value:"When table cell is empty, use ",paraId:5},{value:"-",paraId:5},{value:" to indicate that there is no data.",paraId:5},{value:`
  `,paraId:6},{value:"Collapse guides the user to obtain information in a progressive manner by folding and arranging information, so that the interface is kept clean and the space is effectively utilized.",paraId:7},{value:"These components are used extensively in navigation and are also suitable for lengthy, irregular content management.",paraId:8},{value:'Note: If the collapsed content has little conjunction to each other, you can use the more space-saving "accordion" mode - "accordion" is a special collapse that allows only a single content area to be unfolded.',paraId:9},{value:`
  `,paraId:10},{value:"A card is a container for carrying information. There is not too much limit to the types of content that can be carried. It makes a type of information centralized, enhances the sense of block and is easier to operate. Cards are usually arranged in a grid or matrix to convey the hierarchical relationship between each other. Cards are suitable for lighter and more personalized information block display.",paraId:11},{value:"Note:",paraId:12},{value:"Cards are usually arranged according to the grid, and a maximum of four lines is recommended.",paraId:13},{value:'In the limited card space, you need to pay attention to the spacing between the information. If the information is too long, you can cut off the information. For example, "Ant Design is suitable for the middle station..."',paraId:13},{value:`
  `,paraId:14},{value:"As a set of same hierarchy content parallel display mode, often used for picture or card carousel, can be triggered by the user or the system automatically rotates. It is suitable for display blocks such as the official website home page and product introduction page.",paraId:15},{value:"Note:",paraId:16},{value:"The number of carousels should not be too much to avoid user boredom, it is best to control between 3 and 5.",paraId:17},{value:"It is recommended to provide hints on the design to allow users to maintain a clear understanding of the number and direction of the carousel.",paraId:17},{value:`
  `,paraId:18},{value:'"Tree" displays the hierarchical relationship of information in the form of a step-by-step outline, which is efficient and has excellent visual visibility, making the overall information framework clear at a glance.',paraId:19},{value:"Users can view and process multiple tree-level content at the same time. Tree is applicable to any information scenarios that need to be organized through a hierarchy, such as folders, organizational structures, taxonomy, country regions, and more.",paraId:20},{value:`
  `,paraId:21},{value:"Timeline is used to display time-flow information vertically, generally recording events in time by flashback, tracking what the user is doing now and what he has done in the past.",paraId:22},{value:"Each piece of information is time-based, and the content can cover topics, types, related additional content, and so on. Suitable for including events, tasks, calendar annotations, and other related data presentations.",paraId:23}]},746500:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Data Entry is an important interactive way to retrieve information of objects since users will frequently add, change or delete information. Diverse ways for text input entry and selection entry help users finish interactions more clearly and efficiently. Designers should pay attention to things as follows:",paraId:0},{value:`Straightforward text should be provided as "Label" for novice users and users that access occasionally, while terminology should be provided as "Label" for domain experts. When sensitive information should be provided by users, hints can be used to specify why the system need to do so. For example, when it's necessary to retrieve a user's identity (ID) or phone number.`,paraId:1},{value:'Allow users to get information via context to help completing their input. It avoids users to have wild guesses from the empty input through approaches like "good default values", "structured formats", "hints", "input tips" etc.',paraId:1},{value:"Input is the basic and common way for data entry, which provides a text editable component for users.",paraId:2,tocIndex:0},{value:"It uses a single line for text input with limited length.",paraId:3},{value:"Note: Specific styles can be applied to some text (e.g. numbers, URL). Please refer to ",paraId:4},{value:"Input",paraId:5},{value:"\u3002",paraId:4},{value:"It's a multi-line text input for single long text.",paraId:6},{value:"Hints is usually added in Input to help remind users, which can increase efficiency for the data entry.",paraId:7},{value:"Note: Input usually works together with label which is to the left of input by default, while it can be on top as well when the text is too long or in English context. However, it should be consistent within the same system.",paraId:8},{value:"Search can help users reduce the range for target and retrieve the necessary information quickly from a huge information pool.",paraId:9},{value:"Allow users to select from a specific range",paraId:10,tocIndex:5},{value:"Radio button allows a user to select only one value from several options. Radio options should not be too many because all the options are default visible to a user so that the user can make the selection via comparison.",paraId:11},{value:"Note: Radio Button must be more than two options, and normally less than five.",paraId:12},{value:"Checkbox is used to select multiple values from several options.",paraId:13},{value:"Note:",paraId:14},{value:"Checkbox often works together with submit action for state.",paraId:15},{value:"A single checkbox can represent the switch of two states.",paraId:15},{value:`It's used to switch the state of a single option. The inline label of "Switch" should be displayed clearly, e.g. Disable/Enable, Disallow/Allow etc.`,paraId:16},{value:'Note: It will trigger the state change directly when a user toggle the "Switch".',paraId:17},{value:"Dropdown provides more flexibility for the number of options, allowing a user to select one or multiple values from a list of options.",paraId:18},{value:"Note:",paraId:19},{value:"Used when there are more than five options.",paraId:20},{value:"Options is listed with logical sorting and content should be fully displayed.",paraId:20},{value:"Slider allows to select a suitable value by moving the anchor in a continuous or discontinuous range. It's a better choice for reflecting options of intensities or grades, e.g. volume, brightness, color saturation etc.",paraId:21},{value:'Note: Operations can be more flexible and convenient using "Slider" when precise value is not required. "NumberInput" can be worked together with Slider for precise values.',paraId:22},{value:"Transfer the elements between two columns in an intuitive and efficient way.",paraId:23},{value:"DatePicker provides a visual way to browse and select a date or date range for users.",paraId:24},{value:"Upload is the process of publishing information (from local or cloud storage) to a remote server via a web page or a upload tool.",paraId:25,tocIndex:13},{value:"Normally used to upload a single file which doesn't require preview. Click the button will prompt the file selection window.",paraId:26},{value:"Normally used to upload images. Users can upload images and display thumbnails in the list. The upload button will disappear when the number of images is up to a threshold.",paraId:27},{value:"Drag files into a specific area to upload, while it supports upload by clicking as well.",paraId:28},{value:"Note: Specific file size and format is required for file upload, e.g.: Please select text files (support PDF, ZIP, EXL) with size no more than 5M. Progress of uploading should be displayed.",paraId:29}]},914196:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Standardize data expression to ensure intuitive, accurate and consistent understanding of data.",paraId:0,tocIndex:0},{value:"The numerical value is used to indicate the measurement size, it can be used alone or with digital symbols.",paraId:1,tocIndex:2},{value:"Symbol Format",paraId:2,tocIndex:2},{value:"How and When to Use",paraId:2,tocIndex:2},{value:"Example",paraId:2,tocIndex:2},{value:"Decimal separator",paraId:2,tocIndex:2},{value:"Use commas to separate groups of thousands to help users read.",paraId:2,tocIndex:2},{value:"123,123,220",paraId:2,tocIndex:2},{value:"Unit of measurement",paraId:2,tocIndex:2},{value:"Put units of measurement in lowercase.",paraId:2,tocIndex:2},{value:"123,220kg",paraId:2,tocIndex:2},{value:"Percentage",paraId:2,tocIndex:2},{value:"To present proportionality, etc.",paraId:2,tocIndex:2},{value:"12.32%",paraId:2,tocIndex:2},{value:"Forward slash",paraId:2,tocIndex:2},{value:"To\xA0express progress with\xA0fractions.",paraId:2,tocIndex:2},{value:"12/30",paraId:2,tocIndex:2},{value:"Position",paraId:3},{value:': To let users read the data intuitively and accurately, it is necessary to make it clear and concise. In a table with numerical values, "right-aligned" method is usually adopted, which not only facilitates the user to quickly read, but also allows the user to compare the longitudinal data.',paraId:3},{value:"Amount Format",paraId:4,tocIndex:3},{value:': The standard format is "currency symbol + number". For example, "CNY1,123.00". ',paraId:4,tocIndex:3},{value:"Currency Symbol",paraId:4,tocIndex:3},{value:": There are two types: abbreviations letters and characters. You can check symbols for different currencies from ",paraId:4,tocIndex:3},{value:"CURRENCY SYMBOLS",paraId:4,tocIndex:3},{value:".",paraId:4,tocIndex:3},{value:"Currency Symbol",paraId:5,tocIndex:3},{value:"How and When to Use",paraId:5,tocIndex:3},{value:"Example",paraId:5,tocIndex:3},{value:"Character",paraId:5,tocIndex:3},{value:"Take RMB as example, its character symbol is ",paraId:5,tocIndex:3},{value:"\xA5",paraId:5,tocIndex:3},{value:", placed in front of the amount.",paraId:5,tocIndex:3},{value:"\xA5123.00",paraId:5,tocIndex:3},{value:"Letter",paraId:5,tocIndex:3},{value:"Take RMB as example, it is recommended to use ",paraId:5,tocIndex:3},{value:"CNY",paraId:5,tocIndex:3},{value:", which is the international currency code.",paraId:5,tocIndex:3},{value:"CNY123.00",paraId:5,tocIndex:3},{value:'Large amount: If an amount is large, "M/Mill." (abbreviation of million) and "B/Bill." (abbreviation of billion) can be used.',paraId:6,tocIndex:3},{value:"Absolute time is for users with high time accuracy requirements, it emphasizes the precise time point of information release. Through absolute time, users can retrieve information and review the past content.",paraId:7,tocIndex:5},{value:"Date Format:",paraId:8,tocIndex:5},{value:"We suggest the following formats:",paraId:9,tocIndex:5},{value:"Format",paraId:10,tocIndex:5},{value:"How and when to use",paraId:10,tocIndex:5},{value:"Examples",paraId:10,tocIndex:5},{value:"Year, month, day",paraId:10,tocIndex:5},{value:"In China ",paraId:10,tocIndex:5},{value:"YYYY-MM-DD",paraId:10,tocIndex:5},{value:" format is used by default.",paraId:10,tocIndex:5},{value:"2019-12-08",paraId:10,tocIndex:5},{value:"Terms",paraId:10,tocIndex:5},{value:"When a special term containing a date expressed with numbers, display a ",paraId:10,tocIndex:5},{value:".",paraId:10,tocIndex:5},{value:" between the month and the day, and quotation marks should be added before and after the term.",paraId:10,tocIndex:5},{value:"6.1 children's day",paraId:10,tocIndex:5},{value:"Date range",paraId:10,tocIndex:5},{value:"Put ",paraId:10,tocIndex:5},{value:"~",paraId:10,tocIndex:5},{value:" or ",paraId:10,tocIndex:5},{value:"-",paraId:10,tocIndex:5},{value:" between the date or time range (space is required before and after).",paraId:10,tocIndex:5},{value:"2018-12-08 ~ 2019-12-07",paraId:10,tocIndex:5},{value:"Time Format:",paraId:11,tocIndex:5},{value:"Time System",paraId:12,tocIndex:5},{value:"How and when to use",paraId:12,tocIndex:5},{value:"Examples",paraId:12,tocIndex:5},{value:"24-hour clock",paraId:12,tocIndex:5},{value:"The format\xA0is ",paraId:12,tocIndex:5},{value:"HH:MM:SS",paraId:12,tocIndex:5},{value:". Omit hours or second if not apply.\xA0Use the 24-hour clock by default.",paraId:12,tocIndex:5},{value:"14:08:00",paraId:12,tocIndex:5},{value:"12-hour clock",paraId:12,tocIndex:5},{value:"Use the format ",paraId:12,tocIndex:5},{value:"H:MM:SS AM/PM",paraId:12,tocIndex:5},{value:" (or am/pm).\xA0",paraId:12,tocIndex:5},{value:"2:08:00 PM ~ 2:08:00 AM",paraId:12,tocIndex:5},{value:"Standard format",paraId:13,tocIndex:5},{value:': When put a date and a time together, show a space between them, e.g. "2019-12-08 06:00:00".',paraId:13,tocIndex:5},{value:"To the users, the accuracy of time is not so important as the immediacy of the information. In the console platform, relative time is generally used for message and notification. And users tend to pay more attention to the unit of time, instead of working out the specific time point of publication.",paraId:14,tocIndex:6},{value:"Time",paraId:15,tocIndex:6},{value:"Display form",paraId:15,tocIndex:6},{value:"Less than 1 minute",paraId:15,tocIndex:6},{value:"just now",paraId:15,tocIndex:6},{value:"Less than 1 hour",paraId:15,tocIndex:6},{value:"N minutes ago",paraId:15,tocIndex:6},{value:"Within 24 hours",paraId:15,tocIndex:6},{value:"N hours ago",paraId:15,tocIndex:6},{value:"Longer than 24 hours",paraId:15,tocIndex:6},{value:"MM-DD HH:MM",paraId:15,tocIndex:6},{value:', e.g. "12-08 08:00"',paraId:15,tocIndex:6},{value:"Longer than one year",paraId:15,tocIndex:6},{value:"YYYY-MM-DD HH:MM",paraId:15,tocIndex:6},{value:', e.g. "2019-12-08 08:00"',paraId:15,tocIndex:6},{value:"Data redaction refers to representing truncated data to protect sensitive privacy information. The rules presented here are general guidelines, which can be adjusted according to business scenarios with strong data security.",paraId:16,tocIndex:7},{value:"Generally used for particularly important and sensitive information such as amount and time. All the numbers need to be hidden. And the data is replaced by ",paraId:17},{value:"***",paraId:17},{value:".",paraId:17},{value:"Generally used for situations that require partial information for identification. In such cases, some part of the information is truncated, but the numerical digits of the numbers need to retain. The truncated data is replaced by ",paraId:18,tocIndex:9},{value:"*",paraId:18,tocIndex:9},{value:".",paraId:18,tocIndex:9},{value:"Data Type",paraId:19,tocIndex:9},{value:"How and When to Use",paraId:19,tocIndex:9},{value:"Example",paraId:19,tocIndex:9},{value:"Name",paraId:19,tocIndex:9},{value:"Two-character name: display the first character, followed by a ",paraId:19,tocIndex:9},{value:"*",paraId:19,tocIndex:9},{value:".",paraId:19,tocIndex:9},{value:"\u4EF2*",paraId:19,tocIndex:9},{value:"Names with three characters or more: display the first character and the last character, replace the middle character(s) with ",paraId:19,tocIndex:9},{value:"*",paraId:19,tocIndex:9},{value:".",paraId:19,tocIndex:9},{value:"\u4EF2*\u59AE ",paraId:19,tocIndex:9},{value:" \u4EF2**\u59AE",paraId:19,tocIndex:9},{value:"Mobile number",paraId:19,tocIndex:9},{value:"Keep the first three and the last four digits of the mobile number.",paraId:19,tocIndex:9},{value:"186****1402",paraId:19,tocIndex:9},{value:"ID number",paraId:19,tocIndex:9},{value:"The Chinese citizenship number consists of six address codes, eight birthdate codes, three sequential codes and one check code.",paraId:19,tocIndex:9},{value:"Redaction rules are classified into high, medium and low levels: ",paraId:19,tocIndex:9},{value:"High",paraId:19,tocIndex:9},{value:": Show\xA0the first and last digits, and replace the others with ",paraId:19,tocIndex:9},{value:"*",paraId:19,tocIndex:9},{value:".",paraId:19,tocIndex:9},{value:"Medium",paraId:19,tocIndex:9},{value:":\xA0Show the first three and the last three. Replace the others with ",paraId:19,tocIndex:9},{value:"*",paraId:19,tocIndex:9},{value:".",paraId:19,tocIndex:9},{value:"Low",paraId:19,tocIndex:9},{value:": Show the first six and the last four. Replace the others with ",paraId:19,tocIndex:9},{value:"*",paraId:19,tocIndex:9},{value:".",paraId:19,tocIndex:9},{value:"6*************2",paraId:19,tocIndex:9},{value:"213***********203",paraId:19,tocIndex:9},{value:"212912******2233",paraId:19,tocIndex:9},{value:"Address",paraId:19,tocIndex:9},{value:"Keep the provinces, cities and district information, followed by several ",paraId:19,tocIndex:9},{value:"*",paraId:19,tocIndex:9},{value:".",paraId:19,tocIndex:9},{value:"\u6D59\u6C5F\u7701\u676D\u5DDE\u5E02 \u897F\u6E56\u533A *",paraId:19,tocIndex:9},{value:"****",paraId:19,tocIndex:9},{value:"Email",paraId:19,tocIndex:9},{value:"Keep the host name of the mail and the first three characters, indicate\xA0the rest information with ",paraId:19,tocIndex:9},{value:"*",paraId:19,tocIndex:9},{value:".",paraId:19,tocIndex:9},{value:"123*",paraId:19,tocIndex:9},{value:"******",paraId:19,tocIndex:9},{value:"@163.com",paraId:19,tocIndex:9},{value:"Bank card number",paraId:19,tocIndex:9},{value:"The bank card number consists of the issuing bank identification code (ranging from 6 to 12 digits), personal account identification (ranging from 6 to 12 digits), and a check code. ",paraId:19,tocIndex:9},{value:"Redaction rules are classified into high, medium and low levels: ",paraId:19,tocIndex:9},{value:"High",paraId:19,tocIndex:9},{value:": Display the last four digits, and\xA0replace the others with ",paraId:19,tocIndex:9},{value:"*",paraId:19,tocIndex:9},{value:".",paraId:19,tocIndex:9},{value:"Medium",paraId:19,tocIndex:9},{value:": Display the first six and the last four digits,\xA0replace the others with ",paraId:19,tocIndex:9},{value:"*",paraId:19,tocIndex:9},{value:".\xA0",paraId:19,tocIndex:9},{value:"Low",paraId:19,tocIndex:9},{value:": Display the first six and the last six digits, display the remaining digits with ",paraId:19,tocIndex:9},{value:"*",paraId:19,tocIndex:9},{value:".",paraId:19,tocIndex:9},{value:"********1208",paraId:19,tocIndex:9},{value:"620121**1208",paraId:19,tocIndex:9},{value:"620121****111208",paraId:19,tocIndex:9},{value:"Display ",paraId:20},{value:"--",paraId:20},{value:" to express no-data status.",paraId:20},{value:"Use Skeleton screen when loading data.",paraId:21},{value:"Currency Symbol List",paraId:22,tocIndex:13},{value:"Time Data Formats for Different Countries",paraId:22,tocIndex:13},{value:"Digital Specification for Publications",paraId:22,tocIndex:13}]},260320:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Make lists easy to scan.",paraId:0,tocIndex:0},{value:"Quickly find objects in the list.",paraId:0,tocIndex:0},{value:`
  `,paraId:1},{value:"Emphasis on browsing. The matrix layout tends to display complex data, and the data is aligned according to the matrix layout, which is convenient for browsing data horizontally and vertically, and studying the relationship between data. Tables are used especially when the user would benefit from more data exposure without having to go into the details of the object.",paraId:2},{value:"Consider both browsing and presentation. Arranged vertically, it tends to show the basic overview of the object, and the content is displayed hierarchically, which is suitable for quick scanning. Especially when the display space is limited, such as smaller pop-up windows, sidebars, drop-down panels and other containers, use lists.",paraId:3},{value:"Emphasis on presentation. The grid layout has no specific browsing order, and each object has a more equal display opportunity. The grid layout is more attractive on the page and is suitable for highlighting objects.",paraId:4},{value:"Select the appropriate search component.",paraId:5},{value:"1\uFF09Identify the main search patterns of users.",paraId:6},{value:"Known Items Exploration: Start the search with verbally describable known items.",paraId:7},{value:"Exploratory query: search for a target with a defined but broad scope.",paraId:7},{value:"2\uFF09The higher the search frequency, the higher the efficiency requirements.",paraId:8},{value:"3\uFF09Communicate well with developers to understand system performance and select appropriate components.",paraId:9},{value:"According to the preset conditions, select multiple query conditions and submit the acquisition query at one time.",paraId:10},{value:"Users adjust the filters and the results adjust accordingly.",paraId:11},{value:"Smarter search, enter keywords to query in multiple data attributes at one time, and display the results.",paraId:12},{value:"By default, page loading is used to reduce user waiting. The user's browsing position in the original list should be cached, and the browsed items in the list should be marked. When the user returns to the previous page, the user returns to the original browsing position.",paraId:13,tocIndex:10},{value:"Recommended by default. When used, when the content of the page is less than one page, the pager will not be displayed.",paraId:14},{value:"This mode can be considered when users can often find the desired item at the top of the list and there is no need to locate a specific list item, such as dynamics and emails.",paraId:15},{value:"Use when you need to jump to the page to view the complete list.",paraId:16},{value:`
  `,paraId:1},{value:"From the perspective of natural interaction, ",paraId:17,tocIndex:15},{value:"Expand the list on the same page",paraId:17,tocIndex:15},{value:" is more natural, and it should be noted that the height of the expanded content area should not exceed one screen;",paraId:17,tocIndex:15},{value:"From the perspective of the amount of information in the details, if the information display exceeds one screen, it is not convenient for the user to use the unfolding method. At this time, it is better to use ",paraId:17,tocIndex:15},{value:"Drawer Expand",paraId:17,tocIndex:15},{value:";",paraId:17,tocIndex:15},{value:"Details need to be shared with others separately, or complex immersive tasks, ",paraId:17,tocIndex:15},{value:"jump to independent page",paraId:17,tocIndex:15},{value:" is more suitable;",paraId:17,tocIndex:15},{value:"There may be content that the user is interested in in each item of detail, so as to facilitate switching navigation, quickly view and process different items, you can use the ** double column display. **",paraId:17,tocIndex:15},{value:"When the user checks the item, the batch operation mode is triggered, and the list toolbar calls out the batch operation toolbar.",paraId:18},{value:"Click to trigger a new form pop-up window, drawer, page, etc. After the creation is completed, the newly created content appears in the first item of the list and is briefly highlighted.",paraId:19},{value:"Click New, and the object editing area will appear at the button position, and the newly created object will be displayed at this position after the creation is completed. The dotted new button position is placed at the beginning or end of the list.",paraId:20},{value:"After deletion, allow user to undo.",paraId:21},{value:"When clicking the delete operation, a second confirmation is required.",paraId:22},{value:"Destructive operations require high-level security verification to confirm operations.",paraId:23},{value:"Common features needed to integrate lists in a small space, highly recommended.",paraId:24},{value:"List layouts are usually tiled from top to bottom, in the following order. Among them, the exclusive area provides an expansion space for solving complex data search and data statistics content that cannot be integrated in the toolbar.",paraId:25},{value:"When the list has no data or no search results, an empty state should be displayed.",paraId:26}]},17902:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Detail Pages display the complete data to users. Users can edit the information or do other operations.",paraId:0},{value:"To increase the information viewing and searching efficiency. To raise the convenience of operation.",paraId:1,tocIndex:0},{value:`
  `,paraId:2},{value:`
    `,paraId:2},{value:`
    `,paraId:2},{value:`
      `,paraId:2},{value:`
      `,paraId:2},{value:"Try to display the information as flat as possible. Do not hide or fold up the content if not necessary.",paraId:3,tocIndex:2},{value:`
    `,paraId:2},{value:`
  `,paraId:2},{value:`
  `,paraId:2},{value:`
    `,paraId:2},{value:`
    `,paraId:2},{value:`
      `,paraId:2},{value:`
      `,paraId:2},{value:"In order to decrease the information complexity on each page, put information in levels and groups, following the principle of proximity.",paraId:4,tocIndex:3},{value:`
    `,paraId:2},{value:`
  `,paraId:2},{value:`
  `,paraId:2},{value:`
    `,paraId:2},{value:`
    `,paraId:2},{value:`
      `,paraId:2},{value:`
      `,paraId:2},{value:"Reduce the use of complex structures, try to use similar layouts and modules to reduce the interference of structural differences to users, and let them focus on information itself.",paraId:5,tocIndex:4},{value:`
    `,paraId:2},{value:`
  `,paraId:2},{value:"Basic Detail Pages directly show all the information at the same level of hierarchy. We suggest such method of displaying data.",paraId:6},{value:"Basic Detail Templates",paraId:2},{value:"Basic layout templates display the main information on one whole card, using non-column split lines to separate the content into groups.",paraId:7},{value:"When to use",paraId:8},{value:"To display information with less content and low complexity.",paraId:9},{value:"Document Detail Templates display the detailed information of approval documents. They use cards to separate the modules with complex content.",paraId:10},{value:"When to use",paraId:11},{value:"To display approval process and detailed approval information, as well as some approval operations.",paraId:12},{value:"Related operations",paraId:13},{value:"Pass, reject, transfer, sign, suspend and withdraw.",paraId:14},{value:"Deal with complex details in the following way: Divide information with high complexity and weak correlation into multiple parts. And put the parts into groups according to their relativities, with tabs, steps, cards, etc.",paraId:15},{value:"Advanced Detail Templates",paraId:2},{value:"When to use",paraId:16},{value:"When the detail page has large and complex content, it has to be split into multiple tabs to guide users to browse information.",paraId:17},{value:"Divide the content into steps, letting users to browse and operate step by step.",paraId:18},{value:"When to use",paraId:19},{value:"Such templates are suitable for developing and collaborating processes.",paraId:20},{value:"Based on information complexity and correlation model, choose related modes to present the information, and select suitable layouts to display the contents of detail pages.",paraId:21},{value:"Conclude the closeness of each information module according to the relevance among them. Usually, the more relevant the contents are, the closer they are to each other.",paraId:22},{value:"Non-column split lines: to separate relevant contents;",paraId:23},{value:"Full-column split lines: to divide the content into multiple parts;",paraId:23},{value:"Cards: to display information on one topic;",paraId:23},{value:"Tabs: to put the information into groups according to some feature, such as version, intention, phase, etc.",paraId:23},{value:"Select presentation modes of the information according to its types and complexity. Abased on the complexity from low to high, the followings are available components:",paraId:24},{value:"Data Format",paraId:25,tocIndex:17},{value:"Button",paraId:26,tocIndex:17},{value:"Description",paraId:27,tocIndex:18},{value:"Collapse",paraId:28,tocIndex:18},{value:"Table",paraId:29,tocIndex:18},{value:"Fiori \u2013 How to Design an Object Page",paraId:30,tocIndex:19},{value:"SAP Fiori 2.0: The Object Page \u2014\u2014 Part 1: It's History",paraId:30,tocIndex:19},{value:"Object Page Floorplan",paraId:30,tocIndex:19},{value:"Principle of Product Display in Supermarkets",paraId:30,tocIndex:19}]},616135:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"As Alan Cooper states\uFF1A\u300CWhere there is output, let there be input\u300D. This is the principle of direct manipulation. eg\uFF1AInstead of editing content on a separate page, do it directly in context.",paraId:0},{value:"Single-Field Inline Edit",paraId:1},{value:"If \u300Creadability\u300D is more important than \u300Ceditability\u300D, \u300Cclick to edit\u300D can be used.",paraId:2},{value:"If the priority is given to \u300Creadability\u300D and the \u300Ceditability\u300D of operation lines need to be highlighted at the same time, \u300Ctext link/icon edit\u300Dcan be used.",paraId:3},{value:"Multi-Field Inline Edit",paraId:4},{value:"Note\uFF1AIn\u300CMulti-Field Inline Edit\u300D, there are huge different between the content and required field, So it is more needed to use the ",paraId:5},{value:"\u300CExplain What Just Happened\u300D",paraId:6},{value:" in \u300CUse Transition\u300Dto eliminate this visual effects.",paraId:5},{value:"Drag and Drop List",paraId:7},{value:"Drag and Drop can only be limited in one dimension\uFF08upper/down or left/right\uFF09",paraId:8},{value:"Drag and Drop picture/file",paraId:9}]},418253:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"In order to help users understand what the application is currently doing, and to refer to the user's next behavior, and to understand the results of the operation, when the user need to interact with the system , use different modes to feedback information or results. When the designer uses feedback or customizes some feedback, please note:",paraId:0},{value:"Provide users with necessary, positive and immediate feedback at all stages;",paraId:1},{value:"Avoid excessive feedback, so as not to cause unnecessary disturbance to the user, you can omit the feedback prompt at the results users can see immediately and simple operation.",paraId:1},{value:"Any product can not be separated from user guidance and information prompts even if the user interface is doing well. The prompt information is used to tell the user what needs to be known and what action to take.",paraId:2,tocIndex:0},{value:"It is a non-blocking information display. It does not interrupt the user's current operation. It usually stays at a certain position on the page (top preferentially). The static display form of the non-floating layer is always displayed and will not disappear automatically. The user can click shut down.",paraId:3},{value:"Note: The close button can be added or hidden according to business needs.",paraId:4},{value:"The important global notification information actively pushed by the system is displayed in the upper right corner of the system.",paraId:5},{value:"The message prompt for the aggregate type, generally appearing in the upper right corner of the notification icon or avatar, attracts the user's eye through a striking visual form.",paraId:6},{value:"Note: Relatively important and user-related information prompts, use digital precision prompts; weights are not high and are not the user's special concern message prompts, use red dot to make tips.",paraId:7},{value:"When the target element has further description and related operations, it can be stored in the card and displayed according to the user's operation behavior.",paraId:8},{value:"Note: The difference between Tooltip and Popover is that Popover can carry more complex content, such as links or buttons.",paraId:9},{value:"Used to accurately describe the pointed object, such as icons, graphics, links, etc. When the mouse is moved in, the prompt is displayed, when the mouse is moved out, the prompt is disappeared. And the complex text and operations are not carried.",paraId:10},{value:"Feedback of the status is given to the user as much as possible during the operation, and the immediate response will give the user a sense of trust.",paraId:11,tocIndex:9},{value:"When the operation takes a while (usually more than 2 seconds) to complete, the system should immediately give a reminder, clearly inform the loading status or loading progress bar, and maintain communication with the user.",paraId:12},{value:"Note: If the loading time is long, a cancel operation should be provided.",paraId:13},{value:"During the operation, different verification rules and forms can be used to allow users to find and correct errors in time.",paraId:14},{value:"Note: The feedback text is followed by the block to be explained (the feedback content is generally an error description) and does not disappear automatically (it disappears when the user performs the corresponding interaction).",paraId:15},{value:"When the operation of the target element requires further confirmation by the user, a floating layer prompt is ejected near the target element to inquire the user.",paraId:16},{value:"Feedback of the status is given to the user as much as possible during the operation, and the immediate response will give the user a sense of trust.",paraId:17,tocIndex:13},{value:"The feedback floating layer triggered by an operation is centered on the top and disappears automatically, which is a lightweight reminder that does not interrupt the user's operation.",paraId:18},{value:"Since the feedback floating layer has a short presentation time (default 3s), for more important failure notifications, it is recommended to use a dialog box to notify you to avoid missing information.",paraId:19},{value:"The feedback floating layer triggered by an operation is located at the center of the page, and the feedback content can be closed by the confirmation or cancel button. The user cannot perform any operation when the feedback layer appears, it's for important feedback.",paraId:20},{value:"Note: Avoid displaying unnecessary reminders except it fails. Dialog is a strong feedback mechanism that is only needed when passing on very important and actionable information.",paraId:21}]},675886:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The font system is one of the most foundational parts of any interface design.",paraId:0},{value:`Text is a major channel for users to understand application content and complete their work, and a well designed font system will greatly enhance the user's reading experience and work efficiency. The Ant Design typography system is based on the design principle of "dynamic order" combined with the law of natural logarithm and temperament. We strongly recommend it since it has been verified by a large number of Ant products. While defining the font system for a visual system, we propose to start from the following five aspects:`,paraId:1},{value:"Font Family",paraId:2},{value:"Base Font Size",paraId:2},{value:"Font Scale & Line Height",paraId:2},{value:"Font Weight",paraId:2},{value:"Font Color",paraId:2},{value:"In order to implement a good font system, the first thing is to choose an appropriate font family. Ant Design prefers the system default font family and then also provides a set of alternative font libraries to maintain readability for screens on different platforms and browsers and to make sure it's always user friendly, stable and professional to end user.",paraId:3,tocIndex:0},{value:`@font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,
  'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',
  'Noto Color Emoji';
`,paraId:4,tocIndex:0},{value:"References\uFF1A",paraId:5,tocIndex:0},{value:"https://www.smashingmagazine.com/2015/11/using-system-ui-fonts-practical-guide/",paraId:5,tocIndex:0},{value:" and ",paraId:5,tocIndex:0},{value:"http://markdotto.com/2018/02/07/github-system-fonts/",paraId:5,tocIndex:0},{value:"In addition, in many applications, numbers often need to be displayed vertically. We set the CSS property ",paraId:6,tocIndex:0},{value:"font-variant-numeric",paraId:6,tocIndex:0},{value:" to ",paraId:6,tocIndex:0},{value:"tabular-nums;",paraId:6,tocIndex:0},{value:" to use ",paraId:6,tocIndex:0},{value:"tabular figures",paraId:6,tocIndex:0},{value:".",paraId:6,tocIndex:0},{value:"References\uFF1A",paraId:7,tocIndex:0},{value:"https://stackoverflow.com/questions/32660748/how-to-use-apples-new-san-francisco-font-on-a-webpage#comment78509178_32660790",paraId:7,tocIndex:0},{value:"We have updated Ant Design's base font size from the original 12 to 14 to ensure the best user reading efficiency on most common monitors based on display screen reading distance (50 cm) and optimal reading angle (0.3).",paraId:8,tocIndex:1},{value:`
  `,paraId:9},{value:"The font scale and line height determine the beauty of the dynamics and order of a font system. Font scale refers to a series of font with different sizes. Line height can be understood as an invisible box wrapped outside the font.",paraId:10,tocIndex:2},{value:`
  `,paraId:9},{value:"Ant Design was inspired by the pentatonic scale and natural law to define 10 different font sizes and corresponding line heights.",paraId:11,tocIndex:2},{value:"In Ant Design's visual system, our recommended base font size is 14, and its corresponding line height is 22. The choice of the rest of the font scale can be freely defined according to the specific circumstances. It is recommended that in a design system (except for display pages), the choice of font scale should be controlled within 3 to 5 types, and the principle of restraint should be maintained.",paraId:12},{value:"The choice of font weight is also based on the principles of order, stability, and restraint. In most cases, just regular(400) and medium(500) should be enough. In the case of bold English words, semibold(600) could be used.",paraId:13,tocIndex:3},{value:`
	`,paraId:9},{value:`
	  `,paraId:9},{value:`
	`,paraId:9},{value:`
	`,paraId:9},{value:`
  	`,paraId:9},{value:`
	`,paraId:9},{value:`
	`,paraId:9},{value:`
  	`,paraId:9},{value:`
	`,paraId:9},{value:`
  `,paraId:14},{value:"Text will be difficult to read if it is too close to the background color. To achieve barrier-free design, we follow the WCAG standard, which maintains an AAA level of contrast ratio, i.e. 7:1 or more between body text, title, and background color.",paraId:15},{value:'The construction of the font system is the first step to achieve "the beauty of dynamic order". In practical design, we have three more advanced tips:',paraId:16,tocIndex:5},{value:"Establish a systematic design thinking:",paraId:17,tocIndex:5},{value:" In the UI design of the same system, a systematic design thinking should be established first. The primary, secondary, auxiliary, title, display, and other types of fonts are planned in a unified manner. And then make any necessary fine tuning according to the specific situation. The establishment of a systematic design approach helps to increase the consistency of horizontal font landing, improve the cost-effectiveness of font uses, and avoid unnecessary style waste.",paraId:17,tocIndex:5},{value:"Less is more:",paraId:17,tocIndex:5},{value:" Visual design should be achieved with as few styles as possible. Avoid meaningless use of large numbers of font scales, colors, and font weight to emphasize visual or contrast relationships.",paraId:17,tocIndex:5},{value:"Try to make font scale dance like a note:",paraId:17,tocIndex:5},{value:" When you need to expand any gap, you can try to choose the different sizes of the font from the font scale table, which will create a subtle rhythm between the word scales.",paraId:17,tocIndex:5}]},43103:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"An icon is a graphical representation of meaning. Icons can be used to express actions, state, and even to categorize data. Ant Design's icons adhere to the following two principles and are designed for cross-platform consistency:",paraId:0},{value:"Graphics that are clear, intuitive, and simple enjoy a higher degree of recognition and are more easily understood",paraId:1},{value:"All icons in the user interface should be consistent in style (detail design, perspective, stroke weight, etc.)",paraId:1},{value:"System icons are often used to represent commonly used operations, such as: save, edit, delete. Ant Design also includes icons to represent file types and state.",paraId:2},{value:"View the icons",paraId:3},{value:"Contour lines play an important role in making various icons with the same visual effect.",paraId:4},{value:"Please make all icons in the 1024\xD71024 resolution (16\xD716 64 times).",paraId:5},{value:"Illustrator tips",paraId:6},{value:"Consistent stroke weight is the key to maintaining the visual unity of the entire icon system. Ant Design's icons have a consistent line width of 72px.",paraId:7},{value:"Consistent rounding of corners and sizing of angles is also an important element in maintaining visual unity.",paraId:8},{value:"Icons that follow Ant Design should have rounded corners and edges using a 72px radius.",paraId:9},{value:"In certain special cases (for example, when the icon is too compact), adjustments to line width, outlines, or other subtle changes may be made to increase readability.",paraId:10},{value:"Always keep a simple, flat style. Icons should not have a sense of depth nor a large amount of detail.",paraId:11},{value:'Uniform naming conventions make finding icons faster and easier. For example, icons with a surrounding outline have a uniform "-o" suffix.',paraId:12},{value:"Icons should be scaled according to the text size, according to the Ant Design specification.",paraId:13},{value:"For example, icons inline with 12pt font should be 12px in size with 8px of spacing.",paraId:14},{value:"The color of the icon should be consistent the color of the surrounding copy, unless the icon is being used to express state (in which case it should be colored accordingly).",paraId:15},{value:"Business icons, unlike system icons, do not themselves have functional operations, but rather an abstraction that assists with copywriting. Compared to the system icon, the business icon is more rich in the details of the design, the size of the use of relatively large.",paraId:16},{value:"Note: Business icons design principles and system icons are basically the same, the details of the processing (such as stroke weight, fillet size, etc.) depending on the specific scene may be.",paraId:17},{value:"In normal use, there are 32px (minimum size), 48px and 64px (maximum size) three options.",paraId:18},{value:"There are two kinds of business icon, single-color (neutral color) and double-color (neutral color + primary color), the area of primary color does not exceed 40% of the entire icon.",paraId:19}]},685079:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:`
  `,paraId:0},{value:"Illustrations are a key component of a brand's recognition. It is prevalent in both digital products and offline goods. Contrasting from Copyrighted information, illustrations not only carry information through intuition but also carries emotions and resulting in higher immersion and empathy for the customer. This leads to better user experience while accomplishing business goals. Illustrations contains inherit complexity due to the apparent personal style of the artist. It is a challenge to reproduce a consistent style between a team of artists, on the other hand, there is inherit risk when relying on a single artist for all the illustrations in a project. An illustration system is particular crucial in providing consistent branding. improving productivity. Avoiding risk in this regard is of great importance.",paraId:1,tocIndex:0},{value:`
  `,paraId:0},{value:"From the most foundational design principles to the uppermost design techniques, HiTu adopted the design inspired by ETCG. Illustrations are grouped. Usable as templates when divided and entire use flows when congregated. This supplements the design with great flexibility and customization ability.",paraId:2,tocIndex:1},{value:`
  `,paraId:0},{value:"We concretized the 4 abstract cornerstones that make up our design strategy; Technology, Certainty, Nature, Growth. Technology represents a strong engineering foundation, providing strong support for all digital products while opening a window of possibility. As the diagram shows, we can visualize the relationships between personality and products, between past experiences and the future. The combinations between each of them could meet the demands of many different business requirements.",paraId:3,tocIndex:2},{value:`
  `,paraId:0},{value:"Sea Hare's color matching system is inspired by Ant Design's application of color palette in scenes. Differing from the UI's color scheme. The color matching system used in illustrations will be relatively more vibrant and flexible. Taking inspiration from Ant Design's basic color palette, we tweaked brightness and tolerance. The result is more efficient and easy to use. Since it originates from Any Design's color palette, it integrates seamlessly with other UI assets.",paraId:4},{value:"Through research, we discovered blue and white accounts for a large proportion among enterprise products. We chose Geek Blue as our primary color for its technological, exploration and focused vibes.",paraId:5},{value:"Sea Hare's palette combined with Adobe's ternary color picker and mosaic ball, you can easily obtain the default version of the basic color palette.",paraId:6},{value:"In view of the natural design principle, we do not recommend using Q version cartoons and overly exaggerated artistic styles. Rather, we recommend a realistic head-to-body ratio.",paraId:7},{value:"Concurrently, we integrated emotions when designing the 9 common professional roles. Fusing some characteristics of the role while radiating vastly different personalities, meeting the needs of varies business requirements.",paraId:8},{value:"Taking the basic character design, we break down each character and rearrange them to match the desired skeleton structure. This means various postures can be reused and extended.",paraId:9},{value:"Memory comes from difference and professionalism from uniformity. Elementary Components refers to some status in the business settings that are constantly shifting and changing. We hope to achieve uniformity while not constraining creativity. To achieve a consistent sense of rhythm, we recommend a 1024*1024 grid while maintaining a rounded corner with sizes that are multiples of 8.",paraId:10},{value:"How do I utilize this wealth of assets? With HiTu's design principles as a guide, I recommend designers to construct a sense of spatial awareness along the Z-axis, dividing the illustration into 3 layers of foreground, middle ground and background. Placing the key elements in the foreground (such as people, elementary components, etc), environment and context in the middle and creating atmosphere in the background. The foreground should also have the highest saturation and visibility, both decreasing in level as the level decreases.",paraId:11}]},444141:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:`
  `,paraId:0},{value:"Ant Financial has a large number of enterprise-level products. With complex scenarios, designers and developers often need to respond fast due to frequent changes in product demands and concurrent R & D workflow. Many similar contents exist in the process. Through abstraction, we could obtain some stable and highly reusable components and pages.",paraId:1},{value:"On the other hand, with the trend of commercialization, more and more enterprise products begin to pursue better user experiences. Under this situation, Ant User-Experience Design Team builds a design system for enterprise products based on four design values of Natural, Certain, Meaningful, and Growing. It aims to uniform the user interface specs and reduce redundancies and excessive production costs, helping product designers to focus on better user experience.",paraId:2},{value:"We provide comprehensive design guidelines, best practices, resources, and tools to help designers produce high-quality product prototypes.",paraId:3,tocIndex:0},{value:"Design values",paraId:4,tocIndex:0},{value:"Design patterns",paraId:5,tocIndex:0},{value:"Visualization",paraId:6,tocIndex:0},{value:"Illustrations",paraId:7,tocIndex:0},{value:"Design resources",paraId:8,tocIndex:0},{value:"Sketch toolbox",paraId:9,tocIndex:0},{value:"Articles",paraId:10,tocIndex:0},{value:"React",paraId:11,tocIndex:1},{value:" is used to encapsulate a library of components which embody our design language. We welcome the community to implement ",paraId:11,tocIndex:1},{value:"our design system",paraId:12,tocIndex:1},{value:" in other front-end frameworks of their choice.",paraId:11,tocIndex:1},{value:"Ant Design of React",paraId:13,tocIndex:1},{value:"\uFF08official implementation\uFF09",paraId:14,tocIndex:1},{value:"NG-ZORRO - Ant Design of Angular",paraId:14,tocIndex:1},{value:"NG-ZORRO-MOBILE - Ant Design Mobile of Angular",paraId:14,tocIndex:1},{value:"Ant Design of Vue",paraId:14,tocIndex:1},{value:"Ant Design Blazor",paraId:14,tocIndex:1},{value:"San UI Toolkit for Ant Design",paraId:14,tocIndex:1},{value:"antizer (ClojureScript)",paraId:14,tocIndex:1},{value:"Ant Financial",paraId:15,tocIndex:2},{value:"Alibaba",paraId:15,tocIndex:2},{value:"Tencent",paraId:15,tocIndex:2},{value:"Baidu",paraId:15,tocIndex:2},{value:"Koubei",paraId:15,tocIndex:2},{value:"Meituan",paraId:15,tocIndex:2},{value:"Didi",paraId:15,tocIndex:2},{value:"Eleme",paraId:15,tocIndex:2},{value:"Other Users",paraId:15,tocIndex:2},{value:"If your company or products use Ant Design, and you'd like to be added to this growing list, click ",paraId:16,tocIndex:2},{value:"here",paraId:16,tocIndex:2},{value:" to leave us a message.",paraId:16,tocIndex:2},{value:"Hacknews: ",paraId:17,tocIndex:3},{value:"Show HN: Antd \u2013 A set of high-quality React components",paraId:17,tocIndex:3},{value:"Alligator: ",paraId:17,tocIndex:3},{value:"Crafting Beautiful UIs in React Using Ant Design",paraId:17,tocIndex:3},{value:"Introduction to Ant Design",paraId:17,tocIndex:3},{value:"Build a React App with Ant Design Principles",paraId:17,tocIndex:3},{value:"Contributions to Ant Design on GitHub are welcomed! Whether you have questions, concerns, or suggestions for improving Ant Design - please don't hesitate to reach out to us ",paraId:18,tocIndex:4},{value:"here",paraId:18,tocIndex:4},{value:".",paraId:18,tocIndex:4}]},478795:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"A common problem with many of these rich interactions (e.g. Drag and Drop, Inline Editing, and Contextual Tools) is their lack of discoverability. Providing an invitation to the user is one of the keys to successful interactive interfaces.",paraId:0},{value:"Invitations are the prompts and cues that lead users through an interaction. They often include just-in-time tips or visual affordances that hint at what will happen next in the interface.",paraId:1},{value:"Signifiers",paraId:2},{value:" are signals, communication devices. These signs tell you about the possible actions; what to do, and where to do it. Signifiers are often visible, audible or tangible, from the Design of Everyday Things.",paraId:2},{value:"Affordances",paraId:3},{value:" are the relationships (read: possible actions) between an object and an entity (most often a person). The presence of an affordance is determined by the properties of the object and of the abilities of the entity who's interacting with the object, from the Design of Everyday Things.",paraId:3},{value:"By providing cues for interaction directly on the page we can statically indicate to the user the expected interface behavior. Static Invitations provide cues directly on the page.",paraId:4,tocIndex:0},{value:"Call to Action Invitations are generally provided as static instructions on the page. But visually they can be provided in many different ways such as Text Invitation, Blank Slate Invitation and Unfinished Invitation.",paraId:5},{value:"Tour invitation can be a nice way to explain design changes to a web application, especially for a well-designed interface. But providing tours will not solve the real problems an interface may have during interaction.",paraId:6},{value:"Note that make Tour Invitations short and simple, easy to exit, and clear to restart.",paraId:7},{value:"Dynamic Invitations engage users at the point of the interaction and guide them through the next step of interaction.",paraId:8,tocIndex:1},{value:"Hover Invitation: Provide an invitation during mouse hover.",paraId:9},{value:"Inference Invitation: Use visual inferences during interaction to cue users as to what the system has inferred about their intent.",paraId:10},{value:"More Content Invitation: Indicate that there is more content on the page.",paraId:11}]},155011:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Spatial layout is the starting point of systematic visual design. The difference from traditional graphic design is that the layout space of UI interface should be based on the dynamic and systematic perspective. We were inspired by the architectural ethic of the architect Le Corbusier and explored the dynamic spatial order in UI design and formed the interface layout of Ant Design based on the principle of 'beauty of order', making it possible for designers to create spatial layout that comes with rational beauty.",paraId:0},{value:"While defining the layout system in a visual system, we propose to start from the following 5 aspects:\uFF1A",paraId:1},{value:"Unified Canvas Dimension",paraId:2},{value:"Adaptation",paraId:2},{value:"Grid Unit",paraId:2},{value:"Raster",paraId:2},{value:"Common Scales",paraId:2},{value:"In order to minimize communication cost, it is necessary to unify the size of the design board within the organization. E.g., the unified design board width of the ant design team is 1440.",paraId:3,tocIndex:0},{value:"In the design process, the designer also needs to establish the concept of adaptation. Decision needs to made for things like whether a system needs to be adapted depends on the specific situation, and/or what are the blocks that needs dynamic layout. According to statistics, mainstream screen resolution includes 1920, 1440, and 1366. Some devices still have resolution of 1280.",paraId:4,tocIndex:1},{value:"Ant Design's two typical adaptation type:",paraId:5,tocIndex:1},{value:"Commonly used in design schemes for left and right layouts, the common practice is to fix the left navigation bar and dynamically scale the right work area.",paraId:6,tocIndex:2},{value:"Common used in design schemes for top and bottom layouts. The practice is to define the minimum value for the marginal areas on both sides. After the blanking area reaches the limit value, the intermediate main content area is dynamically scaled.",paraId:7,tocIndex:3},{value:"The above are just two simple adaptation ideas, the actual design of a perfect adaptation program requires the designer to have front end perspective, plane composition perspective and interactive perspective.",paraId:8,tocIndex:3},{value:"Ant Design uses the grid system to achieve the order of the visual system. The base unit of the grid is 8, which not only matches the even number of ideas but also matches most mainstream display devices. Grid system thinking can help designers quickly achieve design decisions in the layout space while simplifying communication between designers developers.",paraId:9,tocIndex:4},{value:"Ant Design uses a 24-grid architecture. Taking the structure of the 1440 top-bottom layout as an example, the content area with a width of 1168 is divided into 24 grids, as shown in the following picture. We set the value of the Gutter of the grid in the page, such that when the browser expands or shrinks in a certain range, the column width of the grid will expand or shrink accordingly, but the width of Gutter is always fixed.",paraId:10,tocIndex:5},{value:"For developers, the grid is a way to achieve dynamic layout, however the designer's understanding of the grid is derived from the grid in the graphic design. Differences of the perspectives are likely to cause deviations that ultimately affect the degree of visual restoration, which in turn increases communication costs.",paraId:11,tocIndex:5},{value:"Ant Design's designers keep the following 4 things in mind in the communication with engineers:",paraId:12,tocIndex:5},{value:"Clear definition of dynamic layout area",paraId:13,tocIndex:5},{value:"Try to always use even numbers",paraId:13,tocIndex:5},{value:"Delivery of critical numbers (Gutter, Column)",paraId:13,tocIndex:5},{value:"Always use beginning column and ending column to define blocks.",paraId:13,tocIndex:5},{value:"AntFin's projects cover a large number of products of different types and even different orders of magnitude. In order to help designers of various levels to have consistency and similar rhythm in designing page layout, to unify designing language and reduce the restoration losses, Ant Design proposed the concept of UI common scales. From a large amount of practices, we have extracted a set of arrays that can be used as dimensions for UI layout decision. All the numbers are multiples of 8 and have a dynamic sense of rhythm. After verification, it can help us to achieve a faster and better design decision making of layout design.",paraId:14,tocIndex:6},{value:`The result of Ant Design in layout space is not to limit design output, but to guide designers to do it better. The two 8-fold array can be made into a myriad of possibilities by permutations and combinations, but there is a difference between "simply applying a permutation" and "really well designed". We need to consider availability in the pursuit of beauty, and we're still on our way to achieve a design system that is both reasonable and elegant. There are still plenty of things to explore for enterprise-level application interface layout. translate-layout`,paraId:15,tocIndex:7}]},533592:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Fitts's Law is an ergonomic principle that ties the size of a target and its contextual proximity to ease of use. In other words, if a tool is close at hand and large enough to target, then we can improve the user's interaction. Putting tools in context makes for lightweight interaction.",paraId:0},{value:`
**Fitts's Law**: The time to acquire a target is a function of the distance to and size of the target. It is proportional to the distance to the target and inversely proportional to the width of the target.
`,paraId:1},{value:`
  `,paraId:2},{value:`
If an action is critical, expose it directly in the interface and keep it always visible.
`,paraId:1},{value:`
  `,paraId:3},{value:"Instead of making Contextual Tools always visible, we can show them on demand. One way to do this is to reveal the tools when the user pauses the mouse over an object.",paraId:4},{value:`
  `,paraId:5},{value:"Toggle a tool mode for an area or page when the actions are not the main flow. The tools to accomplish this are revealed on the activation of the toggle.",paraId:6},{value:`
  `,paraId:7},{value:"The clickable area of hypertext is affected by the length of the string in a cell. The whole cell can be set to a hot spot in order to be triggered easier.",paraId:8},{value:`
  `,paraId:9},{value:"Increase the clickable hot spot to strengthen the responsiveness rather than increase the size of the button.",paraId:10},{value:"Note that it is especially suited for Mobile.",paraId:11}]},806602:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Ant Motion",paraId:0},{value:" is an animation library based on Ant Design's principles. It is more than just a single library, but also an entire React based solution for modern applications. The goal is to help developers to apply animations in their projects with minimal efforts. Ant Motion provides animations with all levels of granularity - from single action to combination of moves.",paraId:0},{value:"Animations bring vividness to interfaces and reinforce user experiences.",paraId:1},{value:"Smooth interactions",paraId:2,tocIndex:0},{value:" - Animations can make user interactions more natural.",paraId:2,tocIndex:0},{value:"Bring vividness",paraId:2,tocIndex:0},{value:" - Animations can attract users' attention and increase users' motivation to interact by bring more vividness.",paraId:2,tocIndex:0},{value:"Define hierarchies",paraId:2,tocIndex:0},{value:" - Animations can define elements' hierarchies and logical relationships in the most intuitive way.",paraId:2,tocIndex:0},{value:"Provide feedbacks",paraId:2,tocIndex:0},{value:" - Animations can reinforce user experiences by providing motional feedbacks.",paraId:2,tocIndex:0},{value:"We can determine if an animation is effective or not from the following two aspects\uFF1A",paraId:3,tocIndex:1},{value:"Justified",paraId:4,tocIndex:1},{value:" - Is this animation necessary? Does this animation help its users to digest the information? An effective animation should not be redundant.",paraId:4,tocIndex:1},{value:"Performant",paraId:4,tocIndex:1},{value:" - Is there any frame loss or lag? An effective animation must be smooth, and must not hurt the overall performance of the product.",paraId:4,tocIndex:1},{value:"Different from animations usage in typical front-office applications, animations in enterprise level applications spend a great amount of efforts on reinforcing user interactions and the effectiveness of those interactions. Therefore, we derived three animation design principles from Ant Design's core design language:",paraId:5,tocIndex:2},{value:"Intuitive animations usually are backed by law of nature. This requires the animations to be smooth so that their users can feel the animations' motion being justified. A natural animation triggers its users with positive user experiences.",paraId:6,tocIndex:3},{value:"Take button animation as an example, designers image the button as foliage on water - when you press it and release, the leave will slightly go into the water, and then pop back up, creating ripples around itself.",paraId:7,tocIndex:3},{value:"Enterprise level applications require highly effective user interactions. So is their animation design - with a transition time as minimal as possible.",paraId:8,tocIndex:4},{value:"For example, compared to appearing animations, disappearing animations should not attract too much attention from their users. They just need to be concise and clear. Therefore, disappearing animations are configured to swing out with faster velocity and no disappearing delay between each list items - they disappear all at the same time as one unit.",paraId:9,tocIndex:4},{value:"Avoid dramatic and complicated animations. A good animation will get the job done instead of frustrating its users.",paraId:10,tocIndex:5},{value:"For example, when a user expands a menu, his main focus is on the menu content, not the direction change of the arrow icon on the right. Therefore, the animation doesn't need to be very complicated and distracting; it changes just enough to indicate the transition.",paraId:11,tocIndex:5},{value:"For more details, please go to ",paraId:12,tocIndex:5},{value:"Ant Motion Animation Principles",paraId:12,tocIndex:5},{value:".",paraId:12,tocIndex:5}]},404452:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Broadly speaking, anything telling users where they are, where to go and how to get there can be called navigation. When using navigation or customizing navigational structures, please pay attention to following common pitfalls:",paraId:0},{value:"Provide visual and contextual cues as many as possible, to prevent users from getting lost",paraId:1},{value:"Maintain consistency between form and behavior, or reduce the number of items in navigation, to decrease user's learning cost",paraId:1},{value:"Minimize page transitions (i.e. reduce the number of page transitions required by a task from several to just once or twice), to ensure that user travels only a short distance from any page to another",paraId:1},{value:"Navigation menu is an effective and user-friendly way for representing site structure to users. A proper form of navigation should be utilized, once the information architecture of your site becomes clear and stable.",paraId:2,tocIndex:0},{value:"Top navigation menu put hyperlinks in a row and present information in a simple and straightforward way. It is suitable for landing pages and consumer facing web apps. The number of first level menu items should be between 2 and 7. Title for each menu item should contain less than 15 characters.",paraId:3},{value:"Vertical navigation is more flexible than horizontal one, menu items are easily extensible downward, and longer labels can be allowed. With help from a scrollbar, unlimited number of menu items can be supported. It is suitable for multi-level, operation intensive and dashboard-like web apps.",paraId:4},{value:"More layouts with navigation: ",paraId:5},{value:"Layout",paraId:6},{value:"\u3002",paraId:5},{value:"Breadcrumb tell users where they are now among page hierarchy, and parent-child relationships between pages.",paraId:7,tocIndex:3},{value:"Notes:",paraId:8},{value:"When hierarchy is deep, it is recommended to hide certain pages. Depth of pages shown should at best be lower than 3, and should not exceed 5.",paraId:9},{value:"Avoid using breadcrumb as much as you can, especially when page contains other navigation components sufficiently telling where users are.",paraId:9},{value:"Tabs categorize content, in order to present large amount of information in a limited space. User can easily switch among tab panels without transitioning from one page to another. Categories can be determined via business logics or states, label for each category should contain less than 15 characters.",paraId:10,tocIndex:4},{value:"Control content of the entire page. Usually used for switching among core functionalities.",paraId:11},{value:"Control part of page content. Bordered container naturally separate it from other parts of the page.",paraId:12},{value:"Switch among options in a card. Usually used along with other types of tabs, so that user can navigate to intended content via quick tab switching.",paraId:13},{value:"Used for large number of tab options. It can be easily extended to contain an unlimited number of categories.",paraId:14},{value:"Steps is a navigation bar guiding users to perform a task following a predefined workflow. It gives users a rough estimate about how long the task is going take, tells them which step they are in, and showcases users' progress in an explicit way. It is always a good idea to break complex and procedural task into steps.",paraId:15,tocIndex:9},{value:"Used for more than 2 but less than 5 steps. Title for each step should contain less than 12 characters.",paraId:16},{value:"Usually float at the left side of pages, in a fixed position. Multi-line description can be attached to each step. Suitable for large or dynamic number of steps, i.e. time-based steps with dynamic descriptions.",paraId:17},{value:"Used for paginating large amount of content. Users can clearly know the total amount of content, how much they have already browsed and how much remains to be browsed.",paraId:18,tocIndex:12},{value:"When there is a large number of rows, page size can be made customizable by users, so that users can query and browse information more flexibly and effectively.",paraId:19},{value:"Commonly used in a Card or a floating layer.",paraId:20},{value:"Commonly used in a Card or a data table, for no more than 10 pages.",paraId:21}]},765590:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The use of design patterns in enterprise-level businesses can significantly increase the certainty of the R&D team, save unnecessary design and maintain system consistency, allowing designers to focus on creativity where it is most needed.",paraId:0},{value:"Design patterns adhere to Ant Design design values and provide a general solution to recurring design issues in enterprise products. The designer can directly use the design pattern to complete the interface design, or the design pattern can be used as a starting point to derive a more business-specific solution to meet the individual design needs.",paraId:1},{value:"At the same time, this is a dynamically updated design document, and your reading and feedback is the driving force behind our progress, ",paraId:2},{value:"GitHub Feedback Address",paraId:2},{value:".",paraId:2},{value:"The complete design pattern will include examples of templates, components (ETC), and general-purpose concepts:",paraId:3,tocIndex:0},{value:"Function example:",paraId:4,tocIndex:0},{value:" Consists of multiple templates to inspire users how to use and build a common feature.",paraId:4,tocIndex:0},{value:"Template:",paraId:4,tocIndex:0},{value:" A page-level example that inspires users how to build a typical page in a system, such as a detail page.",paraId:4,tocIndex:0},{value:"Component",paraId:4,tocIndex:0},{value:"Basic components: The most basic elements of the system, such as buttons and pagers.",paraId:5,tocIndex:0},{value:"Business components/modules: Block-level examples, typically consisting of multiple components, such as the PageHeader generic header.",paraId:5,tocIndex:0},{value:"General concepts:",paraId:4,tocIndex:0},{value:" Some conventions that guarantee ETC systematization, such as typesetting, fonts, and copywriting.",paraId:4,tocIndex:0},{value:"We work with engineers to transform design patterns into reusable code that maximizes your productivity and communication efficiency.",paraId:6,tocIndex:1},{value:"Ant Design Pro",paraId:7,tocIndex:1},{value:": Out-of-the-box solution with 20+ templates and 10+ business components.",paraId:7,tocIndex:1},{value:"Offcial UI",paraId:8,tocIndex:1},{value:": Ant Design's React UI library is a global component library with 60+ base components.",paraId:7,tocIndex:1},{value:"Axure Library",paraId:7,tocIndex:1},{value:": Axure resource packs are included with the code to make your prototype look like a visual draft, including templates, components, and more.",paraId:7,tocIndex:1}]},735196:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"When several items are in close proximity to each other, they become one visual unit rather than several separate units. Otherwise, their distance should be larger and look more like several visual units. The basic purpose of proximity is to organize. To give an apparent view of the page structure and the hierarchy of information to users.",paraId:0},{value:`
  `,paraId:1},{value:"Divide the hierarchy of information through three formats:\u300Csmall spacing\u300D, \u300Cmiddle spacing\u300Dand\u300Clarge spacing\u300D",paraId:2},{value:`
  `,paraId:3},{value:"In the case that the three formats are applicable, the hierarchy of information can be separated clearly through adding or cutting down the multiple of \u300Cbasic spacing\u300D, or adding elements.",paraId:4},{value:"Note: in Ant Design, y = 8 + 8 * n, among which, n >= 0, y stands for the vertical spacing and 8 represents \u300Cbasic spacing\u300D.",paraId:5},{value:`
  `,paraId:6},{value:"To adapt to screens of different sizes, in the horizontal direction, use grid layout to arrange the components to ensure the flexibility of the layout.",paraId:7},{value:`
  `,paraId:8},{value:"In the inner of a component, the horizontal spacing of elements should differ too.",paraId:9}]},502413:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Invitations are powerful because they directly address discoverability and provide feedback before an interaction happens. Transitions are useful because they provide visual feedback during an interaction. But another class of feedback exists. It is the feedback that happens immediately after each interaction with the system, an immediate reaction paired with the user's action.",paraId:0},{value:"While we can't literally extend Newton's law to the world of user interfaces, we certainly can apply this principle to the way we should interact with users. When users click on a button, they expect the button to depress. When they type in a field, they expect to see characters show up in the text box. When they make a mistake, they want the application to tell them where they goofed.",paraId:1},{value:"While there is a possibility of too much feedback (or, more accurately, too much of the wrong feedback\u2014a concept we will discuss in the upcoming chapters), a system with little or no feedback feels sluggish and thickheaded.",paraId:2},{value:"Newton's Third Law of Motion",paraId:3},{value:": For every action, there is an equal and opposite reaction, from Wikipedia.",paraId:3},{value:"Auto Complete: As the user types input into a field, a drop-down menu of matching values is displayed. Depending on the categories of search results, it can be divided into two types, Certain Category and Uncertain Category.",paraId:4},{value:"Live Suggest: Live Suggest provides real-time search term suggestions for creating a search.",paraId:5},{value:"Live Preview: A Live Preview gives the users a glimpse beforehand of how the application will interpret their input once submitted.",paraId:6},{value:"Note: An ounce of prevention is worth a pound of cure. Use Live Previews to prevent errors.",paraId:7},{value:"Progressive Disclosure: When users are faced with a series of steps, it is often best to provide hints only when they are needed, instead of cluttering the interface by displaying all the hints at once. Learn more cases on ",paraId:8},{value:"Stay on the Page/Progressive Disclosure",paraId:9},{value:"\u3002",paraId:8},{value:"Progress Indicator: Progress Indicators keep a conversation going with the user when the rest of the interface is currently unavailable. Common Progress Indicators, such as Loading Button, Loading Table, Loading List and Loading Page, can be displayed respectively according to the frequency and importance of operation.",paraId:10},{value:"Click Refresh: Click Refresh notifies the user of fresh content and provides button or tool to refresh.",paraId:11},{value:"Periodic Refresh: Periodic Refresh brings in fresh content on a periodic basis without direct user interaction.",paraId:12}]},366679:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The same elements keep repeating in the whole interface, which not only could lower the user's learning cost effectively, but also help user recognize the relevance between these elements.",paraId:0},{value:`
The repetitive element may be a thick rule(line), a wireframe, color, design elements, particular format, spatial relationships, etc.
`,paraId:1}]},951263:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u8BBE\u8BA1\u6A21\u5F0F - \u63A2\u7D22 - \u5168\u5C40\u89C4\u5219 - \u7A7A\u72B6\u6001",paraId:0}]},149874:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[]},266718:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[]},49603:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[]},584966:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u8BBE\u8BA1\u6A21\u5F0F - \u63A2\u7D22 - \u5168\u5C40\u89C4\u5219 - \u6D88\u606F\u4E0E\u53CD\u9988",paraId:0}]},501882:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u8BBE\u8BA1\u6A21\u5F0F - \u63A2\u7D22 - \u5168\u5C40\u89C4\u5219 - \u5BFC\u822A",paraId:0}]},701556:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"\u8BBE\u8BA1\u6A21\u5F0F-\u63A2\u7D22\uFF1A\u6982\u89C8",paraId:0}]},855709:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[]},839302:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[]},991762:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[]},550555:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Solve most of problems on the same page and avoid a new one, because the page refresh and forwarding can lead to change blindness, in addition to disrupting the user's mental flow.",paraId:0},{value:"Change Blindness",paraId:1},{value:" is a surprising perceptual phenomenon that occurs when a change in a visual stimulus is introduced and the observer does not notice it. People's poor ability to detect changes has been argued to reflect fundamental limitations of human attention, from the term of Change blindness, Wikipedia.",paraId:1},{value:"Flow",paraId:2},{value:", also known as the zone, is the mental state of operation in which a person performing an activity is fully immersed in a feeling of energized focus, full involvement, and enjoyment in the process of the activity, from the term of Flow, Wikipedia",paraId:2},{value:"Double-confirm overlay: Using the Modal to double confirm should be avoided, while affording an opportunity to undo is preferred.",paraId:3},{value:"Detail Overlay: Allows an overlay to present additional information when the user clicks or hovers over a link or section of content.",paraId:4},{value:"Note that when a mouseover event occurs to trigger the Detail Overlay, 0.5-second delay needs to be added, and when the mouse is out, the overlay needs to be closed immediately.",paraId:5},{value:"Input Overlay: Let the user enter small amounts of text on the overlay.",paraId:6},{value:"List Inlay: Works as an effective way to hide detail until needed \u2014 while at the same time preserving space on the page for high-level overview information.",paraId:7},{value:"Tabs: Provides additional panels of information accessible by tab controls.",paraId:8},{value:"In the process of interaction design, Overlays allow you to bring additional interactions or content in a layer above the current page. Inlays allow you to do this within the page itself. However, another powerful approach to keeping users engaged on the current page is to create a virtual page. That is to say, we create the illusion of a larger virtual page.",paraId:9,tocIndex:2},{value:"It has long been common practice on the Web to turn each step into a separate page. While this may be the simplest way break down the problem, it may not lead to the best solution. For some Process Flows it makes sense to keep the user on the same page throughout the process.",paraId:10,tocIndex:3},{value:"Responsive Disclosure: Make the experience for selecting painless by providing disclosures as quickly as possible, and doing it all in a single-page interface.",paraId:11},{value:"Configurator Process: Provides a configurator that allows users to help them accomplish the task or build their own product.",paraId:12},{value:"Dialog Overlay Process: Any page switch is an interruption to the user's mental flow. In addition, any context switch is a chance for a user to leave the site. But sometimes the step-by-step flow is necessary.",paraId:13}]},24843:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Our Gray Matter are wired to react to dynamic things like movement,shape change and color change. Transitions smooth out the jarring world of the Web, making changes appear more natural. The main purpose for Transitions is to provide an engaging interface and reinforce communication.",paraId:0},{value:"Adding: The added elements should inform the users how to use, and the modified elements should be recognized.",paraId:1},{value:"Receding: The irrelevant page elements should be removed properly.",paraId:1},{value:"Normal: The elements without any change on the page can be safely ignored.",paraId:1},{value:"Slide In and Slide Out: Create an illusion of virtual space.",paraId:2,tocIndex:0},{value:"Carousel: Carousels are great for extending virtual space.",paraId:3,tocIndex:0},{value:"Accordion: Accordion helps maintain context while switching views.",paraId:4,tocIndex:0},{value:"Adding an Object: Add an object in the table or chart.",paraId:5,tocIndex:1},{value:"Deleting an Object: Delete an object in the table or chart.",paraId:6,tocIndex:1},{value:"Modifying an Object: Modify an object in the table or chart.",paraId:7,tocIndex:1},{value:"Calling out an Object: Click the page element and call out a new object.",paraId:8,tocIndex:1},{value:"If actual performance can hardly improved, there is a difference between actual performance and perceived performance. Diverting the user's attention is a good way to improve the perceived time an operation takes.",paraId:9,tocIndex:2},{value:"Please refer to ",paraId:10,tocIndex:3},{value:"Ant Motion, a motion language",paraId:10,tocIndex:3},{value:".",paraId:10,tocIndex:3}]},793275:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"The design values of Ant Design provide designers with internal standards for evaluation, enlighten and inspire the design principles and design patterns, and then offer guidance and general solutions for specific design problems.",paraId:0},{value:`
  `,paraId:1},{value:"Here are four design values of Ant Design:",paraId:2},{value:`
  `,paraId:1},{value:"The light-speed iteration of the digital world makes products more complex. However, human consciousness and attention resources are limited. Facing this design contradiction, the pursuit of natural interaction will be the consistent direction of Ant Design.",paraId:3,tocIndex:0},{value:"Natural user cognition",paraId:4,tocIndex:0},{value:": According to cognitive psychology, about 80% of external information is obtained through visual channels. The most important visual elements in the interface design, including layout, colors, illustrations, icons, etc., should fully absorb the laws of nature, thereby reducing the user's cognitive cost and bringing authentic and smooth feelings. In some scenarios, opportunely adding other sensory channels such as hearing, touch can create a richer and more natural product experience.",paraId:4,tocIndex:0},{value:"Natural user behavior",paraId:4,tocIndex:0},{value:": In the interaction with the system, the designer should fully understand the relationship between users, system roles, and task objectives, and also contextually organize system functions and services. At the same time, a series of methods such as behavior analysis, artificial intelligence and sensors could be applied to assist users to make effective decisions and reduce extra operations of users, to save users' mental and physical resources and make human-computer interaction more natural.",paraId:4,tocIndex:0},{value:"To get to know the past and present of natural values, ",paraId:5,tocIndex:0},{value:"please move to the column",paraId:5,tocIndex:0},{value:".",paraId:5,tocIndex:0},{value:`
  `,paraId:1},{value:'Interfaces are the medium of interaction between users and the system. They are the means rather than the purpose. Based on the pursuit of "natural" interaction, the product interfaces created by Ant Design should be high certainty and low cooperative entropy.',paraId:6,tocIndex:1},{value:"Designer certainty",paraId:7,tocIndex:1},{value:`: Enterprise products are made by collaboration. The more participants, the higher the entropy of cooperation. This is why low-efficiency design and difficult maintenance of the product system exists. By exploring the design rules and modular design ideas, designers should be provided with simplified design rules, components and patterns so they can reduce the cooperative entropy and a more efficient design process.
`,paraId:7,tocIndex:1},{value:"Keep restraint",paraId:8,tocIndex:1},{value:`: Don't make a decision before you figure it out. Designers should focus on the most valuable product features using minimal design elements to express. As Antoine de St. Exupery said: "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."`,paraId:8,tocIndex:1},{value:"Object-oriented",paraId:8,tocIndex:1},{value:`: Explore design rules and abstract them as "objects" to enhance the flexibility and maintainability of user interface design, while reducing the designer's subjective judgment and uncertainty of the system. For example, color value conversion and spacing typesetting.`,paraId:8,tocIndex:1},{value:"Modular design",paraId:8,tocIndex:1},{value:": Encapsulating the complex or reusable parts could provide limited interfaces to interact with other modules, ultimately reducing overall system complexity, thereby improving reliability and maintainability. Designers can use existing resources or abstract their reusable resources to save the unnecessary and low additional design to keep their focus on where creativity is most needed.",paraId:8,tocIndex:1},{value:"User certainty",paraId:7,tocIndex:1},{value:": User's daily work is completed through the collaboration of enterprise products. In addition to considering the consistency of a single product design, good certainty is required to be maintained across products, terminals, and systems. Consistent appearance and interaction, maintaining a familiarity to user, can reduce the difficulty of learning, cognitive and operating costs, and improve work efficiency.",paraId:7,tocIndex:1},{value:`
  `,paraId:1},{value:`A product or function is created by a designer not because of the designer's needs, but to carry a user's work mission. Product design should be user-centered to promote the achievement of the user's mission. Simultaneously, based on "nature" and "certainty" design values, we should regard user's human needs and create meaningful human-computer interaction for the work process.`,paraId:9,tocIndex:2},{value:"Meaning of result",paraId:10,tocIndex:2},{value:": Clear goals, immediate feedback. Understand the objectives, clearly disassemble the sub-objectives according to the use process, and let each interaction revolve around the achievement of the main objectives. Provide appropriate and immediate feedback for each action, so that users can understand the operation results. Besides, emotional design can be used to pacify users' negative emotions and enhance users' positive emotions.",paraId:10,tocIndex:2},{value:"Meaning of process",paraId:10,tocIndex:2},{value:": Moderate challenge, full devotion. Adjust the difficulty of work in different scenarios, make the function trigger at the right time to match the user's skill. If not necessary, do not add entities. Do not distract users, let users focus on task achievement, rather than the interface. Let the current work be neither to simple nor too complex. The challenges are moderate, but higher challenges are raised as the user's capabilities grow. It allows users to continue to immerse themselves in the flow of work and gain fulfilling work experience.",paraId:10,tocIndex:2},{value:`
  `,paraId:1},{value:"The growth of enterprise product's capabilities is accompanied by the evolution of user system roles. Designers should be responsible for the products they create and improve the discoverability of functions and values. Designers should design with the vision of development and consider the common growth of both ends of humans and computers.",paraId:11,tocIndex:3},{value:"Value connection",paraId:12,tocIndex:3},{value:": The growth of products depends on the expansion and deep use of users, while the growth of users depends on the growth of product functions. Designers should establish system design thinking, understand the value of product functions, explore user needs in different scenarios, and establish a connection between value and needs. Let product value be discovered and help users build more effective and efficient ways of working.",paraId:12,tocIndex:3},{value:"Man-Computer Symbiosis",paraId:12,tocIndex:3},{value:": More connections between product functions and user requirements make human-computer interaction closer and users and system are growing together. When designing products, users and systems should not be separated from each other. They should be considered as a dynamic group to ensure that they are flexible, inclusive and full of vitality.",paraId:12,tocIndex:3}]},106104:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:`The visual language is based on a set of design guidelines with data visualization features derived from the intermediate design language Ant Design, which makes the data expression more in line with the user's psychology, helping the \u201Cdesigner\u201D to incubate visual solutions with more business characteristics to meet the individualization. Design requirements, shielding unnecessary design differences and implementation costs, thus liberating the "designer" and front-end R&D resources, and achieving comprehensive improvement of data chart development efficiency.`,paraId:0},{value:"At the same time, this is a dynamically updated design document, your reading and feedback is the driving force for us to continue to advance, here is our ",paraId:1},{value:"GitHub feedback url",paraId:1},{value:".",paraId:1},{value:"We provide comprehensive design principles & guidelines and design resource files (Sketch), as well as a complete graphical usage note to help users quickly understand charts and design high quality visualization charts.",paraId:2,tocIndex:0},{value:"Design Principles",paraId:3,tocIndex:0},{value:"Design Resources",paraId:3,tocIndex:0},{value:"Charts Usage",paraId:3,tocIndex:0},{value:"We encapsulate a set of AntV component libraries based on native JavaScript, which includes a high-interaction base chart library G2Plot, a chart library G6 focusing on process and relationship analysis, a chart library F2 for mobile applications, and other frameworks in the community.",paraId:4,tocIndex:1},{value:"G2: Grammar of Graphics",paraId:5,tocIndex:1},{value:"G2Plot: a charting library",paraId:5,tocIndex:1},{value:" \u{1F525}",paraId:5,tocIndex:1},{value:"G6: Graph Visualization Framework",paraId:5,tocIndex:1},{value:"F2: Mobile Charts",paraId:5,tocIndex:1},{value:"L7: Geospatial Visualization Analysis",paraId:5,tocIndex:1},{value:"React AntV",paraId:5,tocIndex:1}]},770368:function(o,a,e){e.r(a),e.d(a,{texts:function(){return t}});const t=[{value:"Data visualization templates depict information and assist users to understand the data, by displaying a serious of multiple charts. In the way of viewing and operating the charts, users can analyze the data and finally make the data-driven strategies.",paraId:0},{value:"To help users quickly and clearly understand the meanings of data, analyze trends, and make decisions.",paraId:1,tocIndex:0},{value:`
  `,paraId:2},{value:`
    `,paraId:2},{value:`
    `,paraId:2},{value:`
      `,paraId:2},{value:`
      `,paraId:2},{value:"Define the layout logically, prioritize the content in order. In most cases, in order to emphasize the common-used analysis thoughts, you should organize the information from top to bottom and from left to right, or use progressive interactions. To sum up, put the summary first, then focus on filters, and finally provide details whenever the user needs.",paraId:3,tocIndex:2},{value:`
    `,paraId:2},{value:`
  `,paraId:2},{value:`
  `,paraId:2},{value:`
    `,paraId:2},{value:`
    `,paraId:2},{value:`
      `,paraId:2},{value:`
      `,paraId:2},{value:"Put the most important charts and the key scorecards on the top or upper part the page.",paraId:4,tocIndex:3},{value:`
    `,paraId:2},{value:`
  `,paraId:2},{value:`
  `,paraId:2},{value:`
    `,paraId:2},{value:`
    `,paraId:2},{value:`
      `,paraId:2},{value:`
      `,paraId:2},{value:"Keep data accuracy, clarity and completeness.",paraId:5,tocIndex:4},{value:"1. Use the correct types of chart.",paraId:5,tocIndex:4},{value:"2. Explain data definition when necessary.",paraId:5,tocIndex:4},{value:`
    `,paraId:2},{value:`
  `,paraId:2},{value:"When the data is highly summarized, a chart with the detail number(s) is more straight-forward than a chart alone.",paraId:6},{value:"Try to highlight the primary data on first one screen, and limit the sum of modules into 5-9, avoiding information overload.",paraId:7},{value:"Make good use of filtering capability, let users observe the overview, and check the detailed data at the same time. Therefore, users can explore quickly whenever they have questions.",paraId:8},{value:"In order to help users to make decisions, tile the most critical data from the overall perspective on the whole page. When all of the indicators share similar importance, choose the layout on the left; to emphasize one of them, select the one on the right.",paraId:9},{value:"When to use",paraId:10},{value:"For decision-makers to monitor overviews of data, and attach charts for further insights.",paraId:11},{value:"Related capabilities",paraId:12},{value:"Key indicator, scorecard, filter, chart.",paraId:13},{value:"Monitor Dashboards",paraId:2},{value:"When to use",paraId:14},{value:"This type of dashboard provides an overview of the data for decision making. Usually there is a central topic, around which presents multi-dimension indicators, helping the users find out abnormal immediately.",paraId:15},{value:"Related capabilities",paraId:16},{value:"Key indicator, scorecard, chart, map.",paraId:17},{value:'Analytics dashboards separate the data-analysis interface into several parts. Usually their layouts are "summary and description" structure, showing overviews of the whole information with different aspects. These dashboards can assist the users to discover the current problems.',paraId:18},{value:"When to use",paraId:19},{value:"To analyze multiple dimension of data, surround the same topic.",paraId:20},{value:"Related capabilities",paraId:21},{value:"Key indicator, scorecard, filter, chart.",paraId:22},{value:"Detail templates display the overview and detailed information of a report or a unique indicator. Users can set texts, lists and charts according to their business needs.",paraId:23},{value:"When to use",paraId:24},{value:"To show the details of the reports.",paraId:25},{value:"Related capabilities",paraId:26},{value:"Filter, chart, table.",paraId:27},{value:`Figure out users\u2019 roles and aims, and choose the categories of template accordingly. Different business roles pay attention to different key data. There are two common-used types of indicators: high-level dashboard data, and detailed information.
`,paraId:28,tocIndex:15},{value:"Decision-makers can select templates which describe the results;",paraId:29,tocIndex:15},{value:"Operators can choose templates which provide more analysis capabilities and detailed information.",paraId:29,tocIndex:15},{value:"Confirm the priority of the key indicators, and then define the page layouts accordingly. Put the most important data on the most outstanding positions.",paraId:28,tocIndex:15},{value:"Please remember, you can connect the user interfaces through interactive modes, telling your own stories.",paraId:28,tocIndex:15},{value:`
  `,paraId:2},{value:"One card, one topic.",paraId:30},{value:"Place closely-related datasets on one card, and use split lines to break it into different areas.",paraId:31},{value:"After designing the draft layout, select related visualization charts based on how summarized or detailed the data is. Usually scorecards and ranking lists are used for information summaries, tables and texts express details, and charts are between the two categories.",paraId:32},{value:"AntV Visualizatio Design Principles",paraId:33,tocIndex:20},{value:"AntV Visualization Color Palette",paraId:33,tocIndex:20},{value:"AntV Visualization Interaction Design Guidelines",paraId:33,tocIndex:20},{value:"AntV Chart Samples",paraId:34,tocIndex:21}]}}]);
